<?xml version="1.0"?>
<library>

  <function name="FinishGame" parameters="message">
    <![CDATA[
    message = "<h3>GAME OVER</h3>" + message
    ShowGameOverMenu (message)
  ]]>
  </function>

  <function name="ShowGameOverMenu" parameters="message">
    <![CDATA[
    ShowMenu (message + "<br/>What would you like to do?", Split("UNDO your last command;RESTART from the beginning;QUIT the game", ";"), false) {
      switch (result) {
        case ("UNDO your last command") {
          invoke (undo.script)
        }
        case ("RESTART from the beginning") {
          JS.RestartGame ()
        }
        case ("QUIT the game") {
          finish
        }
        default {
          ShowGameOverMenu
        }
      }
    }
  ]]>
  </function>

  <function name="UpdateContentsInLists">
    <![CDATA[
    JS.eval ("if (typeof(ignoreScenery) == 'undefined'){var ignoreScenery = [];}")
    foreach (o, AllObjects()) {
      o.listalias = GetDisplayAlias(o)
      containers = ListExclude(ListParents(o), game.pov)
      containers = ListExclude(containers, ListParents(game.pov))
      foreach (c, containers) {
        o.listalias = "&nbsp;&nbsp;" + o.listalias
      }
    }
  ]]>
  </function>

  <turnscript name="update_contents_in_lists_turnscript">
    <enabled />
    <script>
      UpdateContentsInLists
    </script>
  </turnscript>

  <function name="SetupScenery">
    foreach (o, AllObjects()) {
      if (GetBoolean(o,"scenery")) {
        JS.addToScenery (o.name)
      }
      o.changedscenery => {
        if (this.scenery) {
          JS.addToScenery (this.name)
        }
        else {
          JS.removeFromScenery (this.name)
        }
      }
    }
  </function>
  <turnscript name="turn_count">
    <enabled />
    <script>
      if (not GetBoolean(game, "suppressturnscripts")) {
        IncreaseObjectCounter (game, "turns")
      }
    </script>
  </turnscript>
  
<!---->

  <type name="defaultgame">
    <enablehyperlinks/>
    <echocommand/>
    <echohyperlinks/>
    <showdescriptiononenter/>
    <autodescription/>
    <defaultfont>Georgia, serif</defaultfont>
    <defaultfontsize type="int">12</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <backgroundimage type="string"></backgroundimage>
    <setbackgroundopacity type="boolean">false</setbackgroundopacity>
    <backgroundopacity type="double">0.5</backgroundopacity>
    <menufont>Arial</menufont>
    <menufontsize type="int">9</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <underlinehyperlinks/>
    <compassdirections type="simplestringlist">[CompassNW];[CompassN];[CompassNE];[CompassW];[CompassE];[CompassSW];[CompassS];[CompassSE];[CompassUp];[CompassDown];[CompassIn];[CompassOut]</compassdirections>
    <clearframe type="boolean">true</clearframe>
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="simplestringlist">[AllObjects]</allobjects>
    <parserignoreprefixes type="simplestringlist">[ParserIgnorePrefixes]</parserignoreprefixes>
    <displayroomdescriptiononstart type="boolean">true</displayroomdescriptiononstart>
    <showpanes/>
    <showcommandbar/>
    <showlocation/>

    <statusandcompassattop type="boolean">false</statusandcompassattop>
    <turnoffcompass type="boolean">false</turnoffcompass>
    <turnoffinventory type="boolean">false</turnoffinventory>
    <turnoffplacesandobjects type="boolean">false</turnoffplacesandobjects>
    <borderlesscursor type="boolean">false</borderlesscursor>
    <colourblend type="boolean">false</colourblend>
    <commandpane type="boolean">false</commandpane>
    <customstatuspane type="boolean">false</customstatuspane>
    <panestheme>Classic</panestheme>
    <shadowbox type="boolean">false</shadowbox>
    <respondtogridclicks type="boolean">false</respondtogridclicks>
    <commandcursor>&gt;</commandcursor>
    <moneyformat>$!</moneyformat>
    <classiclocation/>
    <turnoffsavebutton type="boolean">false</turnoffsavebutton>
    <mapexitwidth type="int">1</mapexitwidth>
    <mapexitcolour>Black</mapexitcolour>

    <setcustomwidth type="boolean">false</setcustomwidth>
    <customwidth type="int">950</customwidth>
    <setcustompadding type="boolean">false</setcustompadding>
    <custompaddingtop type="int">30</custompaddingtop>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">20</custompaddingleft>
    <custompaddingright type="int">20</custompaddingright>
    <showborder/>
    <showscore type="boolean">false</showscore>
    <showhealth type="boolean">false</showhealth>
    <showmoney type="boolean">false</showmoney>
    <showtitle/>
    <autodisplayverbs/>
    <clearscreenonroomenter type="boolean">false</clearscreenonroomenter>
    <autodescription_youarein type="int">1</autodescription_youarein>
    <autodescription_youcansee type="int">3</autodescription_youcansee>
    <autodescription_youcango type="int">4</autodescription_youcango>
    <autodescription_description type="int">2</autodescription_description>
    <autodescription_youarein_useprefix type="boolean">false</autodescription_youarein_useprefix>
    <autodescription_youarein_newline type="boolean">false</autodescription_youarein_newline>
    <autodescription_youcansee_newline type="boolean">false</autodescription_youcansee_newline>
    <autodescription_youcango_newline type="boolean">false</autodescription_youcango_newline>
    <autodescription_description_newline type="boolean">false</autodescription_description_newline>
    <changeroom_newline/>
    <command_newline type="boolean">false</command_newline>
    <description type="string"></description>
    <languageid>[LanguageId]</languageid>
    <gridmap type="boolean">false</gridmap>
    <mapscale type="int">30</mapscale>
    <mapsize type="int">150</mapsize>
    <changedpov type="script">
      InitPOV (oldvalue, game.pov)
    </changedpov>
    <feature_lightdark type="boolean">true</feature_lightdark>
    <feature_pictureframe type="boolean">false</feature_pictureframe>
    <feature_limitinventory type="boolean">false</feature_limitinventory>
    <feature_asktell type="boolean">true</feature_asktell>
    <feature_annotations type="boolean">false</feature_annotations>
    <feature_advancedwearables type="boolean">false</feature_advancedwearables>
    <feature_advancedscripts type="boolean">true</feature_advancedscripts>
    <deactivatecommandlinks type="boolean">false</deactivatecommandlinks>
    <multiplecommands type="boolean">true</multiplecommands>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg;*.ogg;*.ogv</publishfileextensions>
    <nohtmllog type="boolean">false</nohtmllog>
    <notranscript type="boolean">false</notranscript>
    <suppressturnscripts/>
    <!-- Scripts used by the text processor -->
    <textprocessorcommands type="scriptdictionary">
      <item key="if ">
        game.textprocessorcommandresult = ProcessTextCommand_If (section, data)
      </item>
      <item key="either ">
        game.textprocessorcommandresult = ProcessTextCommand_Either (section, data)
      </item>
      <item key="here ">
        game.textprocessorcommandresult = ProcessTextCommand_Here (section, data)
      </item>
      <item key="nothere ">
        game.textprocessorcommandresult = ProcessTextCommand_Here (section, data)
      </item>
      <item key="popup:">
        game.textprocessorcommandresult = ProcessTextCommand_Popup (section, data)
      </item>
      <item key="i:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="b:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="s:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="u:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="colour:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="color:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="back:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="object:">
        game.textprocessorcommandresult = ProcessTextCommand_Object (section, data)
      </item>
      <item key="command:">
        game.textprocessorcommandresult = ProcessTextCommand_Command (section, data)
      </item>
      <item key="page:">
        game.textprocessorcommandresult = ProcessTextCommand_Command (section, data)
      </item>
      <item key="exit:">
        game.textprocessorcommandresult = ProcessTextCommand_Exit (section, data)
      </item>
      <item key="once:">
        game.textprocessorcommandresult = ProcessTextCommand_Once (section, data)
      </item>
      <item key="notfirst:">
        game.textprocessorcommandresult = ProcessTextCommand_NotFirst (section, data)
      </item>
      <item key="random:">
        game.textprocessorcommandresult = ProcessTextCommand_Random (section, data)
      </item>
      <item key="rndalt:">
        game.textprocessorcommandresult = ProcessTextCommand_RandomAlias (section, data)
      </item>
      <item key="img:">
        game.textprocessorcommandresult = ProcessTextCommand_Img (section, data)
      </item>
      <item key="counter:">
        game.textprocessorcommandresult = ProcessTextCommand_Counter (section, data)
      </item>
      <item key="select:">
        game.textprocessorcommandresult = ProcessTextCommand_Select (section, data)
      </item>
      <item key="eval:">
        game.textprocessorcommandresult = ProcessTextCommand_Eval (section, data)
      </item>
      <item key="=">
        game.textprocessorcommandresult = ProcessTextCommand_Eval (section, data)
      </item>
    </textprocessorcommands>
    <feature_devmode type="boolean">false</feature_devmode>
    <turns type="int">0</turns>
    
  </type>

  
    <type name="male">
    <inherit name="npc_type" />
    <displayverbs type="simplestringlist">[LookAt];[SpeakTo]</displayverbs>
    <gender>[MaleGender]</gender>
    <article>[MaleArticle]</article>
    <possessive>[MalePossessive]</possessive>
    <wornmodifier>[MaleWornModifier]</wornmodifier>
    <not_all type="boolean"/>
  </type>
  
   <type name="female">
    <inherit name="npc_type" />
    <displayverbs type="simplestringlist">[LookAt];[SpeakTo]</displayverbs>
    <gender>[FemaleGender]</gender>
    <article>[FemaleArticle]</article>
    <possessive>[FemalePossessive]</possessive>
    <wornmodifier>[FemaleWornModifier]</wornmodifier>
    <not_all type="boolean"/>
  </type>
  
   <type name="plural">
    <gender>[NeutralPluralGender]</gender>
    <article>[NeutralPluralArticle]</article>
    <possessive>[NeutralPluralPossessive]</possessive>
    <wornmodifier>[NeutralPluralWornModifier]</wornmodifier>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>
  
  
  <type name="edible">
    <displayverbs type="listextend">[Eat]</displayverbs>
    <inventoryverbs type="listextend">[Eat]</inventoryverbs>
    <eat type="script">
      if (HasString(this, "eatmsg")) {
        msg (this.eatmsg)
      }
      else {
        msg (DynamicTemplate("Eaten", this))
      }
      if (HasInt(game.pov, "health")) {
        game.pov.health = game.pov.health + this.eathealth
      }
      //destroy (this.name)
      // Modded by KV
      RemoveObject (this)
    </eat>
    <eathealth type="int">0</eathealth>
  </type>
  
  
<!---->

  <!-- take command modified by KV to exclude objects with not_all set to true from TAKE ALL -->
  <command name="take" template="take">
    <multipleobjects type="script">
      game.pov.currentcommandpendingobjectscope = NewObjectList()
      objlist = ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov)
      objlist = ListExclude(objlist, FilterByAttribute(objlist,"not_all",true))
      foreach (obj, ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov)) {
        list add(game.pov.currentcommandpendingobjectscope, obj)
      }
    </multipleobjects>
    <multiple>
      takeList = NewObjectList()
      foreach (obj, ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov)) {
        if (obj.parent = game.pov.parent) {
          list add(takeList, obj)
        }
      }
      return (takeList)
    </multiple>
    <scope>notheld</scope>
    <script>
      if (not IsDefined("multiple")){
        multiple = false
      }
      if (multiple and ListCount(object) = 0) {
        msg("[NothingToTake]")
      }
      else{
        foreach (obj, object) {
          DoTake(obj, multiple)
        }
      }
    </script>
  </command>


  <command name="drop" template="drop">
    <multipleobjects type="script">
      list = GetDirectChildren(game.pov)
      list = ListExclude(list, FilterByAttribute(list, "scenery", true))
      list = ListExclude(list, FilterByAttribute(list, "visible", false))
      game.pov.currentcommandpendingobjectscope = list
    </multipleobjects>
    <multiple>
      list = GetDirectChildren(game.pov)
      list = ListExclude(list, FilterByAttribute(list, "scenery", true))
      list = ListExclude(list, FilterByAttribute(list, "visible", false))
      return (list)
    </multiple>
    <scope>inventory</scope>
    <script>
      if (not IsDefined("multiple")){
        multiple = false
      }
      if (multiple and ListCount(object) = 0) {
        msg("[NotCarryingAnything]")
      }
      else{
        foreach (obj, object) {
          DoDrop(obj, multiple)
        }
      }
    </script>
  </command>

  <command name="quit" pattern="[quit]">
    Ask ("Are you sure you'd like to quit?"){
      if (result) {
        finish
      }
      else {
        msg("Aborted.")
        game.suppressturnscripts = true
      }
    }
  </command>
  

  <command name="pretty_inventory_cmd">
    <pattern type="string">^i$|^inv$|^inventory$</pattern>
    <script>
      list = FormatObjectList(Template("CarryingListHeader"), game.pov, Template("And"), ".")
      if (list = "") {
      msg (Template("NotCarryingAnything"))
      }
      else {
      PrettyInventory
      }
    </script>
  </command>
  <function name="PrettyInventory">
    <![CDATA[
    stuff = ScopeInventory()
    list = ""
    int = 0
    foreach (o, stuff) {
      int = int + 1
      o.prettyalias = GetDisplayName(o)
      foreach (c, ListExclude(ListParents(o), game.pov)) {
        if (ListContains (stuff, c)) {
          o.prettyalias = "&nbsp;&nbsp;" + o.prettyalias
        }
      }
      br = ""
      if (int > 1) {
        br = "<br/>"
      }
      list = list + br + o.prettyalias
    }
    msg ("You are carrying:")
    msg (list)
    ]]>
  </function>

  <command name="noting">
    <pattern type="string">^\p{P}</pattern>
    <script>
      game.suppressturnscripts = true
      msg ("Noted.")
    </script>
  </command>
  
<!---->

	<command name="wear" template="wear">
		<multipleobjects type="script">
			game.pov.currentcommandpendingobjectscope = ScopeInventory()
		</multipleobjects>
		<script>
      if (not IsDefined("multiple")){
        multiple = false
      }
      if (multiple and ListCount(object) = 0) {
        msg("[NothingToWear]")
      }
      else{
        foreach (obj, object) {
          f = _DoWear(obj)
        }
        UpdateArmour
      }
		</script>
    <scope>inventory</scope>
	</command>
	<command name="remove" template="remove">
		<multipleobjects type="script">
			game.pov.currentcommandpendingobjectscope = ScopeInventory()
		</multipleobjects>
		<script>
      if (not IsDefined("multiple")){
        multiple = false
      }
      if (multiple and ListCount(object) = 0) {
        msg("[NothingToRemove]")
      }
      else{
        foreach (obj, object) {
          f = _DoRemove(obj)
        }
      }
      UpdateArmour
		</script>
    <scope>inventory</scope>
	</command>

<!---->

  <function name="ShowMenuResponse" parameters="option">
    if (game.menucallback = null) {
      error ("Unexpected menu response")
    }
    else {
      parameters = NewStringDictionary()
      dictionary add (parameters, "result", UnescapeQuotes(option))
      script = game.menucallback
      ClearMenu
      if (not GetBoolean(game, "disambiguating")) {
        game.runturnscripts = true
      }
      game.disambiguating = false
      invoke (script, parameters)
    }
  </function>


  <function name="ResolveNameFromList" parameters="variable, value, objtype, scope, secondaryscope" type="object"><![CDATA[
    value = Trim(LCase(value))
    fullmatches = NewObjectList()
    partialmatches = NewObjectList()
    foreach (obj, scope) {
      name = LCase(GetDisplayAlias(obj))
      CompareNames (name, value, obj, fullmatches, partialmatches)
      if (obj.alt <> null) {
        foreach (altname, obj.alt) {
          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
        }
      }
    }
    // allow referring to objects from the previous command by gender or article
    if (objtype = "object" and game.lastobjects <> null) {
      foreach (obj, game.lastobjects) {
        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)
        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)
      }
    }
    // Also check the secondary scope, but only if we have not found anything yet
    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {
      foreach (obj, secondaryscope) {
        name = LCase(GetDisplayAlias(obj))
        CompareNames (name, value, obj, fullmatches, partialmatches)
        if (obj.alt <> null) {
          foreach (altname, obj.alt) {
            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
          }
        }
      }
    }
    if (ListCount(fullmatches) = 1) {
      return (ListItem(fullmatches, 0))
    }
    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {
      return (ListItem(partialmatches, 0))
    }
    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {
      return (null)
    }
    else {
      game.disambiguating = true
      candidates = ListCompact(ListCombine(fullmatches, partialmatches))
      if (LengthOf(variable) > 0) {
        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements
        game.pov.currentcommandpendingvariable = variable
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), candidates, true) {
          varname = game.pov.currentcommandpendingvariable
          game.pov.currentcommandpendingvariable = null
          if (result <> null) {
            AddToResolvedNames (varname, GetObject(result))
          }
        }
      }
      else {
        // multi-object command, so after showing the menu, add the object to the list
        game.pov.currentcommandmultiobjectpending = true
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), candidates, true) {
          if (result <> null) {
            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))
            ResolveNextNameListItem
          }
        }
      }
      return (null)
    }
  ]]></function>
  <command name="put">
    <pattern type="string"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></pattern>
    <scope>object1=inventory|object2=container</scope>
    <allow_all />
    <script>
      <![CDATA[
      if (not IsDefined("multiple")) {
        multiple = false
      }
      if (multiple and ListCount(object1) = 0) {
        msg ("You're not carrying anything.")
      }
      else if (multiple and ListCount(object2) > 1) {
        msg ("You'll have to pick one target.")
      }
      else {
        object2 = ListItem(object2, 0)
        if (not LCase(ToString(DictionaryItem(game.pov.currentcommandvarlist,"object1"))) = "all" and ListContains(object1,object2)) {
          if (ListCount(object1)>1) {
            OutputTextNoBr (GetDisplayAlias(object2) + ": ")
          }
          msg (Template("CannotDoThat"))
        }
        foreach (obj, ListExclude(object1, object2)) {
          if (multiple) {
            OutputTextNoBr (GetDisplayAlias(obj) + ": ")
          }
          // put object1 in/on object 2
          canbedropped = true
          if (HasBoolean(obj, "drop")) {
            if (not obj.drop) {
              canbedropped = false
            }
          }
          if (obj.parent = object2) {
            msg (DynamicTemplate("AlreadyThere", obj))
          }
          else if (obj = object2) {
            msg ("You can't do that.")
          }
          else if (not ListContains(ScopeInventory(), obj)) {
            msg (DynamicTemplate("NotCarrying", obj))
          }
          else if (not canbedropped) {
            msg (DynamicTemplate("ObjectCannotBeStored", obj))
          }
          else if (not ListContains(ScopeReachable(), obj)) {
            msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(obj)))
          }
          else if (not ListContains(ScopeReachable(), object2)) {
            msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object2)))
          }
          else if (not object2.container) {
            msg (Template("CannotDoThat"))
          }
          else if (not object2.isopen) {
            msg (DynamicTemplate("ObjectNotOpen", object2))
          }
          else {
            if (GetBoolean(object2, "hidechildren")) {
              object2.hidechildren = false
            }
            params = NewDictionary()
            dictionary add (params, "object", obj)
            dictionary add (params, "destination", object2)
            if (HasScript(object2, "addscript")) {
              do (object2, "addscript", params)
            }
            else if (HasScript(obj, "drop")) {
              do (obj, "drop", params)
            }
            else {
              obj.parent = object2
              msg (Template("Done"))
            }
          }
          // must be carrying object1
          // item cannot be dropped
          // object1 must not be inside a closed container
          // object2 must not be inside a closed container
          // object2 must be an open container or surface
        }
      }
    ]]>
    </script>
  </command>

  <function name="AslSet" parameters="data">
    game.suppressturnscripts = true
    data = Split(data,"||")
    foreach (bit, data) {
      stuff = Split(bit,"=")
      obj_attr = stuff[0]
      obj_attr = Split(obj_attr,".")
      if (ListCount(obj_attr)>2){
        exclude = obj_attr[ListCount(obj_attr)-1]
        obj = Join(ListExclude(obj_attr,exclude),".")
        obj_attr = NewStringList()
        list add (obj_attr, obj)
        list add (obj_attr, exclude)
      }
      else {
        obj = obj_attr[0]
      }
      if (obj = "game.pov"){
        obj = game.pov
      }
      else if (obj = "game.pov.parent"){
        obj = game.pov.parent
      }
      else {
        obj = GetObject(obj)
      }
      attr = obj_attr[1]
      val = stuff[1]
      if (EndsWith(val,"_toInt")) {
        val = ToInt(Replace(val,"_toInt",""))
      }
      else if (EndsWith(val,"_toDouble")) {
        val = ToDouble(Replace(val,"_toDouble",""))
      }
      else if(LCase(val)="false"){
        val = false
      }
      else if(LCase(val)="true"){
        val = true
      }
      set (obj, attr, val)
    }
  </function>
  <function name="SetHyperlinkStatus" parameters="setting">
    if (setting = "on") {
    bool = "true"
    }
    else if (setting = "off") {
    bool = "false"
    }
    else {
    // Incorrect input.  Just turn the links on.
    bool = "true"
    }
    JS.eval ("var linksEnabled = "+bool+";")
    if (bool = "false") {
    game.suppresshyperlinks = true
    JS.eval ("$('.cmdlink,.commandlink').each(function(){$(this).addClass('disabled');});")
    }
    else {
    game.suppresshyperlinks = false
    }
  </function>
  
  <!--
    <command name="toggle_links_cmd">
    <pattern>links;hyperlinks;toggle links;toggle hyperlinks</pattern>
    <script>
      game.notarealturn = true
      game.suppressturnscripts = true
      if (not GetBoolean(game, "suppresshyperlinks")) {
        SetHyperlinkStatus ("off")
        msg ("Hyperlinks disabled.")
      }
      else {
        SetHyperlinkStatus ("on")
        msg ("Hyperlinks enabled.")
      }
    </script>
  </command>
  -->
  <verb name="enter_verb">
    <pattern>enter #object#;get in #object#;get into #object#;go in #object#;go into #object#</pattern>
    <property>enter</property>
    <defaultexpression>"You can't enter "+object.article+"."</defaultexpression>
    <scope>notheld</scope>
  </verb>

  <function name="ListAdd" parameters="list, value">
    if (not EndsWith(TypeOf(list),"list")) {
    error ("ListAdd: "+list+" is not a list!")
    }
    if (not ListContains(list,value)) {
    list add (list, value)
    }
  </function>

  <function name="ListRemove" parameters="list, value">
    if (ListContains(list,value)) {
    list remove (list, value)
    }
  </function>

  <function name="CloneAllVerbsLists">
    foreach (o, AllObjects()) {
    if (HasAttribute(o,"displayverbs")) {
    o.displayverbs = ListExclude(o.displayverbs,"")
    }
    }
    foreach (o, AllObjects()) {
    if (HasAttribute(o,"inventoryverbs")) {
    o.inventoryverbs = ListExclude(o.inventoryverbs,"")
    }
    }
  </function>

  <function name="ShowMenu" parameters="caption, options, allowCancel, callback">
    <![CDATA[
    if (GetBoolean(game, "enablehyperlinks")){
		outputsection = StartNewOutputSection()
		msg (caption)
		count = 0
		game.menuoptionskeys = NewStringList()
		game.menudisplayedoptions = NewStringDictionary()
		foreach (option, options) {
		  count = count + 1
		  if (TypeOf(options) = "stringdictionary") {
			optionText = StringDictionaryItem(options, option)
			optiontag = option
			style = GetCurrentLinkTextFormat()
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "string") {
			optionText = option
			optiontag = option
			style = GetCurrentLinkTextFormat()
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "object") {
			optionText = GetDisplayAlias(option)
			optiontag = option.name
			colour = ""
			if (HasString(option, "linkcolour") and GetUIOption("UseGameColours") = "true") {
			  colour = option.linkcolour
			}
			else {
			  colour = GetLinkTextColour()
			}
			style = GetCurrentTextFormat(colour)
			list add (game.menuoptionskeys, option.name)
		  }
		  else {
			error ("ShowMenu cannot handle a " + TypeOf(option))
		  }
		  dictionary add (game.menudisplayedoptions, optiontag, optionText)
		  msg (count + ": <a class=\"cmdlink\" style=\"" + style + "\" onclick=\"ASLEvent('ShowMenuResponse','" + EscapeQuotes(optiontag) + "')\">" + optionText + "</a>")
		}
		EndOutputSection (outputsection)
		game.menuoptions = options
		game.menuallowcancel = allowCancel
		game.menucallback = callback
		game.menuoutputsection = outputsection
	}
	else{
		outputsection = StartNewOutputSection()
		msg (caption)
		count = 0
		game.menuoptionskeys = NewStringList()
		game.menudisplayedoptions = NewStringDictionary()
		foreach (option, options) {
		  count = count + 1
		  if (TypeOf(options) = "stringdictionary") {
			optionText = StringDictionaryItem(options, option)
			optiontag = option
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "string") {
			optionText = option
			optiontag = option
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "object") {
			optionText = GetDisplayAlias(option)
			optiontag = option.name
			list add (game.menuoptionskeys, option.name)
		  }
		  else {
			error ("ShowMenu cannot handle a " + TypeOf(option))
		  }
		  dictionary add (game.menudisplayedoptions, optiontag, optionText)
		  msg (count + ": " + optionText)
		}
		EndOutputSection (outputsection)
		game.menuoptions = options
		game.menuallowcancel = allowCancel
		game.menucallback = callback
		game.menuoutputsection = outputsection
	}
  ]]>
  </function>
  <function name="HandleMenuTextResponse" parameters="input" type="boolean">
    <![CDATA[
    handled = false
    if (IsInt(input)) {
      number = ToInt(input)
      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {
        handled = true
        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))
      }
    }
    else if (HasAttribute(game, "menudisplayedoptions")) {
      foreach (option, game.menudisplayedoptions) {
        opt = LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option)))
        answer = LCase(Trim(input))
        if (opt = answer) {
          ShowMenuResponse (option)
          return (true)
        }
        else if (GetBoolean(game,"asking")) {
          if (answer = "y") {
            ShowMenuResponse ("Yes")
            game.asking = false
            return (true)
          }
          else if (answer = "n") {
            ShowMenuResponse ("No")
            game.asking = false
            return (true)
          }
        }
      }
    }
    return (handled)
  ]]>
  </function>

  <function name="ClearMenu">
    HideOutputSection (game.menuoutputsection)
    game.menuoutputsection = null
    game.menuoptions = null
    game.menudisplayedoptions = null
    game.menucallback = null
  </function>

  <function name="GetDisplayNameLink" parameters="obj, type" type="string">
    <![CDATA[
    verbs = GetDisplayVerbs(obj)
    if (verbs <> null) {
      verbCount = ListCount(verbs)
    }
    else {
      verbCount = 0
    }
    if (type = "exit" and verbCount = 1) {
      if (not game.enablehyperlinks) {
        result = GetDisplayAlias(obj)
      }
      else {
        result = "{exit:" + obj.name + "}"
      }
    }
    else if (type = "") {
      result = GetDisplayAlias(obj)
      if (not HasAttribute(game,"lastobjects")) {
        game.lastobjects = NewObjectList()
      }
      if (not obj = game.pov.parent) {
        list add (game.lastobjects, obj)
      }
    }
    else {
      result = "{object:" + obj.name + "}"
      if (not HasAttribute(game,"lastobjects")) {
        game.lastobjects = NewObjectList()
      }
      list add (game.lastobjects, obj)
    }
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else if (type = "exit") {
      prefix = ""
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix) > 0) {
      prefix = prefix + " "
    }
    result = prefix + result
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      if (LengthOf(obj.suffix) > 0) {
        result = result + " " + obj.suffix
      }
    }
    return (result)
  ]]>
  </function>

  <function name="ObjectLink" parameters="obj" type="string">
    game.lastobjects = NewObjectList()
    list add (game.lastobjects, obj)
    return ("{object:" + obj.name + "}")
  </function>
  <function name="InitUserInterface">
    if (not game.timeelapsed = 0) {
      UpdateContentsInLists
    }
  </function>
  
</library>