<!--Saved by Quest 5.6.6108.15891-->
<asl version="550">
  <implied element="object" property="alt" type="simplestringlist" />
  <implied element="command" property="pattern" type="simplepattern" />
  <implied element="command" property="script" type="script" />
  <implied element="command" property="multiple" type="AssociatedScope" />
  <implied element="object" property="displayverbs" type="simplestringlist" />
  <implied element="object" property="inventoryverbs" type="simplestringlist" />
  <implied element="walkthrough" property="steps" type="simplestringlist" />
  <implied element="timer" property="interval" type="int" />
  <implied element="timer" property="script" type="script" />
  <implied element="turnscript" property="script" type="script" />
  <template name="LanguageId">en</template>
  <template name="UnresolvedObject">I can't see that.</template>
  <template name="UnresolvedLocation">You can't go there.</template>
  <template name="DefaultObjectDescription">Nothing out of the ordinary.</template>
  <template name="DefaultSelfDescription">Looking good.</template>
  <template name="SeeListHeader">You can see</template>
  <template name="GoListHeader">You can go</template>
  <template name="And">and</template>
  <template name="Or">or</template>
  <template name="NothingToUndo">Nothing to undo!</template>
  <template name="NotCarryingAnything">You are not carrying anything.</template>
  <template name="CarryingListHeader">You are carrying</template>
  <template name="UnrecognisedCommand">I don't understand your command.</template>
  <template name="YouAreIn">You are in</template>
  <template name="LookAt">Look at</template>
  <template name="Take">Take</template>
  <template name="SpeakTo">Speak to</template>
  <template name="Use">Use</template>
  <template name="Drop">Drop</template>
  <template name="GoTo">Go to</template>
  <template name="Go">Go</template>
  <template name="SwitchOn">Switch on</template>
  <template name="SwitchOff">Switch off</template>
  <template name="Open">Open</template>
  <template name="Close">Close</template>
  <template name="Eat">Eat</template>
  <template name="NeutralGender">it</template>
  <template name="MaleGender">he</template>
  <template name="FemaleGender">she</template>
  <template name="SelfGender">you</template>
  <template name="NeutralPluralGender">they</template>
  <template name="MalePluralGender">they</template>
  <template name="FemalePluralGender">they</template>
  <template name="NeutralArticle">it</template>
  <template name="MaleArticle">him</template>
  <template name="FemaleArticle">her</template>
  <template name="SelfArticle">yourself</template>
  <template name="NeutralPluralArticle">them</template>
  <template name="MalePluralArticle">them</template>
  <template name="FemalePluralArticle">them</template>
  <template name="SelfAlias">me</template>
  <template name="SelfAlt">myself; self</template>
  <template name="AllObjects">all; everything</template>
  <template name="ParserIgnorePrefixes">the; a; an</template>
  <template name="CannotDoThat">You can't do that.</template>
  <template name="Done">Done.</template>
  <template name="ContainerContentsPrefix">containing</template>
  <template name="SurfaceContentsPrefix">on which there is</template>
  <template name="LockedExit">That way is locked.</template>
  <template name="NoKey">You do not have the key.</template>
  <template name="UnlockMessage">Unlocked.</template>
  <template name="LockMessage">Locked.</template>
  <template name="DefaultOops">There is nothing to correct.</template>
  <template name="VerbObjectSeparator">with; using</template>
  <template name="DefaultMultiObjectVerb">That doesn't work.</template>
  <template name="MultiObjectVerbMenu">With which object?</template>
  <template name="UseOnMenu">On which object?</template>
  <template name="GiveToMenu">To which object?</template>
  <template name="NoObjectsAvailable">There are no objects available to do that with.</template>
  <template name="Yes">Yes</template>
  <template name="No">No</template>
  <template name="By">by</template>
  <template name="CompassNW">northwest</template>
  <template name="CompassN">north</template>
  <template name="CompassNE">northeast</template>
  <template name="CompassW">west</template>
  <template name="CompassE">east</template>
  <template name="CompassSW">southwest</template>
  <template name="CompassS">south</template>
  <template name="CompassSE">southeast</template>
  <template name="CompassUp">up</template>
  <template name="CompassDown">down</template>
  <template name="CompassIn">in</template>
  <template name="CompassOut">out</template>
  <template name="CompassDirectionPrefix"></template>
  <template name="CompassDirectionSuffix"></template>
  <template name="UpDownDirectionPrefix"></template>
  <template name="UpDownDirectionSuffix"></template>
  <template name="InOutDirectionPrefix"></template>
  <template name="InOutDirectionSuffix"></template>
  <template name="CompassNWShort">nw</template>
  <template name="CompassNShort">n</template>
  <template name="CompassNEShort">ne</template>
  <template name="CompassWShort">w</template>
  <template name="CompassEShort">e</template>
  <template name="CompassSWShort">sw</template>
  <template name="CompassSShort">s</template>
  <template name="CompassSEShort">se</template>
  <template name="CompassUpShort">u</template>
  <template name="CompassDownShort">d</template>
  <template name="CompassInShort"></template>
  <template name="CompassOutShort">o</template>
  <template name="InventoryLabel">Inventory</template>
  <template name="StatusLabel">Status</template>
  <template name="PlacesObjectsLabel">Places and Objects</template>
  <template name="CompassLabel">Compass</template>
  <template name="InButtonLabel">in</template>
  <template name="OutButtonLabel">out</template>
  <template name="EmptyListLabel">(empty)</template>
  <template name="NothingSelectedLabel">(nothing selected)</template>
  <template name="TypeHereLabel">Type here...</template>
  <template name="ContinueLabel">Continue...</template>
  <template name="go"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></template>
  <template name="lookdir"><![CDATA[^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></template>
  <template name="look">^look$|^l$</template>
  <template name="lookat">look at; x; examine; exam; ex</template>
  <template name="take">take; get; pick up</template>
  <template name="undo">^undo$</template>
  <template name="inventory">^i$|^inv$|^inventory$</template>
  <template name="quit">^quit$</template>
  <template name="drop">drop</template>
  <template name="use">use</template>
  <template name="speakto">speak to; speak; talk to; talk</template>
  <template name="open">open</template>
  <template name="close">close</template>
  <template name="put"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></template>
  <template name="removefrom"><![CDATA[^remove (?<object1>.*) from (?<object2>.*)$]]></template>
  <template name="ask"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></template>
  <template name="tell"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></template>
  <template name="oops"><![CDATA[^oops (?<text>.*)$]]></template>
  <template name="buy">buy</template>
  <template name="climb">climb</template>
  <template name="drink">drink</template>
  <template name="eat">eat</template>
  <template name="givesingle">give</template>
  <template name="give"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></template>
  <template name="hit">hit</template>
  <template name="kill">kill</template>
  <template name="kiss">kiss</template>
  <template name="knock">knock</template>
  <template name="lick">lick</template>
  <template name="lie">lie on; lie upon; lie down on; lie down upon</template>
  <template name="listento">listen to</template>
  <template name="lock">lock</template>
  <template name="move">move</template>
  <template name="pull">pull</template>
  <template name="push">push</template>
  <template name="read">read</template>
  <template name="search">search</template>
  <template name="show">show</template>
  <template name="sit">sit on; sit upon; sit down on; sit down upon</template>
  <template name="smell">smell; sniff</template>
  <template name="taste">taste</template>
  <template name="throw">throw</template>
  <template name="tie">tie</template>
  <template name="touch">touch</template>
  <template name="turnon">turn on; turn #object# on; switch on; switch #object# on</template>
  <template name="turnoff">turn off; turn #object# off; switch off; switch #object# off</template>
  <template name="turn">turn</template>
  <template name="unlock">unlock</template>
  <template name="untie">untie</template>
  <template name="useon"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></template>
  <template name="wear">wear</template>
  <template name="listen">^listen$</template>
  <template name="DefaultListen">You can't hear much.</template>
  <template name="jump">^jump$</template>
  <template name="DefaultJump">You jump, but nothing happens.</template>
  <template name="sitdown">^sit$|^sit down$</template>
  <template name="DefaultSitDown">No time for lounging about now.</template>
  <template name="liedown">^lie$|^lie down$</template>
  <template name="DefaultLieDown">No time for lounging about now.</template>
  <template name="sleep">^sleep$|^rest$</template>
  <template name="DefaultSleep">No time for lounging about now.</template>
  <template name="wait">^wait$|^z$</template>
  <template name="DefaultWait">Time passes.</template>
  <template name="xyzzy">^xyzzy$</template>
  <template name="DefaultXyzzy">Surprisingly, absolutely nothing happens.</template>
  <template name="help">^help$|^\?$</template>
  <template name="save">^save$</template>
  <template name="DefaultHelp"><![CDATA[<u>Quick Help</u><br/><br/>
<b>- Objects:</b>  Try LOOK AT..., SPEAK TO..., TAKE..., DROP..., OPEN..., GIVE... TO..., USE... ON/WITH...<br/>
<b>- Inventory:</b>  See which items you are carrying by typing I, INV or INVENTORY.<br/>
<b>- Moving around:</b>  Press the compass buttons, or type GO NORTH, SOUTH, E, GO TO...<br/>
<b>- Shortcuts:</b>  Press the up arrow and down arrow to scroll through commands you have already typed in. Try X... as a shortcut for LOOK AT...]]></template>
  <template name="LanguageSpecificObjectTypes"></template>
  <template name="EditorVerbDefaultExpression">"You can't #verb# " + object.article + "."</template>
  <dynamictemplate name="TakeSuccessful">"You pick " + object.article + " up."</dynamictemplate>
  <dynamictemplate name="TakeUnsuccessful">"You can't take " + object.article + "."</dynamictemplate>
  <dynamictemplate name="FullInventory">WriteVerb(object, "be") + " too heavy to be taken."</dynamictemplate>
  <dynamictemplate name="MaxObjectsInInventory">"You can't carry any more items."</dynamictemplate>
  <dynamictemplate name="MaxObjectsInContainer">"You can't put more items in " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DropSuccessful">"You drop " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DropUnsuccessful">"You can't drop " + object.article + "."</dynamictemplate>
  <dynamictemplate name="AlreadyTaken">"You are already carrying " + object.article + "."</dynamictemplate>
  <dynamictemplate name="NotCarrying">"You are not carrying " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantUse">"You can't use " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantGive">"You can't give " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSpeakTo">WriteVerb(object, "say") + " nothing."</dynamictemplate>
  <dynamictemplate name="ObjectNotOpen">CapFirst(GetDisplayAlias(object)) + " " + Conjugate(object, "be") + " not open."</dynamictemplate>
  <dynamictemplate name="AlreadyOpen">WriteVerb(object, "be") + " already open."</dynamictemplate>
  <dynamictemplate name="AlreadyClosed">WriteVerb(object, "be") + " already closed."</dynamictemplate>
  <dynamictemplate name="CantOpen">"You can't open " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantClose">"You can't close " + object.article + "."</dynamictemplate>
  <dynamictemplate name="OpenSuccessful">"You open " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CloseSuccessful">"You close " + object.article + "."</dynamictemplate>
  <dynamictemplate name="AlreadyThere">WriteVerb(object, "be") + " already there."</dynamictemplate>
  <dynamictemplate name="ObjectContains">WriteVerb(object, "contain")</dynamictemplate>
  <dynamictemplate name="ContainerFull">WriteVerb(object, "be") + " full."</dynamictemplate>
  <dynamictemplate name="DisambiguateMenu">"Please choose which '" + text + "' you mean:"</dynamictemplate>
  <dynamictemplate name="UndoTurn">"Undo: " + text</dynamictemplate>
  <dynamictemplate name="DefaultAsk">WriteVerb(object, "do") + " not reply."</dynamictemplate>
  <dynamictemplate name="DefaultTell">WriteVerb(object, "do") + " not reply."</dynamictemplate>
  <dynamictemplate name="LockedObject">WriteVerb(object, "be") + " locked."</dynamictemplate>
  <dynamictemplate name="AlreadyLocked">WriteVerb(object, "be") + " already locked."</dynamictemplate>
  <dynamictemplate name="AlreadyUnlocked">WriteVerb(object, "be") + " already unlocked."</dynamictemplate>
  <dynamictemplate name="CannotLockOpen">"You cannot lock " + object.article + " when " + object.gender + " " + Conjugate(object, "be") + " open."</dynamictemplate>
  <dynamictemplate name="AlreadySwitchedOn">WriteVerb(object, "be") + " already switched on."</dynamictemplate>
  <dynamictemplate name="AlreadySwitchedOff">WriteVerb(object, "be") + " already switched off."</dynamictemplate>
  <dynamictemplate name="SwitchedOn">"You switch " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="SwitchedOff">"You switch " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="Eaten">"You eat " + object.article + "."</dynamictemplate>
  <dynamictemplate name="ObjectDoesNotContain">CapFirst(GetDisplayAlias(object1)) + " " + Conjugate(object1, "do") + " not contain " + GetDisplayAlias(object2) + "."</dynamictemplate>
  <dynamictemplate name="YouLooking">"You are looking " + text +"."</dynamictemplate>
  <dynamictemplate name="LookAtDarkness">"It is too dark to make anything out."</dynamictemplate>
  <dynamictemplate name="DefaultBuy">"You can't buy " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultClimb">"You can't climb " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultDrink">"You can't drink " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultEat">"You can't eat " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultGive">WriteVerb(object1, "do") + " not want " + object2.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultHit">"You can't hit " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKill">"You can't kill " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKiss">"You can't kiss " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKnock">"You can't knock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultLick">"You can't lick " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultLie">"You can't lie on " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultListenTo">"You listen, but " + object.article + " makes no sound."</dynamictemplate>
  <dynamictemplate name="DefaultLock">"You can't lock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultMove">"You can't move " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultPull">"You can't pull " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultPush">"You can't push " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultRead">"You can't read " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSearch">"You can't search " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultShow">"You can't show " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSit">"You can't sit on " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSmell">"You sniff, but " + object.article + " doesn't smell of much."</dynamictemplate>
  <dynamictemplate name="DefaultTaste">"You can't taste " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultThrow">"You can't throw " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTie">"You can't tie " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTouch">"You can't touch " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTurnOn">"You can't turn " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="DefaultTurnOff">"You can't turn " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="DefaultTurn">"You can't turn " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUnlock">"You can't unlock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUntie">"You can't untie " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUseOn">"You can't use " + object2.article + " that way."</dynamictemplate>
  <dynamictemplate name="DefaultWear">"You can't wear " + object.article + "."</dynamictemplate>
  <delegate name="AddScript" parameters="object" type="" />
  <delegate name="AssociatedScope" parameters="" type="objectlist" />
  <game name="The Bony King Of Nowhere">
    <gameid>d31872ee-0de1-4f6d-b3a6-a25d1d52f69a</gameid>
    <version>1.8.2</version>
    <firstpublished>2017</firstpublished>
    <description><![CDATA[You are a citizen of the land of Nowhere, and you are given an urgent letter to deliver to the King. Navigate your way through the strange and twisted landscape to the capital city of Lost and gain access to the King's castle.<br/><br/>This is a casual text adventure game in the classic parser style<br/><br/>*****type 'hints' at any time for instructions and help******<br/><br/>Note: This game was an entry in The 2017 Spring Thing Festival of Interactive Fiction (springthing.net) <br/>    ]]></description>
    <menufont>Georgia, serif</menufont>
    <feature_asktell />
    <underlinehyperlinks type="boolean">false</underlinehyperlinks>
    <enablehyperlinks type="boolean">false</enablehyperlinks>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <author>Luke A. Jones</author>
    <command_newline />
    <showdescriptiononenter type="boolean">false</showdescriptiononenter>
    <gridmap type="boolean">false</gridmap>
    <autodescription_youcango_newline />
    <autodescription_youarein_newline />
    <autodescription_description_newline />
    <feature_lightdark />
    <autodescription_youarein_useprefix />
    <feature_limitinventory />
    <autodescription_youcansee_newline />
    <cover>Bony King Blue Restructure.jpg</cover>
    <multiplecommands />
    <showcommandbar />
    <defaultfont>Georgia, serif</defaultfont>
    <roomenter type="script">
      MoveObjectHere (Dylan)
      ShowRoomDescription
    </roomenter>
    <subtitle>(Quest 5.6.3 Restoration by K.V.)</subtitle>
  </game>
  <command name="lookat">
    <pattern>look at #object#; x #object#; examine #object#; exam #object#; ex #object#</pattern>
    <script>
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (TypeOf(object, "look") = "script") {
        do (object, "look")
      }
      else {
        lookdesc = ""
        if (HasString(object, "look")) {
          lookdesc = object.look
        }
        if (LengthOf(lookdesc) = 0) {
          lookdesc = Template("DefaultObjectDescription")
        }
        if (GetBoolean(object, "switchedon")) {
          if (HasString(object, "switchedondesc")) {
            lookdesc = lookdesc + " " + object.switchedondesc
          }
        }
        else {
          if (HasString(object, "switchedoffdesc")) {
            lookdesc = lookdesc + " " + object.switchedoffdesc
          }
        }
        isDark = CheckDarkness()
        if (isDark and not GetBoolean(object, "lightsource")) {
          lookdesc = DynamicTemplate("LookAtDarkness", object)
        }
        msg (lookdesc)
      }
      ListObjectContents (object)
    </script>
  </command>
  <command name="take">
    <pattern>take #object#; get #object#; pick up #object#</pattern>
    <multiple>
      takeList = NewObjectList()
      foreach (obj, ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov)) {
        if (obj.parent = game.pov.parent) {
          list add (takeList, obj)
        }
      }
      return (takeList)
    </multiple>
    <script>
      foreach (obj, object) {
        DoTake (obj, multiple)
      }
    </script>
  </command>
  <command name="drop">
    <pattern>drop #object#</pattern>
    <multiple>
      return (GetDirectChildren(game.pov))
    </multiple>
    <script>
      foreach (obj, object) {
        DoDrop (obj, multiple)
      }
    </script>
  </command>
  <command name="use">
    <pattern>use #object#</pattern>
    <script><![CDATA[
      if (HasScript(object, "use")) {
        do (object, "use")
      }
      else {
        if (GetBoolean(object, "use")) {
          menu = NewStringDictionary()
          candidates = NewObjectList()
          candidates = CreateUseMenuList (object)
          if (ListCount(candidates) = 0) {
            msg (Template("NoObjectsAvailable"))
          }
          else {
            GenerateMenuChoices (menu, candidates)
            game.pov.usemenuobject = object
            if (HasString(object, "usemenuprompt")) {
              menucaption = object.usemenuprompt
            }
            else {
              menucaption = Template("UseOnMenu")
            }
            ShowMenu (menucaption, menu, true) {
              if (result <> null) {
                HandleUseOn (game.pov.usemenuobject, GetObject(result))
                game.pov.usemenuobject = null
              }
            }
          }
        }
        else {
          msg (DynamicTemplate("CantUse", object))
        }
      }
    ]]></script>
  </command>
  <command name="undo">
    <pattern type="string">^undo$</pattern>
    <isundo />
    <script>
      undo
    </script>
  </command>
  <command name="inventory">
    <pattern type="string">^i$|^inv$|^inventory$</pattern>
    <script>
      list = FormatObjectList(Template("CarryingListHeader"), game.pov, Template("And"), ".")
      if (list = "") {
        msg (Template("NotCarryingAnything"))
      }
      else {
        msg (list)
      }
    </script>
  </command>
  <command name="look">
    <pattern type="string">^look$|^l$</pattern>
    <script>
      ShowRoomDescription
    </script>
  </command>
  <command name="lookdir">
    <pattern type="string"><![CDATA[^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <script><![CDATA[
      if (HasScript(exit, "look")) {
        do (exit, "look")
      }
      else {
        message = DynamicTemplate("YouLooking",exit.alias)
        if (HasString(exit, "look")) {
          if (exit.look <> "") {
            message = exit.look
          }
        }
        if (exit.locked) {
          if (HasString(exit,"lockmessage")) {
            lockmessage = exit.lockmessage
          }
          else {
            lockmessage = Template("LockedExit")
          }
          msg (message+" "+lockmessage)
        }
        else {
          msg (message)
        }
      }
    ]]></script>
  </command>
  <command name="quit">
    <pattern type="string">^quit$</pattern>
    <script>
      request (Quit, "")
    </script>
  </command>
  <command name="go">
    <pattern type="string"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <unresolved>You can't go there.</unresolved>
    <script>
      if (exit.visible) {
        if (exit.locked) {
          msg (exit.lockmessage)
        }
        else if (exit.runscript) {
          if (HasScript(exit, "script")) {
            do (exit, "script")
          }
        }
        else if (exit.lookonly) {
          msg ("You can't go there.")
        }
        else {
          game.pov.parent = exit.to
        }
      }
      else {
        msg ("You can't go there.")
      }
    </script>
  </command>
  <command name="open">
    <pattern>open #object#</pattern>
    <script>
      TryOpenClose (true, object)
    </script>
  </command>
  <command name="close">
    <pattern>close #object#</pattern>
    <script>
      TryOpenClose (false, object)
    </script>
  </command>
  <command name="put">
    <pattern type="string"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></pattern>
    <script>
      // put object1 in/on object 2
      if (object1.parent = object2) {
        msg (DynamicTemplate("AlreadyThere", object1))
      }
      else if (not ListContains(ScopeInventory(), object1)) {
        msg (DynamicTemplate("NotCarrying", object1))
      }
      else if (not ListContains(ScopeReachable(), object1)) {
        msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object1)))
      }
      else if (not ListContains(ScopeReachable(), object2)) {
        msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object2)))
      }
      else if (not object2.container) {
        msg (Template("CannotDoThat"))
      }
      else if (not object2.isopen) {
        msg (DynamicTemplate("ObjectNotOpen", object2))
      }
      else {
        if (GetBoolean(object2, "hidechildren")) {
          object2.hidechildren = false
        }
        if (HasDelegateImplementation(object2, "addscript")) {
          rundelegate (object2, "addscript", object1)
        }
        else {
          object1.parent = object2
          msg (Template("Done"))
        }
      }
      // must be carrying object1
      // object1 must not be inside a closed container
      // object2 must not be inside a closed container
      // object2 must be an open container or surface
    </script>
  </command>
  <command name="removefrom">
    <pattern type="string"><![CDATA[^remove (?<object1>.*) from (?<object2>.*)$]]></pattern>
    <script>
      // remove object1 from object2
      // if object2 does indeed contain object1, this is a synonym for "take object1"
      if (not Contains(object2, object1)) {
        msg (DynamicTemplate("ObjectDoesNotContain", object2, object1))
      }
      else {
        DoTake (object1, false)
      }
    </script>
  </command>
  <command name="givesingle">
    <pattern>give #object#</pattern>
    <script><![CDATA[
      if (HasScript(object, "givesingle")) {
        do (object, "givesingle")
      }
      else {
        if (GetBoolean(object, "givesingle")) {
          menu = NewStringDictionary()
          candidates = NewObjectList()
          candidates = CreateGiveMenuList (object)
          if (ListCount(candidates) = 0) {
            msg (Template("NoObjectsAvailable"))
          }
          else {
            GenerateMenuChoices (menu, candidates)
            game.pov.givemenuobject = object
            if (HasString(object, "givemenuprompt")) {
              menucaption = object.givemenuprompt
            }
            else {
              menucaption = Template("GiveToMenu")
            }
            ShowMenu (menucaption, menu, true) {
              if (result <> null) {
                HandleGiveTo (game.pov.givemenuobject, GetObject(result))
                game.pov.givemenuobject = null
              }
            }
          }
        }
        else {
          msg (DynamicTemplate("CantGive", object))
        }
      }
    ]]></script>
  </command>
  <command name="give">
    <pattern type="string"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></pattern>
    <script>
      HandleGiveTo (object1, object2)
    </script>
  </command>
  <command name="useon">
    <pattern type="string"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></pattern>
    <script>
      HandleUseOn (object1, object2)
    </script>
  </command>
  <command name="ask">
    <pattern type="string"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "ask", "askdefault", "DefaultAsk")
    </script>
  </command>
  <command name="tell">
    <pattern type="string"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "tell", "telldefault", "DefaultTell")
    </script>
  </command>
  <command name="oops">
    <pattern type="string"><![CDATA[^oops (?<text>.*)$]]></pattern>
    <isoops />
    <script><![CDATA[
      hasoops = false
      if (HasAttribute(game, "unresolvedcommand")) {
        if (game.unresolvedcommand <> null) {
          hasoops = true
        }
      }
      if (not hasoops) {
        msg (Template("DefaultOops"))
      }
      else {
        dictionary remove (game.unresolvedcommandvarlist, game.unresolvedcommandkey)
        dictionary add (game.unresolvedcommandvarlist, game.unresolvedcommandkey, text)
        HandleSingleCommandPattern ("", game.unresolvedcommand, game.unresolvedcommandvarlist)
      }
    ]]></script>
  </command>
  <verb name="speak">
    <pattern>speak to #object#; speak #object#; talk to #object#; talk #object#</pattern>
    <property>speak</property>
    <defaulttemplate>DefaultSpeakTo</defaulttemplate>
  </verb>
  <verb name="buy">
    <pattern>buy #object#</pattern>
    <property>buy</property>
    <defaulttemplate>DefaultBuy</defaulttemplate>
  </verb>
  <verb name="climb">
    <pattern>climb #object#</pattern>
    <property>climb</property>
    <defaulttemplate>DefaultClimb</defaulttemplate>
  </verb>
  <verb name="drink">
    <pattern>drink #object#</pattern>
    <property>drink</property>
    <defaulttemplate>DefaultDrink</defaulttemplate>
  </verb>
  <verb name="eat">
    <pattern>eat #object#</pattern>
    <property>eat</property>
    <defaulttemplate>DefaultEat</defaulttemplate>
  </verb>
  <verb name="hit">
    <pattern>hit #object#</pattern>
    <property>hit</property>
    <defaulttemplate>DefaultHit</defaulttemplate>
  </verb>
  <verb name="kill">
    <pattern>kill #object#</pattern>
    <property>kill</property>
    <defaulttemplate>DefaultKill</defaulttemplate>
  </verb>
  <verb name="kiss">
    <pattern>kiss #object#</pattern>
    <property>kiss</property>
    <defaulttemplate>DefaultKiss</defaulttemplate>
  </verb>
  <verb name="knock">
    <pattern>knock #object#</pattern>
    <property>knock</property>
    <defaulttemplate>DefaultKnock</defaulttemplate>
  </verb>
  <verb name="lick">
    <pattern>lick #object#</pattern>
    <property>lick</property>
    <defaulttemplate>DefaultLick</defaulttemplate>
  </verb>
  <verb name="lieon">
    <pattern>lie on #object#; lie upon #object#; lie down on #object#; lie down upon #object#</pattern>
    <property>lie</property>
    <defaulttemplate>DefaultLie</defaulttemplate>
  </verb>
  <verb name="listento">
    <pattern>listen to #object#</pattern>
    <property>listen</property>
    <defaulttemplate>DefaultListenTo</defaulttemplate>
  </verb>
  <verb name="lock">
    <pattern>lock #object#</pattern>
    <property>lock</property>
    <defaulttemplate>DefaultLock</defaulttemplate>
  </verb>
  <verb name="move">
    <pattern>move #object#</pattern>
    <property>move</property>
    <defaulttemplate>DefaultMove</defaulttemplate>
  </verb>
  <verb name="pull">
    <pattern>pull #object#</pattern>
    <property>pull</property>
    <defaulttemplate>DefaultPull</defaulttemplate>
  </verb>
  <verb name="push">
    <pattern>push #object#</pattern>
    <property>push</property>
    <defaulttemplate>DefaultPush</defaulttemplate>
  </verb>
  <verb name="read">
    <pattern>read #object#</pattern>
    <property>read</property>
    <defaulttemplate>DefaultRead</defaulttemplate>
  </verb>
  <verb name="search">
    <pattern>search #object#</pattern>
    <property>search</property>
    <defaulttemplate>DefaultSearch</defaulttemplate>
  </verb>
  <verb name="show">
    <pattern>show #object#</pattern>
    <property>show</property>
    <defaulttemplate>DefaultShow</defaulttemplate>
  </verb>
  <verb name="siton">
    <pattern>sit on #object#; sit upon #object#; sit down on #object#; sit down upon #object#</pattern>
    <property>sit</property>
    <defaulttemplate>DefaultSit</defaulttemplate>
  </verb>
  <verb name="smell">
    <pattern>smell #object#; sniff #object#</pattern>
    <property>smell</property>
    <defaulttemplate>DefaultSmell</defaulttemplate>
  </verb>
  <verb name="taste">
    <pattern>taste #object#</pattern>
    <property>taste</property>
    <defaulttemplate>DefaultTaste</defaulttemplate>
  </verb>
  <verb name="throw">
    <pattern>throw #object#</pattern>
    <property>throw</property>
    <defaulttemplate>DefaultThrow</defaulttemplate>
  </verb>
  <verb name="tie">
    <pattern>tie #object#</pattern>
    <property>tie</property>
    <defaulttemplate>DefaultTie</defaulttemplate>
  </verb>
  <verb name="touch">
    <pattern>touch #object#</pattern>
    <property>touch</property>
    <defaulttemplate>DefaultTouch</defaulttemplate>
  </verb>
  <verb name="turnon">
    <pattern>turn on #object#; turn #object# on; switch on #object#; switch #object# on</pattern>
    <property>turnon</property>
    <defaulttemplate>DefaultTurnOn</defaulttemplate>
  </verb>
  <verb name="turnoff">
    <pattern>turn off #object#; turn #object# off; switch off #object#; switch #object# off</pattern>
    <property>turnoff</property>
    <defaulttemplate>DefaultTurnOff</defaulttemplate>
  </verb>
  <verb name="turn">
    <pattern>turn #object#</pattern>
    <property>turn</property>
    <defaulttemplate>DefaultTurn</defaulttemplate>
  </verb>
  <verb name="unlock">
    <pattern>unlock #object#</pattern>
    <property>unlock</property>
    <defaulttemplate>DefaultUnlock</defaulttemplate>
  </verb>
  <verb name="untie">
    <pattern>untie #object#</pattern>
    <property>untie</property>
    <defaulttemplate>DefaultUntie</defaulttemplate>
  </verb>
  <verb name="wear">
    <pattern>wear #object#</pattern>
    <property>wear</property>
    <defaulttemplate>DefaultWear</defaulttemplate>
  </verb>
  <command name="listen">
    <pattern type="string">^listen$</pattern>
    <script>
      msg (Template("DefaultListen"))
    </script>
  </command>
  <command name="jump">
    <pattern type="string">^jump$</pattern>
    <script>
      msg (Template("DefaultJump"))
    </script>
  </command>
  <command name="sit">
    <pattern type="string">^sit$|^sit down$</pattern>
    <script>
      msg (Template("DefaultSitDown"))
    </script>
  </command>
  <command name="lie">
    <pattern type="string">^lie$|^lie down$</pattern>
    <script>
      msg (Template("DefaultLieDown"))
    </script>
  </command>
  <command name="sleep">
    <pattern type="string">^sleep$|^rest$</pattern>
    <script>
      msg (Template("DefaultSleep"))
    </script>
  </command>
  <command name="wait">
    <pattern type="string">^wait$|^z$</pattern>
    <script>
      msg (Template("DefaultWait"))
    </script>
  </command>
  <command name="xyzzy">
    <pattern type="string">^xyzzy$</pattern>
    <script>
      msg (Template("DefaultXyzzy"))
    </script>
  </command>
  <command name="help">
    <pattern type="string">^help$|^\?$</pattern>
    <script>
      msg (Template("DefaultHelp"))
    </script>
  </command>
  <command name="save">
    <pattern type="string">^save$</pattern>
    <script>
      request (RequestSave, "")
    </script>
  </command>
  <object name="Northern Meadow">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>the</prefix>
    <description type="script"><![CDATA[
      firsttime {
        msg ("<br/>You are in the meadow outside your hovel, several acres of wild grassland and wild flowers. You may be dirt poor, but the beauty of the landscape is some consolation.<br/><br/>As you step out of your home there is a beating of wings above your head, looking up you see a pigeon rapidly disappearing out of sight, and a letter flutters to your feet, you pick it up.<br/><br/> On the wind you can hear a distant shout of what sounds like \"Fuck yooouuuu...\" coming from the pigeon's direction before it disappears from sight.")
        MakeObjectVisible (Letter)
        AddToInventory (Letter)
      }
      otherwise {
        msg ("<br/>You are in the meadow outside your hovel, several acres of wild grassland and wild flowers. You may be dirt poor, but the beauty of the landscape is some consolation.")
      }
    ]]></description>
    <exit alias="in" to="Your Hovel">
      <inherit name="indirection" />
    </exit>
    <object name="Letter">
      <inherit name="container_closed" />
      <look><![CDATA[The letter is addressed to the Bony King of Nowhere, at his palace in the capital Lost, many miles to the south. <br/><br/>On the reverse is written;<br/><br/><i>"If found please deliver personally to the King, the contents are confidential and you are forbidden from reading them. Failure to comply with either of these requests will result in summary execution."<br/></i><br/>Well that's just perfect you think, you've always hated a) the capital, b) the monarchy, and c) the south in general. ]]></look>
      <take />
      <drop type="boolean">false</drop>
      <dropmsg>remembering the threat of execution you decide not to drop the letter</dropmsg>
      <read>You're dying to know what's in the letter, but the instructions written on it forbid you from doing so. You can examine it.</read>
      <feature_container />
      <open />
      <close />
      <openmsg>You can't open it, the King will have you killed!</openmsg>
      <closemsg>It's already closed</closemsg>
      <visible type="boolean">false</visible>
      <volume type="int">1</volume>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider chopping the letter into pieces, but the King has spies everywhere and you value your life")
        }
        else if (Got(Blunt Axe)) {
          msg ("Your axe is too blunt (and it's probably not a good idea)")
        }
        else {
          msg ("You need a tool for that")
        }
      </hack>
    </object>
    <exit alias="south" to="Southern Meadow">
      <inherit name="southdirection" />
    </exit>
    <object name="wild flowers">
      <look>There is a multitude of beautiful wild flowers, bowing gently in the breeze</look>
      <scenery />
      <takemsg>You decide to leave the flowers for the visiting bees to enjoy</takemsg>
    </object>
  </object>
  <object name="Southern Meadow">
    <description><![CDATA[<br/>You are in the Southern Meadow, on the edge of the Northern Woods]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>the</prefix>
    <object name="fallen tree">
      <alt type="stringlist">
        <value>tree</value>
        <value>down tree</value>
        <value>up tree</value>
      </alt>
      <look>It's a fallen poplar tree, looks like it got too top heavy and was ripped down by the wind</look>
      <takemsg>It's far too heavy!</takemsg>
      <hack type="script"><![CDATA[
        if (Got(Sharp Axe)) {
          msg ("You swing your trusty axe and reduce the tree to four body-length logs<br/>")
          MakeObjectVisible (Logs)
          MakeObjectInvisible (fallen tree)
        }
        else if (Got(Blunt Axe)) {
          msg ("You swing your axe at the fallen tree, but it's too blunt to chop it. <br/>")
        }
        else {
          msg ("You need a tool for that")
        }
      ]]></hack>
    </object>
    <object name="apple">
      <feature_edible />
      <take />
      <eatmsg>you nibble a bit of the apple, but fruit isn't really your thing</eatmsg>
      <eat>You detest fruit so you decide to not eat the apple</eat>
      <throw>You throw the apple, as soon as it's in the air Dylan is off like a shot, he catches it and returns it to you</throw>
      <look>A medium sized apple of the Cox's variety, it is mottled green and red.</look>
      <feature_usegive />
      <volume type="int">1</volume>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("That would be fruitless.")
        }
        else if (Got(Blunt Axe)) {
          msg ("Your axe is blunt")
        }
        else {
          msg ("You need a tool for that")
        }
      </hack>
      <giveto type="scriptdictionary">
        <item key="Horse"><![CDATA[
          msg ("You place the apple in the flat palm of your hand and offer it up to the horse. Its lips tickle your hand as it picks it up, it munches it noisily. You smell the tart tang of the apple as it's masticated. <br/><br/>The horse eyes you and gently snorts. You've made a friend.")
          SetObjectFlagOn (Horse, "mates")
          RemoveObject (apple)
        ]]></item>
      </giveto>
    </object>
    <exit alias="north" to="Northern Meadow">
      <inherit name="northdirection" />
    </exit>
    <object name="Logs">
      <inherit name="plural" />
      <visible type="boolean">false</visible>
      <take />
      <look>Four body-length sized logs from a poplar tree</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <feature_usegive />
      <alt type="stringlist">
        <value>logs together</value>
        <value>logs with rope</value>
      </alt>
      <takemsg>You pick them up, they're not heavy</takemsg>
      <dropmsg>The four logs strike the ground making a rhythm..a log-a-rhythm</dropmsg>
      <tie type="script">
        if (Got(Rope)) {
          msg ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ")
          AddToInventory (Raft)
          RemoveObject (Rope)
          RemoveObject (Logs)
        }
        else if (Got(Reeds)) {
          msg ("The reeds are not strong enough to tie the logs with")
        }
        else {
          msg ("You need something to tie them with")
        }
      </tie>
      <lash type="script">
        if (Got(Rope)) {
          msg ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ")
          AddToInventory (Raft)
          RemoveObject (Rope)
          RemoveObject (Logs)
        }
        else if (Got(Reeds)) {
          msg ("The reeds are not strong enough to tie the logs with")
        }
        else {
          msg ("You need something to lash them with")
        }
      </lash>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider reducing the logs to matchwood, but decide they may prove more useful in their current logish formation.")
        }
        else if (not Got(Sharp Axe)) {
          msg ("You would need a tool to do that")
        }
      </hack>
      <selfuseon type="scriptdictionary">
        <item key="Broken Bridge">
          msg ("The logs are too short and too weak to span the gap in the bridge")
        </item>
      </selfuseon>
    </object>
    <exit alias="south" to="Northern Woods">
      <inherit name="southdirection" />
    </exit>
    <exit alias="east" to="Coleys Mill">
      <inherit name="eastdirection" />
    </exit>
  </object>
  <object name="Woodland Clearing">
    <description><![CDATA[<br/>A clearing in the wood, looks like it was once a small holding. There is a carpet of thyme underfoot that releases a sweet tang into the air as you walk across it.]]></description>
    <exit alias="north" to="Northern Woods">
      <inherit name="northdirection" />
    </exit>
    <exit alias="south" to="Northbank of the River Void">
      <inherit name="southdirection" />
    </exit>
    <object name="Ruined hovel">
      <hack>It's already ruined</hack>
      <look type="script">
        if (GetBoolean(Broken fishing rod, "rod_taken")) {
          if (GetBoolean(Mug, "mug_taken")) {
            msg ("An abandoned and collapsed circular hovel, it is empty.")
          }
          else {
            msg ("An abandoned and collapsed circular hovel. Amongst its shattered remains you spy what looks like a mug")
          }
        }
        else {
          if (GetBoolean(Mug, "mug_taken")) {
            msg ("An abandoned and collapsed circular hovel. Amongst its shattered remains you spy what looks like a fishing rod")
          }
          else {
            msg ("An abandoned and collapsed circular hovel. Amongst its shattered remains you spy what looks like a mug and a fishing rod")
          }
        }
      </look>
    </object>
    <object name="Broken fishing rod">
      <scenery />
      <alias>Broken fishing rod</alias>
      <take />
      <look>A bamboo fishing rod, with a cork handle. It has a line and hook, but the reel is seized with rust. </look>
      <feature_usegive />
      <volume type="int">1</volume>
      <ontake type="script">
        SetObjectFlagOn (Broken fishing rod, "rod_taken")
      </ontake>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider smashing the rod to bits with your axe, but you mull it over and decide against it")
        }
        else if (Got(Blunt Axe)) {
          msg ("You consider smashing the rod to bits with your axe, but you mull it over and decide against it")
        }
        else {
          msg ("You need a tool to do that")
        }
      </hack>
      <giveto type="scriptdictionary">
        <item key="Tinker"><![CDATA[
          msg ("<br/>\"Ah, haven't seen this model in years, a real classic in its day. I can fix it for you, but I need a favour in return. Can you take this sack of wheat to the Windmill and have it milled for me please?\"<br/><br/>The Tinker hands you a sack of wheat")
          AddToInventory (Sack of Wheat)
          RemoveObject (Broken fishing rod)
        ]]></item>
      </giveto>
    </object>
    <object name="Mug">
      <alias>Chipped Mug</alias>
      <visible />
      <look>An old brown clay mug, chipped on the rim. On the side it reads 'Mug puns are tea-dious'</look>
      <take />
      <scenery />
      <feature_usegive />
      <ontake type="script">
        SetObjectFlagOn (Mug, "mug_taken")
      </ontake>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider smashing the mug to pieces but think better of it")
        }
        else if (Got(Blunt Axe)) {
          msg ("You consider smashing the mug to pieces but think better of it")
        }
        else {
          msg ("You need a tool for that")
        }
      </hack>
    </object>
    <object name="thyme">
      <look>A powerful herb, Mussolini made the trains run on this stuff</look>
      <scenery />
      <takemsg>You decide to leave the thyme undisturbed, it would be a waste</takemsg>
      <hack>You decide to leave the thyme undisturbed, it would be a waste</hack>
    </object>
  </object>
  <object name="Northbank of the River Void">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>the</prefix>
    <descprefix>You are at</descprefix>
    <description><![CDATA[<br/>You are on the Northbank of the River Void. The river is roaring past with a fierce current.]]></description>
    <exit alias="north" to="Woodland Clearing">
      <inherit name="northdirection" />
    </exit>
    <object name="Broken Bridge">
      <look>A wooden footbridge, which has collapsed in the middle leaving a yawning gap down to the dangerous river below. What a terrible thing to happen, you can't get over it.</look>
      <fix>It's beyond repair</fix>
      <jump>You take a run up to the bridge, but as you approach the gap you realise you'll never make it, and just manage to stop in time. You retreat to the safety of the riverbank.</jump>
      <alias>Broken Bridge</alias>
      <repair>It's beyond repair</repair>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider hacking up the bridge, but it's already broken and the wood is too rotten to be of use")
        }
        else if (Got(Blunt Axe)) {
          msg ("Your axe is too blunt")
        }
        else {
          msg ("You need a tool to do that")
        }
      </hack>
    </object>
    <object name="Reeds">
      <inherit name="plural" />
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <scenery />
      <take />
      <feature_usegive />
      <weave>Nice idea, but you lack the skill</weave>
      <look>They are long and fibrous water reeds</look>
      <takemsg>You pick a large bail of reeds</takemsg>
      <prefix>some</prefix>
      <tie>The reeds aren't strong enough to tie things with</tie>
      <twist>Nice idea, but you lack the skill to make them into something useful</twist>
      <hack>You need them whole</hack>
      <giveto type="scriptdictionary">
        <item key="Wood Gnome Chompsky">
          msg ("\"Ah river reeds, perfect for rope making, let me sort that out for you\". With his quick and nimble fingers the Gnome weaves the reeds together with astonishing speed. He hands you a long coil of strong rope.")
          RemoveObject (Reeds)
          AddToInventory (Rope)
        </item>
      </giveto>
      <selfuseon type="scriptdictionary">
        <item key="Logs">
          msg ("The reeds aren't strong enough to tie things with")
        </item>
      </selfuseon>
    </object>
    <object name="River Void">
      <alt type="stringlist">
        <value>river</value>
        <value>void</value>
        <value>riverbank</value>
      </alt>
      <look>The River Void is fast, deep and wide. The water level is unusually high and it is roaring loudly as it flows past. It looks like the bridge across has collapsed. On the edge of the riverbank there are a thick beds of reeds.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
    </object>
    <command>
      <pattern>swim; swim across; wade across; swim across river; wade across river</pattern>
      <script>
        msg ("It's far too dangerous to swim across")
      </script>
    </command>
  </object>
  <object name="Coleys Mill">
    <alias>Coley's Mill</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix type="string"></prefix>
    <descprefix>You are at</descprefix>
    <description type="script">
      if (GetBoolean(Awake Miller, "working_miller")) {
        msg ("You are stood in the yard of Coley's Mill, towering above you is the windmill, it is painted bright red. There is a stiff breeze today and the sails are turning at a fair pace.")
      }
      else {
        msg ("You are stood in the yard of Coley's Mill, towering above you is the windmill, it is painted bright red. There is a stiff breeze today but the sails are motionless.")
      }
    </description>
    <exit alias="west" to="Southern Meadow">
      <inherit name="westdirection" />
    </exit>
    <exit alias="in" to="Windmill">
      <inherit name="indirection" />
    </exit>
    <object name="Hand Water Pump">
      <look>A green hand pump fixed over a well, there is a large lever on the side of it.</look>
      <feature_usegive />
      <pump>You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain</pump>
      <use type="script">
        msg ("You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain.")
      </use>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You swing at the pump with your axe, it makes a large 'CLANG!' noise as you hit it, and it jars your arms terribly, you feel like an idiot.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You swing at the pump with your axe, it makes a large 'CLANG' noise as you hit it, and it jars your arms terribly, you feel like an idiot. ")
        }
        else {
          msg ("You need a tool to do that, but probably not a great idea anyway!")
        }
      </hack>
    </object>
    <object name="Jug full of water">
      <alias>Cider Jug (full of freezing cold water)</alias>
      <visible type="boolean">false</visible>
      <take />
      <look>An quart sized jug of cider, full of freezing cold water. Written on the label it says 'Dicken's Cider, 8.5%, please drink responsibly.'</look>
    </object>
    <command>
      <pattern>fill jug with water; pump water into jug; put jug under pump; put water in jug; fill jug</pattern>
      <script>
        if (Got(Empty Jug Of Cider)) {
          msg ("You place the jug under the spout of the pump and crank the lever, with three pumps the jug is full of freezing cold water, you pick it up")
          MakeObjectInvisible (Empty Jug Of Cider)
          MakeObjectVisible (Jug full of water)
          AddToInventory (Jug full of water)
        }
        else {
          msg ("you are not carrying a jug")
        }
      </script>
    </command>
    <object name="lever">
      <look>The lever of the pump, used to pump the water out.</look>
      <push>You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain</push>
      <pump>You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain</pump>
      <crank>You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain</crank>
      <pull>You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain</pull>
      <feature_usegive />
      <scenery />
      <use type="script">
        msg ("You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain")
      </use>
    </object>
    <object name="Windmill scenery">
      <scenery />
      <alias>Windmill</alias>
      <look type="script">
        if (GetBoolean(Awake Miller, "working_miller")) {
          msg ("The bright red windmill towers above you, it has four large slated wooden sails which are spinning, the saiils and gearing are making a pleasing repetitive , \"Koor-keeer, chick-a-chick..\" noise as they turn.")
        }
        else {
          msg ("The bright red windmill towers above you, it has four large slated wooden sails which are stationary even though there is a stiff breeze.")
        }
      </look>
    </object>
    <exit alias="north" to="Sandy Beach">
      <inherit name="northdirection" />
    </exit>
  </object>
  <verb>
    <property>sp</property>
    <pattern>sp</pattern>
    <defaultexpression>"You can't sp " + object.article + "."</defaultexpression>
  </verb>
  <object name="Your Hovel">
    <description><![CDATA[<br/>You are in your hovel in the northernmost borderlands of the Kingdom of Nowhere.<br/><br/>It is a round wattle and daub hut. There is a fireplace in the middle with a hole in the thatch roof above it acting as a chimney.<br/><br/>Around the circumference of the room there are a few sticks of furniture and rags that represent the totality of your worldly possessions.<br/><br/><i>(type 'hints' for game specific help at anytime</i>)]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <object name="fireplace">
      <alt type="stringlist">
        <value>fire</value>
      </alt>
      <scenery />
      <light>You could rekindle the fire but you decide not to as you are low on fuel, besides you need to get out and about</light>
      <look type="script">
        if (GetBoolean(Shovel, "taken")) {
          msg ("A round circle of flat stones with the ashen remains of last night's fire smouldering in the middle. ")
        }
        else {
          msg ("A round circle of flat stones with the ashen remains of last night's fire smouldering in the middle. Leaning against the fireplace is a shovel.")
        }
      </look>
    </object>
    <object name="furniture">
      <scenery />
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <look>Furniture might be a rather grand term what consists of a filthy straw bed and a battered wooden chest</look>
    </object>
    <object name="Straw Bed">
      <scenery />
      <alt type="stringlist">
        <value>filthy straw bed</value>
        <value>bed</value>
        <value>straw</value>
      </alt>
      <look>Several large rectangular bales of hay lashed together, it is blackened with grime and splattered with mud</look>
      <takemsg>It's too heavy to carry</takemsg>
      <hack>That would be axe-zessive!</hack>
    </object>
    <exit alias="out" to="Northern Meadow">
      <inherit name="outdirection" />
    </exit>
    <object name="Rags">
      <inherit name="plural" />
      <scenery />
      <take />
      <feature_usegive />
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <hack>That would be axe-zessive!</hack>
      <look type="script">
        if (Got(Rags)) {
          msg ("A few rags of cloth")
        }
        else {
          msg ("A pile of rags that were once clothes, now too threadbare to wear")
        }
      </look>
      <selfuseon type="scriptdictionary">
        <item key="Dull Glass Sphere">
          if (Got(Rags)) {
            msg ("Using the rags from your home you polish the surface of he sphere until it shines and reflects an inverted curved image of your face.")
            RemoveObject (Dull Glass Sphere)
            AddToInventory (Shiny Glass Sphere)
          }
          else {
            msg ("You need something to clean it with, a piece of cloth perhaps?")
          }
        </item>
      </selfuseon>
      <giveto type="scriptdictionary">
        <item key="Wood Gnome Chompsky"><![CDATA[
          msg ("<br/>\"Hmm, this was nice cloth once upon a time, but it's too far gone for me to do anything with, sorry\" He hands the rags back to you.")
        ]]></item>
      </giveto>
    </object>
    <object name="stones">
      <inherit name="plural" />
      <alias>stones</alias>
      <scenery />
      <alt type="stringlist">
        <value>stone</value>
      </alt>
      <look>A circle of flat whetstones bearing heavy scratch marks.</look>
      <takemsg>You don't want to carry these around!</takemsg>
    </object>
    <object name="Dylan">
      <inherit name="namedmale" />
      <look>It's your faithful canine companion, he's an ageing Boxer mongrel of some sort, he has tan brown fur with a white patch on his chest. He's seen a few too many scrapes and doesn't smell too sweet, but you love him dearly and he's called Dylan.</look>
      <prefix type="string"></prefix>
      <alias>Your Dog</alias>
      <alt type="stringlist">
        <value>dylan</value>
        <value>dog</value>
      </alt>
      <takemsg>You don't need to carry him, he'll follow you anywhere</takemsg>
      <speak>Dylan looks up to you and barks excitedly</speak>
      <hack>He's your only friend in the world, you'd never hurt him</hack>
      <kill type="string"></kill>
      <stroke type="script">
        firsttime {
          msg ("Dylan nuzzles against your leg and looks up to you with doleful eyes, his tail wagging expectantly. Some of his moulting hair collects in your hand, you shove it in your pocket")
          AddToInventory (hair of dog)
        }
        otherwise {
          msg ("Dylan nuzzles against your leg and looks up to you with doleful eyes, his tail wagging expectantly.")
        }
      </stroke>
    </object>
    <object name="roof">
      <visible />
      <scenery />
      <look>The circular roof is made from straw thatch, with a small hole in the centre to let out the smoke from the fire</look>
    </object>
    <object name="hole">
      <scenery />
      <look>A small hole in the centre of the roof, you made it to let out the smoke from the fire</look>
    </object>
    <object name="scratch marks">
      <scenery />
      <look>Heavy scratch marks made from the repetitive action of sharpening tools</look>
    </object>
    <object name="Shovel">
      <scenery />
      <look>A small wooden shovel that you use for removing ashes. It's a ground-breaking design.</look>
      <take />
      <feature_usegive />
      <ontake type="script">
        SetObjectFlagOn (Shovel, "taken")
      </ontake>
    </object>
    <object name="Battered Wooden Chest">
      <inherit name="container_closed" />
      <scenery type="boolean">false</scenery>
      <alt type="stringlist">
        <value>wooden chest</value>
        <value>battered chest</value>
        <value>chest</value>
      </alt>
      <look>An ancient wooden chest that has been repeatedly patched and repaired. You'll be pleased to know there is no lock.</look>
      <feature_container />
      <hidechildren />
      <listchildren />
      <takemsg>It's too heavy to carry around</takemsg>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <object name="Blunt Axe">
        <take />
        <dropmsg>You drop the useful looking axe,  a wise move I'm sure</dropmsg>
        <look>An axe with an arms length wooden haft and a steel head with the letter L and the pattern of a rose embossed on it. It is your prized (and only) possession given to you by your father. It's blade is a sharp as Jack after a busy day.</look>
        <alias>axe</alias>
        <feature_usegive />
        <sharpen type="script"><![CDATA[
          if (game.pov.parent = Your Hovel) {
            msg ("You walk over to the hearthstones and sharpen the axe blade on one of them. After a minute or so it gleams with a wicked edge, it's now an axis of evil.<br/><br/>")
            RemoveObject (Blunt Axe)
            AddToInventory (Sharp Axe)
          }
          else if (not game.pov.parent = Your Hovel) {
            msg ("There is nothing here to sharpen it on.")
          }
        ]]></sharpen>
        <selfuseon type="scriptdictionary">
          <item key="fallen tree">
            msg ("You swing your axe at the fallen tree, but is too blunt to chop it. ")
          </item>
          <item key="stones"><![CDATA[
            if (game.pov.parent = Your Hovel) {
              msg ("You walk over to the hearthstones and sharpen the axe blade on one of them. After a minute or so it gleams with a wicked edge, it's now an axis of evil.<br/><br/>")
              RemoveObject (Blunt Axe)
              AddToInventory (Sharp Axe)
            }
            else if (not game.pov.parent = Your Hovel) {
              msg ("There are no suitable stones here to sharpen it on.")
            }
          ]]></item>
        </selfuseon>
      </object>
    </object>
    <object name="hay">
      <alt type="stringlist">
        <value>bales</value>
        <value>bales of hay</value>
        <value>straw</value>
      </alt>
      <takemsg>You decide to leave the filthy hay where it is</takemsg>
      <scenery />
    </object>
    <object name="player">
      <look>You are thin and your skin is grimy, you are wearing ragged grey woollen clothing</look>
      <alt type="stringlist">
        <value>self</value>
      </alt>
      <attr name="pov_look">You are thin and your skin is grimy, you are wearing grey ragged woollen clothing</attr>
    </object>
  </object>
  <verb>
    <property>sharpen</property>
    <pattern>sharpen</pattern>
    <defaultexpression>"You can't sharpen " + object.article + "."</defaultexpression>
  </verb>
  <object name="Sharp Axe">
    <look>An axe with an arms length wooden haft and a sharpened steel head with the letter L and the pattern of a rose embossed on it. It is your prized (and only) possession given to you by your father. It's blade is sharp as frost.</look>
    <take />
    <feature_usegive />
    <sharpen>It's already sharp</sharpen>
    <dropmsg>You drop the useful looking axe, a wise move I'm sure</dropmsg>
    <selfuseon type="scriptdictionary">
      <item key="fallen tree">
        msg ("You swing your trusty axe and reduce the tree to four body-length logs")
        MakeObjectInvisible (fallen tree)
        MakeObjectVisible (Logs)
      </item>
      <item key="stones">
        msg ("The axe is already sharpened")
      </item>
    </selfuseon>
  </object>
  <verb>
    <property>light</property>
    <pattern>light</pattern>
    <defaultexpression>"You can't light " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>cut</property>
    <pattern>cut; chop; chop down; cut up; chop up</pattern>
    <defaultexpression>"You can't cut; chop; chop down; cut up; chop up " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>stroke</property>
    <pattern>stroke; pat; pet; </pattern>
    <defaultexpression>"You can't stroke; pat; pet;  " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>rub</property>
    <pattern>rub</pattern>
    <defaultexpression>"You can't rub " + object.article + "."</defaultexpression>
  </verb>
  <command>
    <pattern>hints</pattern>
    <script><![CDATA[
      msg ("<br/>Greetings adventurer, and a warm welcome to my game!<br/><br/>OK, let's try and point you in the right direction.<br/><br/>The object of the game is explore the world, its objects and its characters through typing in commands. <br/><br/>The basic commands you can use are listed below, but there are many others you can use, part of the fun of a text adventure is finding new actions that you can perform, some are crucial to solving puzzles:<br/><br/><b>'Look'</b> Returns a description of the room you are in (which will sometimes change if you have done an action so worth checking often). Room descriptions often contain items that can be taken, (use 'take', or 'get'), normally you need to take an object before you can use it.<br/><br/><b>'Examine'</b> and <b>'Look at' </b> perform the same action (or you can just type <b>x</b> as a shortcut) and should return a description for example 'examine chest' or 'x chest' would both return a description of the item. People can be examined as well as objects.<br/><br/><b>'Open'</b> some objects are containers and need to be opened to reveal the contents.<br/><br/><b>'Use'</b>: some items can be used, e.g. use lamp, other items need a specific verb, for example 'eat apple' might work where 'use apple' will not as it's too vague.<br/><br/><b>'Ask'</b> you can ask characters about objects or people, e.g. 'Ask miller about windmill', sometimes they will have something to say about it, other times not. <br/><br/><b>'Give'</b> you can try giving objects to people who might want them. To do this name the object before the person, e.g. give object X to person Y (give person Y object X won't work for tedious logic reasons!)<br/><br/><b>'Inventory'</b> or <b>'Inv'</b> show what you are carrying, you can examine objects whether you are carrying them or not.<br/><br/><b> Unlike some text adventures, not all items that are in a room are listed as you enter, but they may be mentioned in the room description instead. </b><br/><br/>Some responses and descriptions in the game contain clues to solve the game, others are simply there to add atmosphere or humour. If you are stuck try performing an action that you would do if you were really in the situation described.<br/><br/>The English language is a beautiful but fickle beast, so if a command you type does not work,its sometimes worth trying to say it it a different way<br/><br/>Lastly I have designed this game so you can't die, also it's not possible for you to perform an action which makes the game unsolvable. However if you want to undo an action just type <b>'undo'</b>.<br/><br/>If you are stuck for a long time and need a hint email me: luke.jones@gmail.com. <br/><br/>Good Luck!<br/>")
    ]]></script>
  </command>
  <object name="Northern Woods">
    <description><![CDATA[<br/>You are on a path in the woods that runs North to South, the trees are densely packed, shards of sunlight stab through the small gaps in the canopy, it is humid in here. The floor of the forest is thick with leaf litter from countless autumns.]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>the</prefix>
    <exit alias="north" to="Southern Meadow">
      <inherit name="northdirection" />
    </exit>
    <object name="Twisted Oak">
      <alt type="stringlist">
        <value>oak</value>
        <value>tree</value>
      </alt>
      <look><![CDATA[<br/>An enormous oak tree lies to the side of the path. Its trunk and branches are twisted into contorted and tortured shapes like writhing serpents.<br/><br/>Nestled into the base of the tree is a small blue door.]]></look>
      <hack type="script">
        if (Got(Blunt Axe)) {
          msg ("Your axe is blunt.")
        }
        else if (Got(Sharp Axe)) {
          msg ("You swing your axe against the tree, it barely makes a scratch in the bark and jars your arm horribly.")
        }
        else {
          msg ("You don't have anything to chop it with.")
        }
      </hack>
    </object>
    <object name="Handwritten Sign">
      <look><![CDATA[<br/>In perfect copperplate the sign reads,<br/><b><i><br/> 'Residence of Gnome Chompsky, Master Weaver and Tailor, No Free Papers, Thank You</i></b>']]></look>
      <scenery />
      <takemsg>it's not yours</takemsg>
    </object>
    <object name="Small Blue Door">
      <look>A small arched shaped door around 2 foot high and painted a pale pastel blue colour. There is a handwritten sign next to it.</look>
      <scenery />
      <knock type="script"><![CDATA[
        if (not ListContains(ScopeVisible(), Wood Gnome Chompsky)) {
          msg ("You knock politely on the door, you can hear the sound of someone running downstairs, the door is yanked open, and standing in the door is a Gnome, behind him you can see stairs leading up into the heart of the tree.<br/><br/>\"Hello traveller!\", says the Gnome, \"What can I do for you?\"<br/><br/>Dylan wanders over and sniffs curiously at the Gnome, the Gnome chuckles and pats him on the nose.<br/><br/>\"I'd invite you in, but you're just too big!\" says the Gnome")
          MakeObjectVisible (Wood Gnome Chompsky)
        }
        else {
          msg ("\"I'm here!\" says Chompsky, \"stop knocking on the door!\"")
        }
      ]]></knock>
      <knockon type="script"><![CDATA[
        if (not ListContains(ScopeVisible(), Wood Gnome Chompsky)) {
          msg ("You knock politely on the door, you can hear the sound of someone running downstairs, the door is yanked open, and standing in the door is a Gnome, behind him you can see stairs leading up into the heart of the tree.<br/><br/>\"Hello traveller!\", says the Gnome, \"What can I do for you?\"<br/><br/>Dylan wanders over and sniffs curiously at the Gnome, the Gnome chuckles and pats him on the nose.<br/><br/>\"I'd invite you in, but you're just too big!\" says the Gnome")
          MakeObjectVisible (Wood Gnome Chompsky)
        }
        else {
          msg ("\"I'm here!\" says Chompsky, \"stop knocking on the door!\"")
        }
      ]]></knockon>
    </object>
    <object name="Wood Gnome Chompsky">
      <inherit name="male" />
      <look><![CDATA[<br/>He's just over a foot tall, including his bright red brimless conical cap. He's wearing a pastel blue jacket with a belt fastened at the middle, black trousers and comically big (relative to his stature) black boots. <br/><br/>He has a white beard and a mischievous twinkle in his eyes.]]></look>
      <visible type="boolean">false</visible>
      <alt type="stringlist">
        <value>gnome</value>
        <value>chomsky</value>
      </alt>
      <speak>"I'm always willing to help a traveller in these woods, what can I do for you?"</speak>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <alias>Gnome Chompsky</alias>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
      <ask type="scriptdictionary">
        <item key="river void broken bridge"><![CDATA[
          msg ("<br/>\"Yes I've seen it, must have been some heavy rainfall in the hills. Don't try swimming across, the current is far too strong and the water is deathly cold. Don't hold your breath for the council to fix the bridge anytime soon, all the infrastructure taxes get spent in Lost.\"")
        ]]></item>
        <item key="weave weaving"><![CDATA[
          msg ("<br/>\"My stock and trade, I learnt my craft at the University of Somewhere. I can weave just about anything if the materials are half decent.\"")
        ]]></item>
      </ask>
    </object>
    <exit alias="south" to="Woodland Clearing">
      <inherit name="southdirection" />
    </exit>
    <object name="leaf litter">
      <look>The floor of the woods is carpeted in a deep layer of dead leaves, ranging in colour from a deep copper to pale yellow</look>
      <takemsg>you decide to leave the leaves where they are</takemsg>
      <scenery />
    </object>
  </object>
  <verb>
    <property>knockon</property>
    <pattern>knock on; tap on; tap</pattern>
    <defaultexpression>"You can't knock on; tap on; tap " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>weave</property>
    <pattern>weave; make rope out of; make rope from; weave a rope out of;</pattern>
    <defaultexpression>"You can't weave; make rope out of; make rope from; weave a rope out of; " + object.article + "."</defaultexpression>
  </verb>
  <object name="Rope">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>a</prefix>
    <look>A strong coil of rope weaved from reeds</look>
    <take />
    <feature_usegive />
    <use />
    <selfuseon type="scriptdictionary">
      <item key="Logs">
        msg ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ")
        RemoveObject (Logs)
        RemoveObject (Rope)
        AddToInventory (Raft)
      </item>
    </selfuseon>
  </object>
  <object name="Raft">
    <take />
    <look>Your 'artisan' raft, made from four body length logs lashed together with rope</look>
    <feature_usegive />
    <volume type="int">1</volume>
    <use type="script"><![CDATA[
      if (game.pov.parent = Northbank of the River Void) {
        if (Got(Shovel)) {
          msg ("<br/>With some trepidation you launch your raft and jump on, Dylan whimpers and jumps on wth you. Using the shovel as a make shift oar you paddle furiously against the current. Utterly exhausted and shivering you arrive at the Southern Bank of the river and jump off, Dylan follows.<br/>")
          MoveObject (player, Southbank of the River Void)
        }
        else {
          msg ("<br/>You start to launch the raft, but just in the nick of time you realise that you don't anything to use a paddle, without one the current will take you downstream and to certain death.<br/>")
        }
      }
      else if (game.pov.parent = Southbank of the River Void) {
        if (Got(Shovel)) {
          msg ("<br/>With some trepidation you launch your raft and jump on, Dylan whimpers and jumps on wth you. Using the shovel as a make shift oar you paddle furiously against the current. Utterly exhausted and shivering you arrive at the Northern Bank of the river and jump off, Dylan follows.")
          MoveObject (player, Northbank of the River Void)
        }
        else {
          msg ("<br/>You start to launch the raft, but just in the nick of time you realise that you don't anything to use a paddle, without one the current will take you downstream and to certain death.")
        }
      }
      else if (game.pov.parent = Sandy Beach) {
        msg ("<br/>For second you consider setting sail on your raft, before you come to your senses. Looking at the crashing rolling waves one word repeats in your head 'nope. nope. nope'.")
      }
      else if (game.pov.parent = Well of Desolation) {
        msg ("<br/>You launch your raft upon the cold deep pool, Dylan loyally jumps on with you. You float motionless upon the pool and consider the futility of your actions. After a few minutes you're bored stiff and climb out of the raft and back on to the side of the pool.")
      }
      else {
        msg ("<br/>You consider inventing a new sport called 'land rafting' but decide better of it")
      }
    ]]></use>
    <selfuseon type="scriptdictionary">
      <item key="River Void">
        if (Got(Shovel)) {
          msg ("With some trepidation you launch your raft and jump on, Dylan whimpers and jumps on wth you. Using the shovel as a make shift oar you paddle furiously against the current. Utterly exhausted and shivering you arrive at the Southern Bank of the river and jump off, Dylan follows.")
          MoveObject (player, Southbank of the River Void)
        }
        else {
          msg ("You start to launch the raft, but just in the nick of time you realise that you don't anything to use a paddle, without one the current will take you downstream and to certain death.")
        }
      </item>
    </selfuseon>
  </object>
  <verb>
    <property>lashtogether</property>
    <pattern>lash together</pattern>
    <defaultexpression>"You can't lash together " + object.article + "."</defaultexpression>
  </verb>
  <object name="Southbank of the River Void">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are at</descprefix>
    <prefix>the</prefix>
    <description><![CDATA[<br/>You are on the Southbank of the River Void. The river is roaring past with a fierce current.]]></description>
    <object name="River Void1">
      <alt type="stringlist">
        <value>river</value>
        <value>void</value>
        <value>riverbank</value>
      </alt>
      <look>The River Void is fast, deep and wide. The water level is usually high and it is roaring as it flows past. The bridge across has collapsed. </look>
      <alias>River Void</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
    </object>
    <exit alias="southeast" to="Southern Woodland Dell">
      <inherit name="southeastdirection" />
    </exit>
    <command>
      <pattern>swim; swim across; wade across; swim across river; wade across river</pattern>
      <script>
        msg ("It's far too dangerous to swim across")
      </script>
    </command>
    <object name="Broken Bridge1">
      <look>A wooden footbridge, which has collapsed in the middle leaving a yawning gap down to the dangerous river below. What a terrible thing to happen, you can't get over it.</look>
      <fix>It's beyond repair</fix>
      <jump>You take a run up to the bridge, but as you approach the gap you realise you'll never make it, and just manage to stop in time. You retreat to the safety of the riverbank.</jump>
      <alias>Broken Bridge</alias>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider hacking up the bridge, but is")
        }
        else if (Got(Blunt Axe)) {
          msg ("Your axe is too blunt")
        }
        else {
          msg ("You need a tool to do that")
        }
      </hack>
    </object>
  </object>
  <verb>
    <property>hack</property>
    <pattern>hack; chop; cut</pattern>
    <defaultexpression>"You can't hack; chop; cut " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>lash</property>
    <pattern>lash; lash together</pattern>
    <defaultexpression>"You can't lash; lash together " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>fix</property>
    <pattern>fix</pattern>
    <defaultexpression>"You can't fix " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>twist</property>
    <pattern>twist</pattern>
    <defaultexpression>"You can't twist " + object.article + "."</defaultexpression>
  </verb>
  <object name="Windmill">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>The Windmill</alias>
    <description type="script"><![CDATA[
      if (ListContains(ScopeVisible(), Awake Miller)) {
        msg ("You are inside the windmill, in the middle of the room are the enormous grinding stones with a huge wooden axle leading up into the ceiling. <br/><br/>Also in the room is a wooden table, next to which stands Wendy the Miller.")
        if (GetBoolean(Awake Miller, "working")) {
          msg ("You are inside the windmill, in the middle of the room are the enormous grinding stones with a huge wooden axle leading up into the ceiling. The stones are turning, and you can hear the \"Koor-keeer, chick-a-chick..\" noise of the sails and gears turning.<br/><br/>Also in the room is a wooden table, at which stands Wendy the Miller.")
        }
      }
      else {
        msg ("You are inside the windmill, in the middle of the room are the enormous grinding stones with a huge wooden axle leading up into the ceiling. <br/><br/>Also in the room is a wooden table, at which sits Wendy the Miller, fast asleep and snoring like a congested hippo.")
      }
    ]]></description>
    <exit alias="out" to="Coleys Mill">
      <inherit name="outdirection" />
    </exit>
    <object name="Wooden Table">
      <inherit name="surface" />
      <feature_container />
      <hidechildren type="boolean">false</hidechildren>
      <listchildren />
      <look type="script">
        if (not ListContains(ScopeVisible(), Awake Miller)) {
          if (not GetBoolean(Empty Jug Of Cider, "jug_taken")) {
            msg ("It's a plain wooden table made from pine, on top of the table is Wendy's slumped head and an empty jug of cider")
          }
          else {
            msg ("It's a plain wooden table made from pine, on top of the table is Wendy's slumped head")
          }
        }
        else {
          msg ("A plain wooden table made from pine")
        }
      </look>
      <object name="Empty Jug Of Cider">
        <visible />
        <scenery />
        <look>An empty quart sized jug of cider. Written on the label it says 'Dicken's Cider, 8.5%, please drink responsibly.'</look>
        <take />
        <feature_usegive />
        <ontake type="script">
          SetObjectFlagOn (Empty Jug Of Cider, "jug_taken")
        </ontake>
        <selfuseon type="scriptdictionary">
          <item key="Hand Water Pump">
            msg ("You place the jug under the spout of the pump and crank the lever, with three pumps the jug is full of freezing cold water")
            MakeObjectInvisible (Empty Jug Of Cider)
            MakeObjectVisible (Jug full of water)
          </item>
        </selfuseon>
      </object>
    </object>
    <object name="Drunk Miller">
      <inherit name="female" />
      <attr name="feature_usegive" type="boolean">false</attr>
      <alias>Wendy Miller</alias>
      <shoutat>You shout at the top of your voice, but Wendy doesn't stir. Dylan whimpers and nuzzles your leg for reassurance.</shoutat>
      <alt type="stringlist">
        <value>miller</value>
        <value>wendy</value>
      </alt>
      <look>A stern looking dark haired lady, she is wearing a pale blue shin length smock, a red neckerchief, and a brown Quaker style hat. She is currently sound asleep and snoring at an unbelievable volume. A fog of cider fumes is in the air around her.</look>
      <screamat>You scream at the top of your lungs, but Wendy doesn't stir. Dylan whimpers and nuzzles your leg for reassurance.</screamat>
      <shake>You gently shake the Miller but she doesn't stir</shake>
      <push>You give the Miller a gentle push but she doesn't stir</push>
      <pull>You give the Miller a gentle pull but she doesn't stir</pull>
      <slap>You consider slapping the Miller around the face, but it doesn't seem right</slap>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("homicidal murder of innocent people isn't really your scene, and it would seem a little axe-cessive!")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
    </object>
    <object name="Awake Miller">
      <inherit name="namedfemale" />
      <alias>Wendy Miller</alias>
      <visible type="boolean">false</visible>
      <look>A stern looking dark haired lady, she is wearing a pale blue shin length smock, a red neckerchief, and a brown Quaker style hat that is dripping water on to the floor.</look>
      <alt type="stringlist">
        <value>wendy</value>
        <value>miller</value>
      </alt>
      <speak>"Greetings traveller" says Wendy</speak>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("homicidal murder of innocent people isn't really your scene, and it would seem a little axe-cessive!")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
      <ask type="scriptdictionary">
        <item key="windmill"><![CDATA[
          msg ("<br/>\"Fabulous contraption isn't it? There's rumours from Lost of a new technology coming to replace 'em, something to do with fire and steam, sounds hideous.\"")
        ]]></item>
        <item key="cider"><![CDATA[
          msg ("<br/>\"Yes it's a bit of weakness of mine, but well, you can't be good all the time can you?\"")
        ]]></item>
        <item key="mouse"><![CDATA[
          msg ("<br/>\"That damn creature, clip-clippety-clopping all over the place, does me head in!\"")
        ]]></item>
        <item key="axe"><![CDATA[
          msg ("<br/>\"Only two things in life are certain: death and axes. The former usually follows the latter.\"")
        ]]></item>
        <item key="cooper the cooper"><![CDATA[
          msg ("<br/>Wendy blushes slightly, <br/>\"Yes he's a good friend of mine, he was here last night, we had a fair few pints of cider, I hope he doesn't feel as rough as me today\"")
        ]]></item>
        <item key="fishing rod"><![CDATA[
          if (Got(Broken fishing rod)) {
            msg ("<br/>\"Looks like it's broken dear, I can't fix it but I hear there is a travelling tinker in the area\"")
          }
          else if (Got(Fixed Fishing Rod)) {
            msg ("<br/>\"Not my idea of fun, horrible wriggly, slimy fish, yuck!\"")
          }
          else {
            msg ("<br/>\"popular sport, especially at the beach north of here\"")
          }
        ]]></item>
        <item key="broken bridge"><![CDATA[
          msg ("<br/>\"ooh, now that is a shame, nothing ever seems to get fixed anymore, whatever happened to civic pride eh?\"")
        ]]></item>
        <item key="bony king"><![CDATA[
          msg ("<br/>\"well he's a fair ruler, not exactly mister dynamic, but he's kept the peace all these years\"")
        ]]></item>
      </ask>
    </object>
    <command>
      <pattern>pour water on miller; pour water over miller; throw water over miller; pour jug on wendy; pour jug on miller; empty jug over miller; empty jug over miller's head; soak miller with water; wake miller with water; throw water at miller; throw water; pour water on wendy; pour water over wendy; throw water at wendy; throw water over wendy; pour jug of water over wendy; pour jug over wendy; pour jug of water over miller; pour jug over miller; soak wendy with water</pattern>
      <script><![CDATA[
        if (Got(Jug full of water)) {
          msg ("With some trepidation you empty the jug of freezing cold water over the Miller's head. With a jolt she wakes up, shrieks and jumps out of her chair. Just as she is about to start shouting at you Dylan bounds over to her, wagging his tail and looking at her with his doleful eyes, \"What the hell..I..er...Oh! Aren't you an adorable little pooch! Aren't you? Aren't you? Who's a lovely pooch?\"<br/><br/>The Miller looks up at you and says, \"Er, bit of a late night on the cider, please don't tell anyone, what I can I do for you?\"")
          MakeObjectInvisible (Jug full of water)
          MakeObjectInvisible (Drunk Miller)
          MakeObjectVisible (Awake Miller)
        }
        else {
          msg ("Nice idea, but you're not carrying any water")
        }
      ]]></script>
    </command>
    <exit alias="up" to="Loft">
      <inherit name="updirection" />
    </exit>
    <object name="Stairs">
      <scenery type="boolean">false</scenery>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>some</prefix>
      <look type="script">
        if (ListContains(ScopeVisible(), Mouse)) {
          msg ("Wooden stairs leading up to the top floor of the Windmill, you can see a mouse, there, there on the stairs, right there.")
        }
        else {
          msg ("Wooden stairs leading up to the top floor of the Windmill.")
        }
      </look>
    </object>
    <object name="Mouse">
      <look>A tiny grey-furred mouse, who looks to all the world as if it's wearing tiny little clogs, it's making a 'clip-clippety clop' noise as it scurries up and down the stairs.</look>
      <scenery />
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
    </object>
  </object>
  <verb>
    <property>fill</property>
    <pattern>fill</pattern>
    <defaultexpression>"You can't fill " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>shoutat</property>
    <pattern>shout at</pattern>
    <defaultexpression>"You can't shout at " + object.article + "."</defaultexpression>
  </verb>
  <object name="Sandy Beach">
    <description><![CDATA[<br/>You are on long, bleak, sandy beach on the shore of the Sea of Emptiness. There is a brisk and bracing (i.e. bloody freezing) sea-breeze.<br/><br/> Dylan bounds around in circles in the sand wagging his tail.]]></description>
    <alias>Desolate Beach</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>The</prefix>
    <descprefix>You are at</descprefix>
    <object name="Bottle">
      <inherit name="container_closed" />
      <scenery type="boolean">false</scenery>
      <alt type="stringlist">
        <value>wooden chest</value>
        <value>battered chest</value>
        <value>chest</value>
      </alt>
      <look><![CDATA[<br/>A blue glass bottle with the word "FLY" embossed on it.]]></look>
      <feature_container />
      <hidechildren />
      <listchildren />
      <takemsg>You pick it up.</takemsg>
      <take />
      <volume type="int">1</volume>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <object name="Scroll">
        <take />
        <dropmsg>You drop the useful looking axe,  a wise move I'm sure</dropmsg>
        <look><![CDATA[You unfurl the scroll of paper it reads, <br/><br><br/><i><b>"Help! We're under siege, the Bony King has been imprisoned in his Castle. General D'sarray and the armed forces have assumed control"</b></i></b><br/><br/>You let out an audible groan and say to yourself. 'let me get this straight, if I don't deliver the letter then the King will have me killed, if on the otherhand I do try to deliver it then the General will have me killed.'<br/><br/>You turn the scroll over and on the reverse side there is a printed score of music, titled "<b><i>Adagio in G Minor, by Albinoni</i></b>", you vaguely remember the piece from the piano lessons your father gave you, back in more comfortable times.]]></look>
        <alias>Scroll of paper</alias>
        <feature_usegive />
        <read><![CDATA[You unfurl the scroll of paper it reads, <br>  <br> <i><b>"Help! We're under siege, the Bony King has been imprisoned in his Castle. General D'sarray and the armed forces have assumed control"</b></i></b><br><br>  You let out an audible groan and say to yourself. 'let me get this straight, if I don't deliver the letter then the King will have me killed, if on the otherhand I do try to deliver it then the General will have me killed.'<br><br>  You turn the scroll over and on the reverse side there is a printed score of music, titled "<b><i>Adagio in G Minor, by Albinoni</i></b>", you vaguely remember the piece from the piano lessons your father gave you, back in more comfortable times.]]></read>
        <volume type="int">1</volume>
        <selfuseon type="scriptdictionary">
          <item key="fallen tree">
            msg ("You swing your axe at the fallen tree, but is too blunt to chop it. ")
          </item>
        </selfuseon>
      </object>
    </object>
    <exit alias="south" to="Coleys Mill">
      <inherit name="southdirection" />
    </exit>
    <object name="Empty Sea">
      <alias>Sea of Emptiness</alias>
      <look>The sea stretches as far as the horizon. A powerful surf is roaring and rolling before pounding into the shore, then receding for a few seconds and crashing in again.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>The</prefix>
    </object>
    <command>
      <pattern>swim</pattern>
      <script>
        msg ("No chance. Even if you had the strength to get past the breakers, you would surely freeze to death.")
      </script>
    </command>
    <object name="sand">
      <scenery />
      <look>Soft sand, gives a cheerful tone to a desolate place, sandguine you could say.</look>
    </object>
  </object>
  <object name="Pub">
    <alias>Merry Jack's Inn</alias>
    <description><![CDATA[You are inside a proper old boozer. You are luckily enough to live before the smoking ban so there is no stench of urinals and stale beer, just lovely stale smoke.<br/><br/>There is a new-fangled invention called carpet on the floor, it is sticky underfoot. There are wooden benches and stools. The Barman is behind the bar polishing glasses with a face as long as a wet weekend in Coventry. <br/><br/>]]></description>
    <object name="Pool Table">
      <look>A traditional pub pool table, 7 x 4 foot. The green baize is in decent enough condition, and with only a few drink stains</look>
      <play type="script"><![CDATA[
        msg ("You pick up the pool cue and look down its shaft, it's straight as a die. You check the tip and it is secure and properly rounded.<br/><br/>You grab the chalk and carefully stoke the tip with it and blow off the excess. <br/><br/>You spend a minute setting up the balls correctly, then taking careful aim you hit the cue ball, your cue rips into the baize, and the cue ball shoots into the air and smashes the glass that the Landlord is holding. <br/><br/>With a face like thunder the Landlord walks over to the pool table, firmly takes the cue from you and places a sign on the table reading \"Out of Order\".")
        MakeObjectInvisible (Pool Table)
        MakeObjectVisible (Broken Pool Table)
        IncreaseObjectCounter (Pub, "fun")
      ]]></play>
    </object>
    <object name="Out of tune Piano">
      <visible type="boolean">false</visible>
      <look>A beautiful old upright Feurich piano in burnish walnut</look>
      <play type="script"><![CDATA[
        msg ("You used to play a little when you were younger, you sit down and start to plonk your way through Maple Leaf Rag, but the piano is horribly out of tune. The Landlord eyes you with a world weary expression.<br/><br/>Suddenly Gerald the Mouse appears.")
        MoveObjectHere (Piano Tuner Mouse)
      ]]></play>
    </object>
    <object name="One Armed Bandit">
      <look><![CDATA[On the end of the bar is a One Armed Bandit machine, it's metal and looks like it weighs a tonne. There is a lever sticking out of the side of it, on the front is a glass window looking into three reels with symbols on. <br/><br/>Written on the front it says "Skulls and Axes" match three symbols to win!]]></look>
      <play type="script"><![CDATA[
        IncreaseObjectCounter (One Armed Bandit, "one_spin")
        if (GetInt(One Armed Bandit, "one_spin") = 1) {
          msg ("There are three credits left on the machine. You pull the arm on the machine for the first play, the reels whirl and spin...<br/><br/>The first reel clonks to stop = Skull....<br/>....The second reel clonks to a stop = Skull...<br/>...The third reel clonks to a stop = Axe<br/><br/>No Win")
        }
        else if (GetInt(One Armed Bandit, "one_spin") = 2) {
          msg ("There are two credits left on the machine. You pull the arm on the machine for the second play, the reels whirl and spin...<br/><br/>The first reel clonks to stop = Axe....<br/>....The second reel clonks to a stop = Axe...<br/>...The third reel clonks to a stop = Skull<br/><br/>No Win")
        }
        else if (GetInt(One Armed Bandit, "one_spin") = 3) {
          msg ("There is one credit left on the machine. You pull the arm on the machine for the final play, the reels whirl and spin...<br/><br/>The first reel clonks to stop = Skull....<br/>....The second reel clonks to a stop = Skull...<br/>...The third reel clonks to a stop = Skull !<br/><br/>There is a satisfying Ker-Chunk, Ker-Chunk, Ker-Chunk noise and three coins are deposited in the tray. You place them in your pocket.<br/><br/>The Landlord walks across to the machine. Muttering under his breath he locks it shut and places an 'Out of Order' sign across it.")
          MakeObjectInvisible (One Armed Bandit)
          AddToInventory (Three Coins)
          MakeObjectVisible (Out of Order One Armed Bandit)
        }
        IncreaseObjectCounter (Pub, "fun")
      ]]></play>
    </object>
    <object name="Out of Order One Armed Bandit">
      <alias>One Armed Bandit</alias>
      <look><![CDATA[On the end of the bar is a One Armed Bandit machine, it's metal and looks like it weighs a tonne. There is a lever sticking out of the side of it, on the front is a glass window looking into three reels with symbols on. <br/><br/>Written on the front it says "Skulls and Axes" match three symbols to win!<br/><br/>Unfortunately it is locked up and an "Out of Order" signs hangs from it.]]></look>
      <unlock>You place your hand on it and the Landlord immediately shouts across, "HEY! Leave that damn thing alone!"</unlock>
      <smash>You go to grab the machine and the Landlord immediately shouts across, "HEY! Leave that damn thing alone!"</smash>
      <visible type="boolean">false</visible>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You pull out your axe and take aim at the One Armed Bandit, and the Landlord immediately shouts across, \"HEY! Leave that damn thing alone!\"")
        }
        else {
          msg ("You are not carrying your axe")
        }
      </hack>
    </object>
    <object name="Jack The Landlord">
      <inherit name="namedmale" />
      <look>'Merry' by name but not by nature it seems. As you look at him, he stares back and lets out an exacerbated sigh of such length you wonder if he has sprung a leak. </look>
      <alt type="stringlist">
        <value>landlord</value>
        <value>barman</value>
        <value>jack</value>
        <value>the landlord</value>
        <value>the barman</value>
      </alt>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
    </object>
    <object name="Dartboard">
      <alt type="stringlist">
        <value>darts</value>
      </alt>
      <look>A cork and wire dartboard, 17 3⁄4 inches in diameter and divided into 20 radial sections. </look>
      <play type="script"><![CDATA[
        if (GetInt(Dartboard, "throws") = 0) {
          msg ("You've not played darts in long time, but have always fancied yourself a good shot. You pick up the three darts and taking careful aim throw the first one...<br/><br/>....It bounces off the wall above the board and lands in the Pool table..The Landlord walks over and removes it, eying you wearily.")
          AddToInventory (two darts)
          IncreaseObjectCounter (Dartboard, "throws")
        }
        else if (GetInt(Dartboard, "throws") = 1) {
          msg ("Ok, you've got your eye in now...you throw the second dart..<br/><br/>... it flies though the air, bounces off one of the wires and embeds itself in the bar. The Landlord walks over and removes it, cursing under his breath.")
          AddToInventory (a dart)
          IncreaseObjectCounter (Dartboard, "throws")
          MakeObjectInvisible (two darts)
        }
        else if (GetInt(Dartboard, "throws") = 2) {
          msg ("Feeling embarrassed and aware of the Landlord glaring at you, you take a deep breath and throw the last dart...<br/><br/>..it flys out of your hand and lands plumb in the middle of the treble-twenty area! In your relief you fist pump the air. The Landlord walks over and says Nice throwing.. and then take the remaining dart and hangs a sign on the dartboard reading, Do Not Touch!.")
          MakeObjectInvisible (Dartboard)
          MakeObjectVisible (Out of Order Dartboard)
          IncreaseObjectCounter (Pub, "fun")
          MakeObjectInvisible (a dart)
        }
      ]]></play>
    </object>
    <object name="Out of Order Dartboard">
      <look>A cork and wire dartboard, 17 3⁄4 inches in diameter and divided into 20 radial sections. Hanging on the dartboard is a sign reading "Do not touch!"</look>
      <alias>Dartboard</alias>
      <visible type="boolean">false</visible>
      <alt type="stringlist">
        <value>darts</value>
      </alt>
      <play>The landlord has confiscated the darts, probably best to leave it</play>
    </object>
    <object name="Tuned Piano">
      <visible type="boolean">false</visible>
      <look>A beautiful old upright Feurich piano in burnish walnut, now perfectly in tune</look>
      <play type="script"><![CDATA[
        if (Got(Scroll)) {
          firsttime {
            msg ("You sit down at the piano, and remembering the message in the bottle you pull out the scroll and begin to play the score, \"Adagio in G minor by Albinoni\".<br/><br/>Your sight-reading skills are rusty but your fingers somehow remember the tune, the haunting melody fills the pub. Looking over to the bar you can see the Landlord's astonished face.<br/><br/>When you've finished the piece the Landlord walks over, inspects the script and says, \"Well, well, well, I should have recognised you, but its been a long time. Listen the armed forces still loyal to the King are camped to the far south on the border with Somewhere, we need to get a message to them to attack tomorrow at dawn\"<br/><br/>\"You've done well getting here to far, take this note and get it to the Loyalist as fast as possible\", \"I'm off to organise the resistance forces still hiding out in the city\"")
            MakeObjectInvisible (Jack The Landlord)
            SetObjectFlagOn (Pub, "done")
            AddToInventory (message)
          }
          otherwise {
            msg ("<br/>No time for that now, you need to get the message to Loyalist forces!")
          }
        }
        else {
          msg ("<br/>You sit down at the piano and play through \"Maple Leaf Rag\" from memory, the piano fills the room with the melody, but the Landlord looks unmoved.")
        }
      ]]></play>
    </object>
    <exit alias="west" to="City Plaza">
      <inherit name="westdirection" />
    </exit>
    <object name="Broken Pool Table">
      <visible type="boolean">false</visible>
      <alias>Pool Table</alias>
    </object>
    <turnscript name="piano appear">
      <enabled />
      <script><![CDATA[
        if (GetInt(Pub, "fun") = 5) {
          firsttime {
            msg ("<br/>Suddenly the doors of the pub fly open and in comes one very tall guy and one very short, huffing and puffing as they manoeuvre a piano into the pub.<br/><br/>\"Here you go Jack\" the short guys shouts, \"Will settle up with you in the week\", and they both leave.")
            MakeObjectVisible (Out of tune Piano)
          }
        }
      ]]></script>
    </turnscript>
    <object name="Pub Gnome">
      <alias>Gnome Chompsky</alias>
      <visible />
      <look><![CDATA[<br/>He's just over a foot tall, including his bright red brimless conical cap. He's wearing a pastel blue jacket with a belt fastened at the middle, black trousers and comically big (relative to his stature) black boots. <br/><br/>He has a white beard and a mischievous twinkle in his eyes, he drinking a pint of dark porter]]></look>
      <speak>"Hello again there traveller!"</speak>
    </object>
    <command>
      <pattern>buy drink; order drink; order pint; buy pint</pattern>
      <script><![CDATA[
        if (ListContains(ScopeVisible(), Jack The Landlord)) {
          firsttime {
            msg ("<br/>The landlord looks at you and sighs, \"you've found me in one of my better moods, here, just this once, on the house\".<br/><br/>He grabs a pint glass, and with three pumps of the beer tap fills it up with a lovely looking pint of IPA with a proper foamy head.<br/><br/>You are so thirsty and weary from your travels you down it all in a matter of seconds, it's wonderful")
          }
          otherwise {
            msg ("<br/>\"You don't have enough money\" says Jack, \"and you've had your charity\"<br/>")
          }
        }
        else {
          msg ("<br/>There is no sign of the Landlord, and you're no thief, besides you've got things to do!")
        }
      ]]></script>
    </command>
  </object>
  <verb>
    <property>hackt</property>
    <pattern>hackt</pattern>
    <defaultexpression>"You can't hackt " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>pump</property>
    <pattern>pump</pattern>
    <defaultexpression>"You can't pump " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>crank</property>
    <pattern>crank</pattern>
    <defaultexpression>"You can't crank " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>play</property>
    <pattern>play</pattern>
    <defaultexpression>"You can't play " + object.article + "."</defaultexpression>
  </verb>
  <object name="Three Coins">
    <inherit name="plural" />
    <take />
    <look>Three silver 1 zilch coins, the currency of Nowhere. They have a portrait of the skeletal 'Bony' King on the obverse and an Axe on the other side. Inscribed around the edge it reads, "Quidquid latinae dictum set, altrum sonar "</look>
    <feature_usegive />
    <alt type="stringlist">
      <value>coin</value>
      <value>coins</value>
      <value>money</value>
      <value>dosh</value>
    </alt>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <giveto type="scriptdictionary">
      <item key="Beppe"><![CDATA[
        msg ("<br/>\"Grazie mille!\" says Beppe, <br/><br/>He scoops a huge pizza out of the oven with his peal, places it in a cardboard tray, closes the lid and hands it to you.")
        AddToInventory (Huge Pizza)
        MakeObjectInvisible (Three Coins)
      ]]></item>
    </giveto>
  </object>
  <verb>
    <property>smash</property>
    <pattern>smash</pattern>
    <defaultexpression>"You can't smash " + object.article + "."</defaultexpression>
  </verb>
  <object name="Sack of Wheat">
    <take />
    <feature_usegive />
    <look>A small hessian bag of wheat</look>
    <eat>You nibble a few grains of wheat, but they are too tough to eat</eat>
    <volume type="int">1</volume>
    <giveto type="scriptdictionary">
      <item key="Awake Miller"><![CDATA[
        msg ("\"I can mill this for you no problem, about time I got to work anyway, hang on.\"<br/><br/> The miller walks over to the wall and pulls a hidden lever, after a few seconds the grindstone begins to move, and you can hear the sails  and gears making a pleasing repetitive , \"Koor-keeer, chick-a-clunk..\" noise as they spin round.<br/><br/>Wendy empties the wheat into the hopper, and in a few seconds has filled a small sack with flour which she hands to you.")
        RemoveObject (Sack of Wheat)
        AddToInventory (Sack of Flour)
        SetObjectFlagOn (Awake Miller, "working_miller")
      ]]></item>
    </giveto>
  </object>
  <verb>
    <property>feed</property>
    <pattern>feed</pattern>
    <defaultexpression>"You can't feed " + object.article + "."</defaultexpression>
  </verb>
  <object name="Sack of Flour">
    <look>A brown hessian sack of flour, the label on the bag reads, "Product of Coley's Mill, the taste of Yeasterday"</look>
    <feature_usegive />
    <take />
    <eat>It belongs to the Tinker</eat>
    <volume type="int">1</volume>
    <giveto type="scriptdictionary">
      <item key="Tinker">
        msg ("\"Ah, excellent, thank you! In return I've finished fixing your fishing rod, here\" and he hands it to you.")
        RemoveObject (Sack of Flour)
        AddToInventory (Fixed Fishing Rod)
      </item>
    </giveto>
  </object>
  <object name="Fixed Fishing Rod">
    <alias>Fishing Rod</alias>
    <take />
    <feature_usegive />
    <look>A bamboo fishing rod, with a cork handle. It has a line and hook, and a now fully functional reel.</look>
    <volume type="int">1</volume>
    <giveto type="scriptdictionary" />
  </object>
  <verb>
    <property>screamat</property>
    <pattern>scream at</pattern>
    <defaultexpression>"You can't scream at " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>shake</property>
    <pattern>shake</pattern>
    <defaultexpression>"You can't shake " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>slap</property>
    <pattern>slap</pattern>
    <defaultexpression>"You can't slap " + object.article + "."</defaultexpression>
  </verb>
  <command>
    <pattern>shout</pattern>
    <script>
      if (not game.pov.parent = Windmill) {
        msg ("You shout, Dylan whimpers at your side, It doesn't achieve much, perhaps you should try a calmer approach")
      }
      else if (game.pov.parent = Windmill) {
        if (ListContains(ScopeVisible(), Awake Miller)) {
          msg ("You shout, Dylan whimpers, Wendy looks alarmed and asks if you are ok.")
        }
        else {
          msg ("You shout, but the Miller doesn't stir from her slumber.")
        }
      }
    </script>
  </command>
  <object name="Southern Woodland Dell">
    <description><![CDATA[A small secluded grassy hollow, there is thick lush grass under foot. <br/><br/>You can see a Horse drawn caravan, and a Horse unhitched from it. <br/><br/>Sat on the caravan steps is a bearded man in ragged clothing, using your legendary powers of deduction (by reading the writing on the side of the caravan) you deduce that he is a travelling Tinker.<br/><br/>]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>The</prefix>
    <object name="Horse Drawn Caravan">
      <look><![CDATA[<br/>A horseshose shaped cylindrical wooden caravan. It's body is pale green and the ribbing is painted red. It has large yellow cartwheels shod with metal. On the side is a lettering reading "All smithing and repair work undertaken, enquire with driver"]]></look>
    </object>
    <object name="Tinker">
      <inherit name="male" />
      <look>A friendly looking wiry built chap in his mid-fifties, he has a wiry black beard, a battered derby hat, he's smoking a clay pipe and playing with a backgammon set. </look>
      <speak>"Greetings" says the Tinker</speak>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
      <ask type="scriptdictionary">
        <item key="horse dobby"><![CDATA[
          msg ("<br/>\"She's a beauty ain't she? Runs like the wind when she has the mind to, my late wife named her Dobby\"")
        ]]></item>
        <item key="backgammon"><![CDATA[
          msg ("<br/>\"A pleasant way to pass the time, the concentration calms my mind, more skill in the game than most folks think\"")
        ]]></item>
        <item key="caravan"><![CDATA[
          msg ("<br/>\"Hand-built by my Grandfather, back when the Bony King was a child, and the world was a gentler place\" ")
        ]]></item>
      </ask>
    </object>
    <object name="Horse">
      <look><![CDATA[A beautiful Irish Cob horse, standing 14 hands tall and piebald with white patches scattered over its black body. It has a silky long black and white mane, and white feathering hair on its lower legs. It looks at you, snorts gently and nods its head.<br/>]]></look>
      <alias>Horse</alias>
      <stroke>You stroke the horse, its hair is silky and warm, you can feel the contours of its muscles, it nickers and nuzzles against your hand. "He's a beauty, isn't he", says the Tinker, "He seems to like you!"</stroke>
      <alt type="stringlist">
        <value>dobby</value>
      </alt>
      <feed type="script"><![CDATA[
        if (Got(apple)) {
          msg ("You place the apple in the flat palm of your hand and offer it up to the horse. Its lips tickle your hand as it picks it up, it munches it noisily. You smell the tart tang of the apple as it's masticated. <br/><br/>The horse eyes you and gently snorts. You've made a friend.")
          SetObjectFlagOn (Horse, "mates")
        }
        else {
          msg ("Sadly you don't have anything to feed the horse with.")
        }
      ]]></feed>
      <ride type="script"><![CDATA[
        if (GetBoolean(Horse, "mates")) {
          firsttime {
            msg ("<br/>Grabbing hold of Dylan you mount the horse, and the horse starts walking North. then trotting, then cantering, and very quickly you are at full galloping speed and struggling to cling on to it and to Dylan.")
            SetTimeout (1) {
              msg ("<br/><b>You are at the Southbank of the River Void.</b><br/><br/>The horse shows no sign of slowing down as you head towards the river edge, the horse leaps without hestitation and you are flying high across the river. You let out an involuntary yell of fear. Dylan whimpers.<br/>")
            }
            SetTimeout (8) {
              msg ("<br/>You land on the <b> Northern Bank of The River Void </b>, still clinging on to the horse that is still in full gallop, its hooves pounding the ground with a noise like rolling thunder")
            }
            SetTimeout (15) {
              msg ("<br/><b>You are at the Woodland Clearing,</b><br/><br/>You are now moving at breakneck speed, the wind whistles past your ears and you find it hard to catch your breath. Dylan's tongue is hanging out of his mouth, as his ears flap around in the breeze, he seems to be enjoying it now!<br/><br/>")
            }
            SetTimeout (22) {
              msg ("<br/><b>You are at the Northern Woods </b><br/><br/>You can just make out the blurred image of an astonished looking Gnome as you tear past the Twisted Oak tree. Dylan barks a greeting to him.<br/><br/>")
            }
            SetTimeout (29) {
              msg ("<b>You are at the Southern Meadow</b><br/><br/>With still no slowing in the pace of the horse. You cling on for grim death.<br/><br/>")
            }
            SetTimeout (36) {
              msg ("<br/><b>You are at the Northern Meadow outside your Hovel </b><br/><br/>Suddenly the horse rears to a stop, whinnying so loudly the whole kingdom must have heard it. The sudden stop nearly sends you flying off. <br/><br/>You cling on, muttering curses and silent prayers under your breath. Thank goodness that's over. <br/><br/>Shaking with adrenaline you take the opportunity to dismount from the horse. Dylan jumps down to the ground by your side, his tail wagging.<br/><br/>The Horse slowly turns around to face South, paws the ground with its hoof, and then starts moving again breaking into a gallop and it's off out of sight.<br/><br/>")
              MoveObject (player, Northern Meadow)
            }
          }
          otherwise {
            msg ("In a moment of madness you think it would be a good idea to ride the horse again, but sanity prevails and you decide against another equine suicide attempt. Dylan whines in disappointment.")
          }
        }
        else {
          msg ("You attempt to climb onto the horse, but it backs away.<br/><br/>You haven't gained its trust yet.")
        }
      ]]></ride>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
    </object>
    <exit alias="northwest" to="Southbank of the River Void">
      <inherit name="northwestdirection" />
    </exit>
    <exit alias="south" to="Outside The Forsaken Cavern">
      <inherit name="southdirection" />
    </exit>
    <object name="Backgammon">
      <alias>Backgammon set</alias>
      <look>A beautiful wooden backgammon set, consisting of a wooden board, two sets of 15 checkers, two pairs of dice, a doubling cube, and dice cups.</look>
      <scenery />
      <visible />
      <takemsg>It's not yours</takemsg>
      <play type="script">
        firsttime {
          msg ("You while away a pleasant half hour playing Backgammon with the Tinker, just for fun not money. The Tinker regales you with tales of his many travels as he comprehensively thrashes you from pillar to post")
        }
        otherwise {
          msg ("You'd love to sit around playing more Backgammon and shooting the breeze, but you've got to deliver that damn letter.")
        }
      </play>
    </object>
  </object>
  <command>
    <pattern>scream</pattern>
    <script>
      if (not game.pov.parent = Windmill) {
        msg ("You let out an ear-piercing scream, Dylan cowers at your side, It doesn't achieve much, perhaps you should try a calmer approach")
      }
      else if (game.pov.parent = Windmill) {
        if (ListContains(ScopeVisible(), Awake Miller)) {
          msg ("You let out an ear-piercing scream, Dylan cowers, Wendy looks alarmed and asks if you are ok.")
        }
        else {
          msg ("You let out an ear-piercing scream, but the Miller doesn't stir from her slumber.")
        }
      }
    </script>
  </command>
  <command>
    <pattern>dig; dig sand</pattern>
    <script>
      if (not Got(Shovel)) {
        msg ("You don't have anything to dig with")
      }
      else if (Got(Shovel)) {
        if (not game.pov.parent = Sandy Beach) {
          msg ("The ground is too hard to dig with your shovel")
        }
        else {
          firsttime {
            msg ("You dig in the sand and find a small smooth glass sphere, you pick it up.")
            AddToInventory (Dull Glass Sphere)
          }
          otherwise {
            msg ("You dig in the sand but find nothing")
          }
        }
      }
    </script>
  </command>
  <object name="Dull Glass Sphere">
    <take />
    <look>A fist sized glass sphere, it is perfectly smooth and round, but has a smeared and dirty surface. </look>
    <alias>Glass Sphere</alias>
    <volume type="int">1</volume>
    <clean type="script">
      if (game.pov.parent = Inside The Forsaken Cavern) {
        if (Got(Rags)) {
          msg ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.")
          RemoveObject (Dull Glass Sphere)
          AddToInventory (Torch)
          ShowRoomDescription
        }
        else {
          msg ("You need something to clean it with, a piece of cloth perhaps?")
        }
      }
      else {
        msg ("Using the rags from your home you polish the surface of he sphere until it shines and reflects an inverted curved image of your face.")
        AddToInventory (Shiny Glass Sphere)
        RemoveObject (Dull Glass Sphere)
      }
    </clean>
    <polish type="script">
      if (game.pov.parent = Inside The Forsaken Cavern) {
        if (Got(Rags)) {
          msg ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.")
          RemoveObject (Dull Glass Sphere)
          AddToInventory (Torch)
        }
        else {
          msg ("You need something to clean it with, a piece of cloth perhaps?")
        }
      }
      else {
        msg ("Using the rags from your home you polish the surface of the sphere until it shines and reflects an inverted curved image of your face.")
        AddToInventory (Shiny Glass Sphere)
        RemoveObject (Dull Glass Sphere)
      }
    </polish>
    <wipe type="script">
      if (game.pov.parent = Inside The Forsaken Cavern) {
        if (Got(Rags)) {
          msg ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.")
          RemoveObject (Dull Glass Sphere)
          AddToInventory (Torch)
        }
        else {
          msg ("You need something to clean it with, a piece of cloth perhaps?")
        }
      }
      else {
        msg ("Using the rags from your home you polish the surface of the sphere until it shines and reflects an inverted curved image of your face.")
        AddToInventory (Shiny Glass Sphere)
        RemoveObject (Dull Glass Sphere)
      }
    </wipe>
    <rub type="script">
      if (game.pov.parent = Inside The Forsaken Cavern) {
        if (Got(Rags)) {
          msg ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.")
          RemoveObject (Dull Glass Sphere)
          AddToInventory (Torch)
        }
        else {
          msg ("You need something to clean it with, a piece of cloth perhaps?")
        }
      }
      else {
        msg ("Using the rags from your home you polish the surface of the sphere until it shines and reflects an inverted curved image of your face.")
        AddToInventory (Shiny Glass Sphere)
        RemoveObject (Dull Glass Sphere)
      }
    </rub>
  </object>
  <object name="Loft">
    <alias>Top floor of Windmill</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <prefix>The</prefix>
    <description type="script">
      if (GetBoolean(Awake Miller, "working_miller")) {
        msg ("You are inside the top floor of the windmill, the dome roof curves above you, and on one wall you can see the spinning horizontal sail shaft where it enters and connects via a gear to the vertical shaft leading straight down to the grinding room below. There is a creaking and groaning noise as the whole mechanism turns..")
      }
      else {
        msg ("You are inside the top floor of the windmill, the dome roof curves above you, and on one wall you can see the stationary horizontal sail shaft where it enters and connects via a gear to the vertical shaft leading straight down to the grinding room below.")
      }
    </description>
    <exit alias="down" to="Windmill">
      <inherit name="downdirection" />
    </exit>
    <object name="Set Mousetrap">
      <alias>Mousetrap</alias>
      <takemsg>You decide to leave the mousetrap where it is</takemsg>
      <alt type="stringlist">
        <value>trap</value>
        <value>mouse trap</value>
      </alt>
      <look type="script">
        msg ("A wooden spring loaded mouse trap, with a piece of cheese as bait. You consider these traps rather cruel, so you decide to caerphilly unset the trap and place the piece of cheese in your pocket.")
        AddToInventory (Lump of Cheese)
        MakeObjectVisible (unset mousetrap)
        MakeObjectInvisible (Set Mousetrap)
      </look>
    </object>
    <object name="unset mousetrap">
      <alias>Mousetrap</alias>
      <look>A wooden spring loaded mousetrap, that you have unset.</look>
      <takemsg>You decide to leave the mouse trap where it is</takemsg>
      <set>You consider these traps to be cruel so you don't set it</set>
      <visible type="boolean">false</visible>
      <alt type="stringlist">
        <value>trap</value>
        <value>mouse trap</value>
      </alt>
    </object>
    <object name="Gears">
      <scenery />
      <look type="script"><![CDATA[
        if (GetBoolean(Awake Miller, "working_miller")) {
          msg ("The spinning horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below. There is a creaking and groaning noise as the whole mechanism turns..<br/>")
        }
        else {
          msg ("The stationary horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below.")
        }
      ]]></look>
    </object>
    <object name="Shaft">
      <scenery />
      <alt type="stringlist">
        <value>mechanism</value>
      </alt>
      <look type="script"><![CDATA[
        if (GetBoolean(Awake Miller, "working_miller")) {
          msg ("The spinning horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below. There is a creaking and groaning noise as the whole mechanism turns..<br/>")
        }
        else {
          msg ("The stationary horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below.")
        }
      ]]></look>
    </object>
  </object>
  <object name="Lump of Cheese">
    <take />
    <feature_usegive />
    <look>A small piece of cheese that you stole from a mousetrap, it's not your cheese, in fact it's Nacho Cheese.</look>
    <alias>Lump of cheese</alias>
    <giveto type="scriptdictionary">
      <item key="Mouse"><![CDATA[
        firsttime {
          msg ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>Somewhere from the folds of its fur it produces a tiny business card and holds it up to you, you take it. The mouse scurries off out of sight.")
          AddToInventory (Business Card)
          MakeObjectInvisible (Mouse)
          SetObjectFlagOn (Mouse, "mouse_mate")
          if (GetInt(Cat, "feed") = 3) {
            MoveObject (Cavern Mouse, Outside The Forsaken Cavern)
          }
        }
        otherwise {
          msg ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>")
        }
      ]]></item>
      <item key="Cavern Mouse"><![CDATA[
        MakeObjectInvisible (Cavern Mouse)
        msg ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>It then draws its tiny sword, dashes fearlessly over to the Cat and stabs it in the nose with his tiny sword. The Cat is stunned for a moment and then erupts in screeching anger, swiping at the mouse, Gerald parries expertly with his shield and dashes away, the Cat shoots off in chase.")
        UnlockExit (guarded entrance)
        MakeObjectInvisible (Cat)
      ]]></item>
      <item key="Piano Tuner Mouse"><![CDATA[
        MakeObjectInvisible (Out of tune Piano)
        MakeObjectVisible (Tuned Piano)
        msg ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>Gerald opens the lid of the piano and jumps inside, there a commotion of plinking, plonking and squeaking. Then Gerald reappears, jumps on to the keyboard and plays a sweet rendition of \"Old Amsterdam\" by running around and stamping on the keys with his feet.<br/><br/>The Landlord gives a small slow sarcastic round of applause. The Mouse takes a bow, gives the Landlord the finger and dashes off.")
        MakeObjectInvisible (Piano Tuner Mouse)
      ]]></item>
      <item key="Scuba Mouse"><![CDATA[
        msg ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, removes his tiny respirator from his mouth, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>Replacing his respirator Gerald performs a perfect back flip into the pool and disappears beneath its surface. After a few moments you notice a loud gurgling sound a a whirpool forming on the surface of the pool, the water level is going down.<br/><br/>As the last of the water disappears down a large hole in the floor of the pool you see Gerald brandishing what appears to be an oversized bathroom plug on a chain. Gerald waves at you and disappears down the hole.<br/>")
        MakeObjectInvisible (Scuba Mouse)
        MakeExitVisible (plug)
        SetObjectFlagOn (Well of Desolation, "drained")
        MakeObjectVisible (Plughole)
        MakeObjectVisible (Giants Hair)
        MakeObjectInvisible (pool)
      ]]></item>
      <item key="Knight Mouse"><![CDATA[
        msg ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws which are wearing adorable tiny gauntlets, takes the cheese, raises his visor and gobbles it down, and then gives a tiny squeak of appreciation, and with a salute closes his visor.<br/><br/>Aiming his lance at the General on the other side of the square, Gerald runs at full charge. <br/><br/>Just as Gerald reaches the General he is spotted, the General takes a swing with his foot and with sickening force kicks Gerald so hard that he goes flying into the air and over the castle walls.<br/><br/>Dylan wimpers, tears well in your eyes and a violent rage burns in your heart.<br/><br/>\"Rodent scum,\" grunts the General. <br/><br/>")
        SetObjectFlagOn (Knight Mouse, "mouse_dead")
        MakeObjectInvisible (Knight Mouse)
      ]]></item>
    </giveto>
  </object>
  <verb>
    <property>set</property>
    <pattern>set</pattern>
    <defaultexpression>"You can't set " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>jump</property>
    <pattern>jump; jump across; jump over</pattern>
    <defaultexpression>"You can't jump; jump across; jump over " + object.article + "."</defaultexpression>
  </verb>
  <object name="Outside The Forsaken Cavern">
    <descprefix>You are</descprefix>
    <description type="script"><![CDATA[
      if (ListContains(ScopeVisible(), Cat)) {
        msg ("You are at the entrance to a cave, its pitch black narrow mouth entrance seems to suck all the light out of the world with no glimpse given of the cavern's interior. <br/><br/>Blocking the entrance is a cat.<br/><br/>Dylan is trembling at your side.<br/>")
      }
      else {
        msg ("You are at the entrance to a cave, its pitch black narrow mouth entrance seems to suck all the light out of the world with no glimpse given of the cavern's interior. <br/><br/><br/>")
      }
    ]]></description>
    <exit name="guarded entrance" alias="in" to="Inside The Forsaken Cavern">
      <inherit name="indirection" />
      <locked />
      <lockmessage>You step towards the entrance to the cave, Dylan whimpers but loyally follows at your side, the cat hisses at you, you take another step forward and the cat swipes at your feet, scratching you painfully with its razor sharp claws, you jump back and decide against trying that again!</lockmessage>
    </exit>
    <object name="Cat">
      <alias>Jasper The Cat</alias>
      <look>A mean looking Bengal Cat, light brown and spotted like a leopard. It flashes its needle like teeth at you, and then looks at Dylan and scrunches up its nose in distain. </look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <stroke>You nervously approach the Cat, and reach out your hand. The Cat hisses violently at you and glancing at its teeth and claws you decide better of it.</stroke>
    </object>
    <exit alias="north" to="Southern Woodland Dell">
      <inherit name="northdirection" />
    </exit>
    <exit alias="east" to="Withered Heath">
      <inherit name="eastdirection" />
    </exit>
  </object>
  <object name="Inside The Forsaken Cavern">
    <dark />
    <description><![CDATA[You are inside a large cavern carved out of limestone, the light from your sphere casts strange shadows from the long stalactites fingers that must have taken centuries to form. <br/><br/>Above you hangs a huge Bat, below it there is a large pile of droppings.<br/><br/>You can make out an exit to the South, and the exit Out.<br/><br/>]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are </descprefix>
    <darkroomdescription type="script"><![CDATA[
      if (Got(Shiny Glass Sphere)) {
        msg ("The cavern is pitch black, you can just make out the dim light coming from the narrow passageway leading back to the entrance. There is an acrid sour smell in here and you can hear something that sounds like breathing coming from somewhere above you. <br/><br/>You glance down a notice a light shining from your pocket, you pull out the Glass Sphere and it lights up the cavern.<br/><br/>")
        RemoveObject (Shiny Glass Sphere)
        AddToInventory (Torch)
        ShowRoomDescription
      }
      else {
        msg ("The cavern is pitch black, you can just make out the dim light coming from the narrow passageway leading back to the entrance. There is an acrid sour smell in here and you can hear something that sounds like breathing coming from somewhere above you.")
      }
    ]]></darkroomdescription>
    <exit alias="out" to="Outside The Forsaken Cavern">
      <inherit name="outdirection" />
      <lightsource />
      <lightstrength>weak</lightstrength>
    </exit>
    <object name="Bat">
      <inherit name="male" />
      <alias>Batbat</alias>
      <look><![CDATA[An enormous fruit bat hangs from the roof of the cave. It is at least a metre in length with folded leathery wings that must span twice that. It has huge bulbous black eyes that stare back at you. For some inexplicable reason it is wearing rubber suit and cape, the hood has pointy ears and there is a bat symbol on its chest.<br/><br/>]]></look>
      <alt type="stringlist">
        <value>bat</value>
      </alt>
      <speak type="script"><![CDATA[
        if (GetInt(Bat, "riddle") = 0) {
          msg ("\"Greetings traveller\" says the Bat (in an outrageous Transylvanian accent), \"It's many moons since this cave saw light, Ah! Ah! Ah!\", \"I hope you've not come to steal my treasure!\" the Bat points one of its large curved fingers at the pile of droppings. \"Only de vise deserve such a reward.\" \"Answer these riddles three and the guano yours will be.\" \"Are you ready?\"")
          get input {
            switch (LCase(result)) {
              case ("yes", "Yes", "YES") {
                msg ("<br/>\"I’m usually round but I’m not the moon<br/>I tell people something but I don’t have a mouth<br/>I have a face but I don’t have any eyes\"<br/>")
                get input {
                  switch (LCase(result)) {
                    case ("clock", "a clock", "a clock face", "a watch", "a watch face'", "watch") {
                      msg ("<br/>\"Correct! Viser than you appear it seems\", 'Speak to me again ven you are ready for de second riddle\"")
                      IncreaseObjectCounter (Bat, "riddle")
                    }
                    default {
                      msg ("<br/>\"No, that's not right\", \"Speak to me ven you are ready to try again.\"")
                    }
                  }
                }
              }
              default {
                msg ("<br/>\"Speak to me again ven you are ready\"")
              }
            }
          }
        }
        else if (GetInt(Bat, "riddle") = 1) {
          msg ("<br/>\"Hello again, Riddle two you have reached, listen carefully\",<br/><br/>\"I have several faces but I’m not a crowd<br/>I’m covered in spots but I don’t have acne<br/>I’m sometimes blown on but I’m not hot. <br/><br/>Vhat Am I?\"<br/>")
          get input {
            switch (LCase(result)) {
              case ("dice", "die", "a dice", "a die") {
                msg ("<br/>\"Correct again young traveller!\", \"Speak to me again ven you are ready for the third and final test\"")
                IncreaseObjectCounter (Bat, "riddle")
              }
              default {
                msg ("<br/>\"No, that's not right\", \"Speak to me ven you are ready to try again.\"")
              }
            }
          }
        }
        else if (GetInt(Bat, "riddle") = 2) {
          msg ("<br/>\"Greetings, listen carefully to your third and final test\"<br/><br/>\"I’m red but I’m not a strawberry<br/>I have different types but I’m not an apple<br/>Lose too much of me and you cease to be<br/><br/>Vhat am I?\"")
          get input {
            switch (LCase(result)) {
              case ("blood", "Blood") {
                msg ("<br/>\"Correct for the third time!\" \"I will trust that you did not cheat\" <br/><br/>\"Help yourself to my precious pile, and fair you well on your travels, this land could do with a few more smart people\".")
                IncreaseObjectCounter (Bat, "riddle")
                SetObjectFlagOn (Bat, "solved")
                MakeObjectInvisible (Guano unsolved)
                MakeObjectVisible (Guano solved)
              }
              default {
                msg ("<br/>\"No, that's not right\", \"Speak to me when you are ready to try again.\"")
              }
            }
          }
        }
        else {
          msg ("\"Greetings oh vise one\"")
        }
      ]]></speak>
      <hack type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </hack>
      <kill type="script">
        if (Got(Sharp Axe)) {
          msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
        }
        else if (Got(Blunt Axe)) {
          msg ("You couldn't cut butter with this axe")
        }
        else {
          msg ("You need a weapon to do that, now where did you leave your axe?")
        }
      </kill>
    </object>
    <object name="Guano unsolved">
      <alias>Bat Droppings</alias>
      <alt type="stringlist">
        <value>guano</value>
        <value>droppings</value>
        <value>pile</value>
      </alt>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <take type="boolean">false</take>
      <takemsg>You attempt to grab some of the guano, but quick as a flash the Bat throws something at your head, it smacks you with violent force and then returns to the Bat's claw like a boomerang. "I am the Night!" mumbles the Bat in a low voice.</takemsg>
      <look>A large pile of slightly steaming, thin sausage shaped, black bat droppings.</look>
    </object>
    <exit alias="south" to="Stone Stairs">
      <inherit name="southdirection" />
    </exit>
    <object name="Guano solved">
      <alias>Bat Droppings</alias>
      <alt type="stringlist">
        <value>guano</value>
        <value>droppings</value>
        <value>pile</value>
      </alt>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <takemsg type="string"></takemsg>
      <visible type="boolean">false</visible>
      <feature_usegive />
      <look>A large pile of thin sausage shaped black bat droppings</look>
      <drop type="boolean">false</drop>
      <take type="script"><![CDATA[
        if (Got(Mug)) {
          msg ("<br/>You scoop up some of the precious Bat Guano with the empty chipped mug")
          RemoveObject (Mug)
          AddToInventory (Chipped Mug With Guano)
        }
        else {
          msg ("You need something to carry the droppings in, you mug!")
        }
      ]]></take>
    </object>
  </object>
  <object name="Business Card">
    <take />
    <look><![CDATA[A tiny business card, made of exquisite silken paper. In a minute gothic script it reads, <br/><br/><center>_______________________________________________________________________</center><br/><br/><br/><center><b><i>'Gerald T. Mouse, freelance adventurer, no quest too great or small.' <br/><br/>'Payment in cheese only!'</i></b></center><br/><br/><br/><center>________________________________________________________________</center>]]></look>
    <alt type="stringlist">
      <value>card</value>
    </alt>
  </object>
  <command>
    <pattern>fish; cast; use rod; cast rod; cast line; use fishing rod</pattern>
    <script><![CDATA[
      if (Got(Fixed Fishing Rod)) {
        if (game.pov.parent = Southbank of the River Void) {
          firsttime {
            msg ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and the suddenly there is tremendous pull on the line and you struggle to hold on to the rod.<br/><br/>Pulling back on the rod you heave a large struggling Golden Fish on to the bank. You dispatch it with a clean blow and pick it up.")
            AddToInventory (Golden Fish)
          }
          otherwise {
            msg ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and then decide to give up. All you are going to catch here is a cold.")
          }
        }
        else if (game.pov.parent = Northbank of the River Void) {
          firsttime {
            msg ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and the suddenly there is tremendous pull on the line and you struggle to hold on to the rod.<br/><br/>Pulling back on the rod you heave a large struggling Silver Fish on to the bank. You dispatch it with a clean blow and pick it up.")
            AddToInventory (Silver Fish)
          }
          otherwise {
            msg ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and then decide to give up. All you are going to catch here is a cold.")
          }
        }
        else if (game.pov.parent = Sandy Beach) {
          firsttime {
            msg ("You cast your rod and the spinner flies above the crashing waves, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the surf is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan digs around in the sand impatiently...and you wait..and the suddenly there is tremendous pull on the line and you struggle to hold on to the rod.<br/><br/>Pulling back on the rod you heave a large struggling Copper Fish on to the bank. You dispatch it with a clean blow and pick it up.")
            AddToInventory (Copper Fish)
          }
          otherwise {
            msg ("You cast your rod and the spinner flies above the waves, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the surf is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan digs around in the sand impatiently...and you wait..and then decide to give up. All you are going to catch here is a cold.")
          }
        }
        else if (game.pov.parent = Well of Desolation) {
          firsttime {
            msg ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod and wait, pulling on the line occasionally to move the spinner as there is no current here.<br/><br/>You wait...and wait...and wait..Dylan pads around the bottom of the stairs impatiently...and you wait..and wait. You're beginning to give up when suddenly Gerald the Mouse appears at your side.")
            MoveObjectHere (Scuba Mouse)
          }
        }
        else {
          msg ("You consider investing a new sport of dry fishing, but decide better of it")
        }
      }
      else if (Got(Broken fishing rod)) {
        msg ("Your fishing rod is broken")
      }
      else {
        msg ("You don't have a fishing rod")
      }
    ]]></script>
  </command>
  <object name="Golden Fish">
    <take />
    <feature_usegive />
    <look>A large golden fish, its iridescent scales sparkle in the light</look>
    <giveto type="scriptdictionary">
      <item key="Cat"><![CDATA[
        msg ("At arms length you drop the Gold Fish near to the Cat. The cat sniffs and then wolfs down the fish in three bites. ")
        RemoveObject (Golden Fish)
        IncreaseObjectCounter (Cat, "feed")
        if (GetInt(Cat, "feed") = 3) {
          if (GetBoolean(Mouse, "mouse_mate")) {
            MoveObjectHere (Cavern Mouse)
            msg ("<br/>Just as you have given up hope of placating the damn Cat, Gerald the mouse appears, instead of clogs he is now wearing a tiny musketeer costume. He is carrying a tiny shield and a sword at his side.")
          }
          else {
            msg ("<br/>Well feeding the cat hasn't worked out, perhaps you need a friend to help you out, you might find one in a windy place")
          }
        }
      ]]></item>
      <item key="Dylan">
        msg ("Dylan sniffs the fish, and looks at you with a puzzled expression")
      </item>
    </giveto>
  </object>
  <object name="Silver Fish">
    <take />
    <feature_usegive />
    <look>A large silver coloured fish, its iridescent scales sparkle in the light</look>
    <giveto type="scriptdictionary">
      <item key="Cat"><![CDATA[
        RemoveObject (Silver Fish)
        msg ("At arms length you drop the Silver Fish near to the Cat. The cat sniffs and then wolfs down the fish in three bites. ")
        IncreaseObjectCounter (Cat, "feed")
        if (GetInt(Cat, "feed") = 3) {
          if (GetBoolean(Mouse, "mouse_mate")) {
            MoveObjectHere (Cavern Mouse)
            msg ("<br/>Just as you have given up hope of placating the damn Cat, Gerald the mouse appears, instead of clogs he is now wearing a tiny musketeer costume. He is carrying a tiny shield and a sword at his side.")
          }
          else {
            msg ("<br/>Well feeding the cat hasn't worked out, perhaps you need a friend to help you out, you might find one in a windy place")
          }
        }
      ]]></item>
      <item key="Dylan">
        msg ("Dylan sniffs the fish, and looks at you with a puzzled expression")
      </item>
    </giveto>
  </object>
  <object name="Copper Fish">
    <take />
    <feature_usegive />
    <look>A large copper coloured fish, its iridescent scales sparkle in the light</look>
    <giveto type="scriptdictionary">
      <item key="Cat"><![CDATA[
        msg ("At arms length you drop the Copper Fish near to the Cat. The cat sniffs and then wolfs down the fish in three bites. ")
        RemoveObject (Copper Fish)
        IncreaseObjectCounter (Cat, "feed")
        if (GetInt(Cat, "feed") = 3) {
          if (GetBoolean(Mouse, "mouse_mate")) {
            msg ("<br/>Just as you have given up hope of placating the damn Cat, Gerald the mouse appears, instead of clogs he is now wearing a tiny musketeer costume. He is carrying a tiny shield and a sword at his side.")
            MoveObjectHere (Cavern Mouse)
          }
          else {
            msg ("<br/>Well feeding the cat hasn't worked out, perhaps you need a friend to help you out, you might find one in a windy place")
          }
        }
      ]]></item>
      <item key="Dylan">
        msg ("Dylan sniffs the fish, and looks at you with a puzzled expression")
      </item>
    </giveto>
  </object>
  <object name="Cavern Mouse">
    <alias>Gerald The Mouse</alias>
    <alt type="stringlist">
      <value>mouse</value>
      <value>Gerald</value>
    </alt>
    <look>Gerald is wearing a red musketeer costume, with a black belt and black boots, he is wielding a tiny beveled metal shield with a fleur-de-lis design and has a tiny sword at his side. He is also wearing a musketeer hat, with purple ribbon, a silver buckle and a white feather sticking up at the back. He cuts a fine dash!</look>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <hack type="script">
      if (Got(Sharp Axe)) {
        msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
      }
      else if (Got(Blunt Axe)) {
        msg ("You couldn't cut butter with this axe")
      }
      else {
        msg ("You need a weapon to do that, now where did you leave your axe?")
      }
    </hack>
  </object>
  <object name="Shiny Glass Sphere">
    <look>A fist sized glass sphere, it is perfectly smooth and round, it has a highly polished surface. It reflects a curved and inverted image of the landscape.</look>
    <polish>It's already polished clean</polish>
    <clean>It's already clean and shiny</clean>
    <wipe>It's already clean and shiny</wipe>
    <take />
    <volume type="int">1</volume>
  </object>
  <verb>
    <property>clean</property>
    <pattern>clean</pattern>
    <defaultexpression>"You can't clean " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>polish</property>
    <pattern>polish</pattern>
    <defaultexpression>"You can't polish " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>wipe</property>
    <pattern>wipe</pattern>
    <defaultexpression>"You can't wipe " + object.article + "."</defaultexpression>
  </verb>
  <object name="Torch">
    <take />
    <feature_lightdark />
    <lightstrength>strong</lightstrength>
    <lightsource />
    <alias>Shiny Glass Sphere</alias>
    <drop />
    <dropmsg type="string"></dropmsg>
    <polish>It's already polished and clean</polish>
    <clean>It's already shiny and clean</clean>
    <wipe>It's already shiny and clean</wipe>
    <volume type="int">1</volume>
    <look type="script">
      if (game.pov.parent = Inside The Forsaken Cavern) {
        msg ("A fist sized glass sphere, it is perfectly smooth and round, it is shining with a bright ethereal light.")
      }
      else {
        msg ("A fist sized glass sphere, it is perfectly smooth and round, it has a highly polished surface. It reflects a curved and inverted image of the landscape.")
      }
    </look>
  </object>
  <object name="Stone Stairs">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are at the top of the</descprefix>
    <description>You are stood at the top of a huge spiral stone staircase carved out of the rock, somewhere below you can hear the sound of dripping water.</description>
    <dark />
    <darkroomdescription>It is pitch black here, you attempt to move but trip on a step, it's too dangerous without light.</darkroomdescription>
    <exit alias="north" to="Inside The Forsaken Cavern">
      <inherit name="northdirection" />
    </exit>
    <exit alias="down" to="Well of Desolation">
      <inherit name="downdirection" />
    </exit>
  </object>
  <object name="Well of Desolation">
    <descprefix>You are in</descprefix>
    <dark />
    <darkroomdescription>It is pitch black here, all you can make out is the dripping of water.</darkroomdescription>
    <alias>The Giant's Bathroom</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description type="script"><![CDATA[
      if (GetBoolean(Well of Desolation, "drained")) {
        msg ("A huge underground pit that has been drained of water. Its very cold in here and your breath mists in the air.<br/><br/>Dylan is shivering")
      }
      else {
        msg ("A huge underground pool, there is a steady drip of water from the stalactites above. The water looks extremely cold and deep. Your breath mists in the air.<br/><br/>Dylan is shivering.")
      }
    ]]></description>
    <exit alias="up" to="Stone Stairs">
      <inherit name="updirection" />
    </exit>
    <exit name="plug" alias="down" to="Top of the Stone Slide">
      <inherit name="downdirection" />
      <visible type="boolean">false</visible>
    </exit>
    <object name="Plughole">
      <alias>hole</alias>
      <scenery type="boolean">false</scenery>
      <look>A plug shaped hole, pitch black inside, there appear to be a few long strands of hair attached to it.</look>
      <visible type="boolean">false</visible>
    </object>
    <object name="Giants Hair">
      <alias>Giant's Hair</alias>
      <look>A few fine strands of very long grey hair, tough as rope.</look>
      <take />
      <visible type="boolean">false</visible>
      <feature_usegive />
      <giveto type="scriptdictionary">
        <item key="Pub Gnome"><![CDATA[
          msg ("\"Well, well, well, what do we have here! Giant's hair, rare stuff this, makes the best rope known to man, let's see what we can do\"<br/><br/>With astonishing speed and dexterity the Gnome twists and plaits and weaves the strands of hair together into a long, thin, but incredibly strong rope, he hands it to you.<br/>")
          AddToInventory (giant rope)
          RemoveObject (Giants Hair)
        ]]></item>
      </giveto>
    </object>
    <command>
      <pattern>swim; dive</pattern>
      <script><![CDATA[
        msg ("<br/>You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.")
      ]]></script>
    </command>
    <object name="pool">
      <alias>pool</alias>
      <scenery />
      <alt type="stringlist">
        <value>water</value>
      </alt>
      <swim>You dip an exploratory toe into the water, it is so cold it numbs your foot, you decide against getting further in.</swim>
      <dive> You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.</dive>
      <wade> You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.</wade>
      <wadeinto> You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.</wadeinto>
      <swimacross> You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.</swimacross>
      <diveinto> You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.</diveinto>
      <look><![CDATA[<br/>A huge underground pool, there is a steady drip of water from the stalactites above. The water looks extremely cold and deep. Your breath mists in the air.]]></look>
    </object>
  </object>
  <object name="Piano Tuner Mouse">
    <look>It's Gerald the Mouse, he's wearing a smart grey suit and half-moon spectacles, and he's carrying a small metal lever.</look>
    <hack type="script">
      if (Got(Sharp Axe)) {
        msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
      }
      else if (Got(Blunt Axe)) {
        msg ("You couldn't cut butter with this axe")
      }
      else {
        msg ("You need a weapon to do that, now where did you leave your axe?")
      }
    </hack>
  </object>
  <object name="Scuba Mouse">
    <look>It's Gerald the Mouse, this time he is wearing a full scuba suit, complete with flippers, mask, and a respirator connected by tiny rubber hoses to two bright yellow oxygen tanks on his back. He gives you a thumps-up sign.</look>
    <alias>Gerald The Mouse</alias>
    <hack type="script">
      if (Got(Sharp Axe)) {
        msg ("You consider a random axe of violence, but it would seem a little axe-cessive.")
      }
      else if (Got(Blunt Axe)) {
        msg ("You couldn't cut butter with this axe")
      }
      else {
        msg ("You need a weapon to do that, now where did you leave your axe?")
      }
    </hack>
  </object>
  <verb>
    <property>ride</property>
    <pattern>ride</pattern>
    <defaultexpression>"You can't ride " + object.article + "."</defaultexpression>
  </verb>
  <object name="Chipped Mug With Guano">
    <look>An old brown clay mug, chipped on the rim. On the side it reads 'Mug puns are tea-dious'. It is full of sightly steaming Bat Guano</look>
    <take />
    <feature_usegive />
    <alias>Chipped Mug (filled with Bat Guano)</alias>
    <alt type="stringlist">
      <value>guano</value>
      <value>droppings</value>
    </alt>
    <drop type="script"><![CDATA[
      if (game.pov.parent = Withered Heath) {
        if (game.pov.parent = Withered Heath) {
        }
        msg ("You pour the Bat Guano on to the clump of horehound, just at that moment there is a convenient brief shower of rain. The leaves of the horehound plump up and unfurl before your eyes.")
        RemoveObject (Chipped Mug With Guano)
        MakeObjectInvisible (Horehound sick)
        MakeObjectVisible (Horehound Well)
      }
      else {
        MoveObjectHere (Chipped Mug With Guano)
        msg ("<br/>dropped")
      }
    ]]></drop>
    <selfuseon type="scriptdictionary">
      <item key="Horehound sick">
        RemoveObject (Chipped Mug With Guano)
        AddToInventory (Mug)
        MakeObjectInvisible (Horehound sick)
        MakeObjectVisible (Horehound Well)
        msg ("You pour the Bat Guano on to the clump of horehound, just at that moment there is a convenient brief shower of rain. The leaves of the horehound plump up and unfurl before your eyes.")
      </item>
    </selfuseon>
  </object>
  <object name="Top of the Stone Slide">
    <descprefix>You are at the</descprefix>
    <dark />
    <darkroomdescription>It is pitch-back here, you the floor feels damp and slimy underfoot.</darkroomdescription>
    <description>You are at the top of a U-shaped spiral slide carved out of the stone, presumably used to drain the water from the floor above.  The surface is slimy and slippery underfoot</description>
    <exit alias="up" to="Well of Desolation">
      <inherit name="updirection" />
    </exit>
    <exit alias="down" to="Midland Marshes">
      <inherit name="downdirection" />
      <runscript />
      <script type="script"><![CDATA[
        msg ("You start to gingerly descend down the slippery spiral slope, but as you turn a corner you loose your footing and behind slipping and sliding down, building up speed at an alarming rate. <br/><br/>Dylan come bounding after you, looses his balance and careers into your back. You cling on to Dylan and together you speed down the slide until you see an oval of daylight getting larger, you are spat out at high velocity into the daylight, luckily the ground is soft and boggy and you land without injury, blinking in the daylight. Dylan licks your face.")
        MoveObject (player, Midland Marshes)
      ]]></script>
    </exit>
    <command />
    <command>
      <pattern>slide</pattern>
      <script><![CDATA[
        msg ("Grabbing hold of Dylan you launch yourself down the spiral slide. building up speed at an alarming rate. <br/><br/>You cling on to Dylan and together you career down the slide until you see an oval of daylight getting larger, you are spat out at high velocity into the daylight, luckily the ground is soft and boggy and you land without injury, blinking in the daylight. Dylan licks your face.")
        MoveObject (player, Midland Marshes)
      ]]></script>
    </command>
  </object>
  <object name="Midland Marshes">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are in the</descprefix>
    <description><![CDATA[A bleak wetland with long grasses, and low growing shrubs and bracken. Far on the horizon you can just make out the silhouette of the the City of Lost. <br/><br/>To the southeast you can see a Brewery, with steam and smoke rising from several chimneys on the roof, there is the smell of yeast and hops in the air.]]></description>
    <exit alias="up" to="Top of the Stone Slide">
      <inherit name="updirection" />
      <locked />
      <lockmessage>It is too steep and slippery to go up this way</lockmessage>
    </exit>
    <object name="City of Lost">
      <scenery />
      <look>The silhouette of the City of Lost is on the horizon, its been many years since you saw it. It invokes both dread and painful nostalgia. Amongst the building shapes you can make out the crenelations of the King's Castle walls and keep.</look>
      <alt type="stringlist">
        <value>horizon</value>
        <value>silhouette</value>
      </alt>
    </object>
    <exit alias="southeast" to="Brewery Yard">
      <inherit name="southeastdirection" />
    </exit>
    <exit alias="south" to="Outside City Gates">
      <inherit name="southdirection" />
    </exit>
    <exit alias="north" to="Withered Heath">
      <inherit name="northdirection" />
    </exit>
  </object>
  <object name="Brewery">
    <alias>Banks's Brewery</alias>
    <description>The room is dominated by huge towering metal tanks, connected by a complicated system of pipes and valves. You can make out what you assume is a Mash Tun (you can see workmen up at the top pouring grain and water into it) which in turn is connected to a huge Brewing Kettle and a Fermentation Tank.</description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are inside</descprefix>
    <exit alias="out" to="Brewery Yard">
      <inherit name="outdirection" />
    </exit>
    <exit alias="north" to="Brewery Canteen">
      <inherit name="northdirection" />
    </exit>
    <object name="Brewing Kettle">
      <scenery />
      <look>A huge metal cylinder tank, connected by pipework to the Mash Tun and the Fermentation Tank</look>
    </object>
    <object name="Fermentation Tank">
      <look>A huge metal cylinder, attached by pipework to the Brewing Kettle</look>
    </object>
    <object name="Mash Tun">
      <look>A huge metal cylinder, at the top you can see workmen pouring grain and water into it. It is connected by pipes to the Brewing Kettle.</look>
    </object>
    <object name="Pint Glass">
      <inherit name="container_limited" />
      <take />
      <feature_container />
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <transparent />
      <maxobjects type="int">3</maxobjects>
      <maxvolume type="int">0</maxvolume>
      <containermaxobjects type="string"></containermaxobjects>
      <containerfullmessage>it won't fit</containerfullmessage>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <look type="script">
        if (Got(Pint Glass)) {
          msg ("A dimpled glass pint mug, it has a pleasant weight to it.")
        }
        else {
          msg ("A dimpled glass pint mug")
        }
      </look>
    </object>
    <object name="workmen">
      <scenery />
      <look><![CDATA[<br/>A couple of stout workmen are topping up the mash tun, ale in a day's work for them]]></look>
    </object>
  </object>
  <object name="Brewery Yard">
    <alias>Banks's Brewery Yard</alias>
    <description type="script"><![CDATA[
      if (ListContains(ScopeVisible(), Cured Cooper)) {
        msg ("A cobbled yard, full of barrels of Banks's bitter and sacks of barley. In one corner of the yard is a Cooper making more barrels. <br/><br/>The yard is full of workers streaming in and out of the main brewery itself, carrying sacks, rolling barrels, bring supplies to the Cooper, it's a busy old place and these guys are grafting hard, you can hear them puffing and see them wipe their brows of sweat. ")
      }
      else {
        msg ("A cobbled yard, full of workers just standing around, there doesn't appear to much work going on here at all.<br/><br/>In the corner you can see a very pale looking Cooper, sat next to pile of half made barrels.")
      }
    ]]></description>
    <object name="Hungover Cooper">
      <inherit name="male" />
      <alias>The Cooper</alias>
      <look>The Cooper is wearing blue denim dungarees, a plaid red and black shirt and a flat cap. His skin is palid pale and green around the gills, he is sweating profusely, groaning and holding his brow. He's not doing any work.</look>
      <speak>"My poor head! That damn Miller and her cider, horrible gut rotting stuff, I should have stuck with the Banks's, I can't see or think straight to work, the Gaffer is going to fire me if I can't shift this hangover." The thought of the drink brings another wave of nausea over the poor chap and he sways on his stool.</speak>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
    </object>
    <exit alias="northwest" to="Midland Marshes">
      <inherit name="northwestdirection" />
    </exit>
    <exit alias="in" to="Brewery">
      <inherit name="indirection" />
    </exit>
    <object name="Cured Cooper">
      <inherit name="male" />
      <visible type="boolean">false</visible>
      <look>The Cooper is wearing blue denim dungarees, a plaid red and black shirt and a flat cap. He's hard at work making barrels.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <alias>The Cooper</alias>
    </object>
    <object name="half made barrels">
      <alias>barrels</alias>
      <look>A stack of barrels in various stages of completion, but none of them are finished</look>
      <scenery />
      <fix>you don't have the materials or the skills</fix>
      <make>you don't have the materials or the skills</make>
      <takemsg>you don't need them</takemsg>
    </object>
    <object name="made barrels">
      <alias>barrels</alias>
      <look>Barrels, barrels everywhere; some standing in the yard waiting to be shipped out, others being carried out of the brewery by the workers. The Cooper is hard a work keeping a fresh supply coming</look>
      <visible type="boolean">false</visible>
      <scenery />
      <takemsg>you don't need them</takemsg>
    </object>
    <object name="stool">
      <scenery />
      <look>A three-legged joined wooden stool, The Cooper is sat on it</look>
      <takemsg>The Cooper is using it to sit on</takemsg>
    </object>
    <object name="workers">
      <scenery />
      <look type="script">
        if (ListContains(ScopeVisible(), Cured Cooper)) {
          msg (" The workers are grafting hard to catch up with the lost work time")
        }
        else {
          msg ("The workers are stood around idle, no barrels means no work to do")
        }
      </look>
    </object>
  </object>
  <object name="hair of dog">
    <alias>Dog Hair</alias>
    <take />
    <look>A few strands of Dylan's brown and white hair</look>
  </object>
  <object name="Brewery Canteen">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are in the</descprefix>
    <alias>Brewery Kitchen</alias>
    <description><![CDATA[<br/>It's the staff kitchen, industrial, stainless steel everywhere and clean as a whistle.]]></description>
    <object name="Fridge">
      <inherit name="container_closed" />
      <feature_container />
      <hidechildren />
      <listchildren />
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <object name="Celery">
        <take />
        <alias>Stick of Celery</alias>
        <look> A long fibrous green stalk tapering into yellow leaves</look>
      </object>
    </object>
    <object name="Freezer">
      <inherit name="container_closed" />
      <feature_container />
      <hidechildren />
      <listchildren />
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <object name="Ice">
        <inherit name="plural" />
        <take />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <alias>Ice Cubes</alias>
        <look>It's ice, ice baby!</look>
      </object>
    </object>
    <object name="Cupboard">
      <inherit name="container_closed" />
      <feature_container />
      <hidechildren />
      <listchildren />
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <object name="Toms">
        <inherit name="openable" />
        <alias>Tin of Tomato Juice</alias>
        <feature_container />
        <feature_usegive />
        <take />
        <volume type="int">1</volume>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
        <openscript type="script">
          if (Got(Can Opener)) {
            HelperOpenObject (Toms)
            msg ("With some effort you open the tin with the can opener")
          }
          else {
            msg ("You need something to open the can with")
          }
        </openscript>
        <look type="script">
          if (Contains (Toms,tomato juice)) {
            msg ("A full tin of tomato juice. ")
          }
          else {
            msg ("An empty tomato juice can")
          }
        </look>
        <object name="tomato juice">
          <usedefaultprefix type="boolean">false</usedefaultprefix>
          <look>Bright red tomato juice, it has a tangy sweet smell</look>
        </object>
      </object>
    </object>
    <object name="Drawer">
      <inherit name="container_closed" />
      <feature_container />
      <hidechildren />
      <listchildren />
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
      <object name="Can Opener">
        <take />
        <alt type="stringlist" />
        <look>A metal butterfly can opener</look>
      </object>
    </object>
    <exit alias="south" to="Brewery">
      <inherit name="southdirection" />
    </exit>
  </object>
  <object name="Outside City Gates">
    <description>You are outside the city walls of Lost. There is a City Guard in front of you, and behind him a set of huge wrought-iron gates.</description>
    <descprefix>You are </descprefix>
    <exit alias="north" to="Midland Marshes">
      <inherit name="northdirection" />
    </exit>
    <exit name="gates" alias="south" to="City Plaza">
      <inherit name="southdirection" />
      <locked />
      <lockmessage>"Halt!" barks the Guard, "I'm under strict orders not to allow any northerners into the city"</lockmessage>
    </exit>
    <object name="City Guard">
      <look><![CDATA[One of the General's goons, with a jobsworth moronic grin on his face, as with most of these types if he ever had a brain cell it died of loneliness a long long time ago. <br/><br/>His CV no doubt lists following orders and stabbing things with the pointy end of his sword as his favourite hobbies.]]></look>
      <speak>"Move away peasant, leave good, remain bad"</speak>
    </object>
    <object name="gate">
      <alias>Wrought Iron Gate</alias>
      <scenery />
      <look>A huge wrought iron gate, you can see the city plaza through the bars. It is at least 12 feet high, so there's no chance of climbing over it. The iron bars have been expertly bent into the shape of a spiders web.</look>
    </object>
  </object>
  <object name="City Plaza">
    <description><![CDATA[Large open public space, and the heart of the city. Doesn't seem to be many people around though, perhaps they are hiding from the army. <br/><br/>On the south side of the square there is a row of soldiers on horseback, blocking the path to the castle drawbridge.<br/><br/>In the centre of the square there is a fountain, underneath which you can see an emaciated pigeon pecking at a few biscuit crumbs.]]></description>
    <exit alias="north" to="Outside City Gates">
      <inherit name="northdirection" />
    </exit>
    <exit alias="east" to="Pub">
      <inherit name="eastdirection" />
    </exit>
    <exit alias="west" to="Pizzaria">
      <inherit name="westdirection" />
    </exit>
    <object name="Sick Pigeon Jon">
      <alias>Pigeon Jon</alias>
      <visible />
      <scenery />
      <look>A skinny grey city pigeon with a grumpy demeanour </look>
      <speak type="script"><![CDATA[
        firsttime {
          msg ("<br/>\"Coo! Coo! It's a fucking Coup! Ha ha ha, you took your time getting here, thanks for carrying the letter, couldn't be arsed lugging that thing around!\" \"My names Jon and I'm a fucking pigeon!\" The pigeon then descends into an alarming coughing fit.")
        }
        otherwise {
          msg ("<br/>\"My names Jon and I'm a fucking pigeon!\" *cough cough, ack!\"")
        }
      ]]></speak>
      <askdefault type="script"><![CDATA[
        msg ("<br/>\"fucked if I know anything about that\"")
      ]]></askdefault>
      <hack type="script"><![CDATA[
        if (Got(Sharp Axe)) {
          msg ("<br/>You swing your axe at the pigeon, the pigeon effortlessly dodges the blow, \"Ha ha, too fucking slow axe boy!\" \"cough, cough, hack\"")
        }
        else {
          msg ("You need a weapon first, now where did you leave your axe?")
        }
      ]]></hack>
      <ask type="scriptdictionary">
        <item key="bony king"><![CDATA[
          msg ("<br/>\"He's banged up in the prison, he refused to invade the Kingdom of Somewhere, made the General furious, that hawk hasn't had a decent war in decades and finally snapped.\" Once again the pigeon starts coughing in an alarming fashion.")
        ]]></item>
        <item key="biscuit crumbs"><![CDATA[
          msg ("<br/>\"They're my biscuit crumbs, fuck you. I'm bloody starving, no people means no litter means hungry Jon\" *hack, hack, cough*")
        ]]></item>
        <item key="General D'sarray"><![CDATA[
          msg ("<br/>\"That Warmongering fucknugget! Tried to convince the King that Somewhere are developing Weapons of Mass Destruction, the King was having none of it without evidence\" *cough, cough, hack*")
        ]]></item>
        <item key="wendy miller"><![CDATA[
          msg ("<br/>\"A kindly lass, she sometime feeds me biscuits, but boy is she a fiend for the cider!\" *cough, cough, splutter*")
        ]]></item>
        <item key="bat batbat"><![CDATA[
          msg ("<br/>\"Oh you've met that nutter then? Fruitbat? Fruitcake more like! Ha ha ha!\" *cough, hack, cough*")
        ]]></item>
        <item key="cough"><![CDATA[
          msg ("<br/>\"Oh you noticed did you? Driving me nuts, still you know what they say, 'It's not the cough that carries you off, it's the coffin they carry you off in! Ha Ha Ha!\" *Cough, cough, hack*")
        ]]></item>
      </ask>
    </object>
    <object name="Biscuit crumbs">
      <scenery />
      <look>A few tiny crumbs of biscuit</look>
      <takemsg>You stoop down to pick it up but the pigeon exclaims, "These are my biscuit crumbs, fuck off, *hack hack, cough*". The murderous glint in the pigeon's eye persuades you to leave the crumbs on the ground.</takemsg>
    </object>
    <object name="Fountain">
      <look><![CDATA[The tall fountain consists of a tower of stacked marble skulls, decending in size to the top. Water pours from the eye sockets of one skull into a hole in the cranium of the one below. <br/><br/>The city planners really took the King's nickname to heart, although a sense of the morbid has always characterised this country well before his reign. ]]></look>
    </object>
    <object name="Well Pigeon Jon">
      <visible type="boolean">false</visible>
      <scenery type="boolean">false</scenery>
      <alias>Pigeon Jon</alias>
      <look>A grey city pigeon with a grumpy demeanour, and splattered with pieces of cheese and tomato sauce </look>
      <ask type="scriptdictionary">
        <item key="bony king"><![CDATA[
          msg ("<br/>\"He's banged up in the prison, he refused to invade the Kingdom of Somewhere, made the General furious, that hawk hasn't had a decent war in decades and finally snapped.\" ")
        ]]></item>
        <item key="biscuit crumbs">
          msg ("\"They're my biscuit crumbs, fuck you.\"")
        </item>
        <item key="General D'sarray"><![CDATA[
          msg ("<br/>\"That Warmongering fucknugget! Tried to convince the King that Somewhere are developing Weapons of Mass Destruction, the King was having none of it without evidence\" ")
        ]]></item>
        <item key="wendy miller"><![CDATA[
          msg ("<br/>\"A kindly lass, she sometime feeds me biscuits, but boy is she a fiend for the cider!\"")
        ]]></item>
        <item key="bat batbat"><![CDATA[
          msg ("<br/>\"Oh you've met that nutter then? Fruitbat? Fruitcake more like! Ha ha ha!\" *cough, hack, cough*")
        ]]></item>
      </ask>
    </object>
    <object name="General">
      <inherit name="male" />
      <alias>General D'sarray</alias>
      <visible type="boolean">false</visible>
      <look>An ugly bloated porcine looking army general. His drab olive uniform is festooned with medals and gold braiding, he has a swagger stick under one arm and is wearing black jackboots, and a black hat with a red front and more gold braiding.</look>
      <speak>Move along citizen, or I'll have you thrown in irons</speak>
      <cut type="script"><![CDATA[
        if (Got(Sharp Axe)) {
          if (GetBoolean(Knight Mouse, "mouse_dead")) {
            msg ("In your grief and anger you grab hold of your axe and charge recklessly at the General with a furious Dylan by your side, yelling \"Kiss my shiny metal axe you bastard!\" but you are quickly overpowered by the guards and knocked unconscious.")
            MoveObject (empty player, Top Prison)
            msg ("<br/>You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.<br/>")
            ChangePOV (empty player)
            SetObjectFlagOn (Top Prison, "visited")
            MakeObjectInvisible (player)
          }
          else {
            msg ("You consider attacking the General directly, but calmly decide it would be a foolish move, even if you could take him on, he is surrounded by his burly looking men.")
          }
        }
        else {
          msg ("You need a tool for that, now where did you leave your axe?")
        }
      ]]></cut>
      <attack type="script"><![CDATA[
        if (Got(Sharp Axe)) {
          if (GetBoolean(Knight Mouse, "mouse_dead")) {
            msg ("In your grief and anger you grab hold of your axe and charge recklessly at the General with a furious Dylan by your side, yelling \"Kiss my shiny metal axe you bastard!\" but you are quickly overpowered by the guards and knocked unconscious.")
            MoveObject (empty player, Top Prison)
            msg ("You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.<br/>")
            ChangePOV (empty player)
            SetObjectFlagOn (Top Prison, "visited")
            MakeObjectInvisible (player)
          }
          else {
            msg ("You consider attacking the General directly, but calmly decide it would be a foolish move, even if you could take him on, he is surrounded by his burly looking men.")
          }
        }
        else {
          msg ("You need a tool for that, now where did you leave your axe?")
        }
      ]]></attack>
      <kill type="script"><![CDATA[
        if (Got(Sharp Axe)) {
          if (GetBoolean(Knight Mouse, "mouse_dead")) {
            msg ("In your grief and anger you grab hold of your axe and charge recklessly at the General with a furious Dylan by your side, yelling \"Kiss my shiny metal axe you bastard!\" but you are quickly overpowered by the guards and knocked unconscious.")
            MoveObject (empty player, Top Prison)
            msg ("<br/>You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.<br/>")
            ChangePOV (empty player)
            SetObjectFlagOn (Top Prison, "visited")
            MakeObjectInvisible (player)
          }
          else {
            msg ("You consider attacking the General directly, but calmly decide it would be a foolish move, even if you could take him on, he is surrounded by his burly looking men.")
          }
        }
        else {
          msg ("You need a tool for that, now where did you leave your axe?")
        }
      ]]></kill>
    </object>
  </object>
  <object name="Pizzaria">
    <alias>Beppe's Pizzaria</alias>
    <description>There is a heavenly smell of dough, cheese and woodsmoke in here. Behind the counter you can see the owner Beppe removing pizzas from the oven with a long peal.</description>
    <exit alias="east" to="City Plaza">
      <inherit name="eastdirection" />
    </exit>
    <object name="Beppe">
      <inherit name="namedmale" />
      <look>A dark and swarthy type with a roman nose and a friendly grin. He's wearing chef whites and a white cap.</look>
    </object>
    <object name="Counter">
      <look><![CDATA[A wooden counter with a hammered zinc top, there is a sign reading, <br/><b><i><br/><center>'Beppe's stupendo pizza<br/><br/>Piccolo - 1 Zilch<br/><br/>Medio - 2 Zilch<br/><br/>Gigantesco! - 3 Zilch'</i></b></center><br/>]]></look>
    </object>
  </object>
  <object name="Prison">
    <alias>Prison Cell 37927b</alias>
    <description><![CDATA[<br/>A dark and dank prison cell, with filthy straw on the hard stone floor, the walls of the cell is in the form of an iron cage.]]></description>
    <enter type="script"><![CDATA[
      SetTurnTimeout (5) {
        msg ("You hear a rattle of keys and a guard appears at the door to the cell, behind him you can see two armed soldiers \"Time to meet your maker, traitor scum\"<br/><br/>You are lead out of the cell to the castle courtyard. Dylan brushes against your leg for reassurance as you walk.")
        MoveObject (empty player, Courtyard)
        MoveObject (Bony King, Courtyard)
      }
    ]]></enter>
    <object name="pile of stones">
      <alias>pile of stones</alias>
      <look>The stones you removed to make the hole, what a waste of time that was.</look>
      <takemsg>you don't need them</takemsg>
    </object>
    <object name="lower straw">
      <alias>filthy straw</alias>
      <scenery />
      <move>moving the straw reveals an impressively well built and impenetrable stone floor</move>
      <look>Blackened filthy straw, it stinks and is sticky to the touch</look>
      <take />
      <takemsg>Moving aside the straw reveals an immaculate and impenetrable stone floor</takemsg>
    </object>
    <object name="floor1">
      <alias>floor</alias>
      <scenery />
      <look>You examine the floor, moving aside the straw reveals an immaculate and impenetrable stone floor</look>
    </object>
    <object name="bars">
      <look>Thick iron bars, it would take a month of Sundays to file your way though one of them, even if you had the tools</look>
      <scenery />
    </object>
  </object>
  <object name="Huge Pizza">
    <inherit name="container_closed" />
    <take />
    <feature_container />
    <open type="boolean">false</open>
    <openmsg>You decide to leave it shut to keep the pizza hot.</openmsg>
    <feature_usegive />
    <look>A huge cardboard pizza box with a picture of Venice on the front, steam is escaping from the lovely pizza inside, it smells heavenly.</look>
    <feature_edible />
    <eat>You'd love to eat it, but perhaps someone else needs it more</eat>
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Look at</value>
      <value>Use</value>
      <value>Drop</value>
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
    <giveto type="scriptdictionary">
      <item key="Sick Pigeon Jon"><![CDATA[
        SetObjectFlagOn (Sick Pigeon Jon, "fed")
        msg ("<br/>\"Fuck me, now you're talking\" says the pigeon...*hack* *splutter*, \"I haven't eaten properly in weeks\"<br/><br/>The pigeon dives into the pizza, there is a blur of wings, feathers, feet and beak, small pieces of cheese and dough fly into the air. After a few minutes the pizza is gone and a fatter looking pigeon is now standing there.")
        RemoveObject (Huge Pizza)
      ]]></item>
      <item key="Well Pigeon Jon"><![CDATA[
        SetObjectFlagOn (Well Pigeon Jon, "fed")
        msg ("<br/>\"Fuck me, now you're talking\" says the pigeon... \"I haven't eaten properly in weeks\"<br/><br/>The pigeon dives into the pizza, there is a blur of wings, feathers, feet and beak, small pieces of cheese and dough fly into the air. After a few minutes the pizza is gone and a fatter looking pigeon is now standing there.")
        RemoveObject (Huge Pizza)
      ]]></item>
    </giveto>
  </object>
  <object name="Withered Heath">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are in the</descprefix>
    <description>A god-forsaken stretch of land on the side of the cavern hill. There is some horehound growing here</description>
    <beforeenter type="script">
    </beforeenter>
    <exit alias="west" to="Outside The Forsaken Cavern">
      <inherit name="westdirection" />
    </exit>
    <exit alias="south" to="Midland Marshes">
      <inherit name="southdirection" />
    </exit>
    <object name="Horehound sick">
      <alias>Clump of Withered Horehound</alias>
      <look>A clump of withered horehound, a herb of the mint family, you've often used it yourself to ease a cough, but this clump is no good, the leaves are all shrivelled up.</look>
      <takemsg>There is no point in taking any of it, it's sick and withered</takemsg>
    </object>
    <object name="Horehound Well">
      <inherit name="plural" />
      <visible type="boolean">false</visible>
      <look>A healthy specimen of horehound with plump leaves and white flowers, a herb of the mint family, you've often used it yourself to ease a cough.</look>
      <alias>Horehound</alias>
      <takemsg type="string"></takemsg>
      <feature_usegive />
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>some</prefix>
      <take type="script">
        firsttime {
          msg ("You pick some of the horehound")
        }
        otherwise {
          msg ("You take it")
        }
        AddToInventory (Horehound Well)
      </take>
      <giveto type="scriptdictionary">
        <item key="Sick Pigeon Jon"><![CDATA[
          msg ("\"What this herbal shite when it's at home?\" Says Jon, \"Only joking, horehound weed aint' it. The Pigeon pecks a small corner of leaf,  \"well it tastes like crap but I'll try anything to shift this damn cough\"<br/><br/>The pigeon pecks and chews at the leaves for a few minutes, and his breathing seems to ease, \"Thanks\" he says, \"Don't take my swearing personally, you're a decent fucker\"")
          MakeObjectInvisible (Sick Pigeon Jon)
          MakeObjectVisible (Well Pigeon Jon)
          RemoveObject (Horehound Well)
        ]]></item>
      </giveto>
    </object>
    <command>
      <pattern>put guano on horehound; pour guano on horehound; pour guano on ground; put guano on ground; empty mug on horehound; empty mug on ground</pattern>
      <script>
        if (Got(Chipped Mug With Guano)) {
          msg ("You pour the Bat Guano on to the clump of horehound, just at that moment there is a convenient brief shower of rain. The leaves of the horehound plump up and unfurl before your eyes.")
          RemoveObject (Chipped Mug With Guano)
          MakeObjectInvisible (Horehound sick)
          MakeObjectVisible (Horehound Well)
        }
        else {
          msg ("you're not carrying that, nice idea though")
        }
      </script>
    </command>
  </object>
  <object name="message">
    <alias>Message for Loyalist Forces</alias>
    <look><![CDATA[A tiny scroll of paper, in minute writing it reads:<br/><br/> "<b>Attack at dawn, resistance ready, J.J</b>"]]></look>
    <feature_usegive />
    <take />
    <giveto type="scriptdictionary">
      <item key="Sick Pigeon Jon"><![CDATA[
        if (GetBoolean(Sick Pigeon Jon, "fed")) {
          msg ("<br/>\"You've got to be fucking joking if you think I'm carrying that, *cough* *cough* *cough* \"I appreciate the food but I can barely walk without getting out of breath, this damn cough.\"")
        }
        else {
          msg ("<br/>\"You've got to be fucking joking if you think I'm carrying that, *cough* *cough* *cough* \"I haven't eaten properly in weeks and I can barely walk without getting out of breath, this damn cough.\"")
        }
      ]]></item>
      <item key="Well Pigeon Jon"><![CDATA[
        if (GetBoolean(Well Pigeon Jon, "fed")) {
          msg ("<br/>You place the message in a small leather tube on the pigeon's leg<br/><br/><br/>\"Fuck's sake\" says the Pigeon. \"Another message to deliver, well if it means the city gets back to normal and the litter returns I guess I'm game\".<br/><br/>The pigeon takes a long run up, beats its wings furiously and manages to get it's pizza laden body airborne, as it disappears South you can hear its faint voice on the wind, \"Fuuuuck Yooouu!\"<br/><br/>Just at that moment General D'sarray enters the City Plaza.")
          MakeObjectVisible (General)
          SetTurnTimeout (1) {
            msg ("<br/>You hear a small clanking noise and looking down you see that Gerald the Mouse has appeared by your side")
            MoveObjectHere (Knight Mouse)
          }
          MakeObjectInvisible (Well Pigeon Jon)
          MakeObjectInvisible (message)
        }
        else if (GetBoolean(Sick Pigeon Jon, "fed")) {
          msg ("<br/>You place the message in a small leather tube on the pigeon's leg<br/><br/><br/>\"Fuck's sake\" says the Pigeon. \"Another message to deliver, well if it means the city gets back to normal and the litter returns I guess I'm game\".<br/><br/>The pigeon takes a long run up, beats its wings furiously and manages to get it's pizza laden body airborne, as it disappears South you can hear its faint voice on the wind, \"Fuuuuck Yooouu!\"<br/><br/>Just at that moment General D'sarray enters the City Plaza.")
          MakeObjectVisible (General)
          SetTurnTimeout (1) {
            msg ("<br/>You hear a small clanking noise and looking down you see that Gerald the Mouse has appeared by your side")
            MoveObjectHere (Knight Mouse)
          }
          MakeObjectInvisible (Well Pigeon Jon)
          MakeObjectInvisible (message)
        }
        else {
          msg ("<br/>\"You've got to be joking if you think I'm carrying that, I haven't eaten properly in weeks, I'm weak as a fucking kitten\"")
        }
      ]]></item>
    </giveto>
  </object>
  <object name="Knight Mouse">
    <inherit name="male" />
    <look>It's Gerald the Mouse, this time he is wearing a full suit of armour, including helmet with the visor down. He is holding a lance in one hand and a shield in the other.</look>
  </object>
  <verb>
    <property>attack</property>
    <pattern>attack</pattern>
    <defaultexpression>"You can't attack " + object.article + "."</defaultexpression>
  </verb>
  <object name="Courtyard">
    <description type="script"><![CDATA[
      msg ("<br/>You are lead into the Castle courtyard, the pale blue light in the East heralds that the arrival of dawn is nigh. You, the King and Dylan are led to platform and each tied to stake. You can't believe they are going to kill Dylan as well. <br/><br/>\"I'm so sorry\" says the King, \"I know you never wanted any part in the politics of the Kingdom, I'm sorry I brought you back here, I didn't know who else to send the letter to\"<br/><br/>\"That's OK Dad\", you reply.<br/><br/>The first rays of dawn hit the courtyard and make you blink in the light.<br/><br/>Facing you is a firing squad and General D'sarray, \"Silence traitors!\" barks the General.<br/><br/>\"Men on my mark take aim!\", \"Aim\", the squad raise their guns, \"Ready\", you brace yourself, at that moment the sky darkens, confused the General looks up, and is hit smack in the temple by what looks like a metal boomerang, he collapses to the floor like a sack of spuds. More boomerangs rain down on the firing squad.<br/><br/>Looking up you see it's Batbat! and who's is that riding on his back but Gerald! He's wearing some weird rubber suit with a red letter R on the front.<br/><br/>There is a thundering of hooves and the Loyal forces storm into the courtyard, rounding up the remaining soldiers.<br/><br/>\"You saved the Kingdom my child!\" says the King, \"You're welcome to it\" you reply, \"I'm off home to the North\", \"Come on Dylan, let's go!\", \"Thank fuck for that\" replies Dylan.<br/><br/>**************************************************************************<br/>Congratulations, you have completed The Bony King of Nowhere, thanks for playing!<br/><br/>The END<br/><br/>Credits:<br/><br/>Written and coded by Luke A. Jones (luke.jones@gmail.com), using the Quest text adventure engine (www.textadeventures.co.uk).<br/><br/>Thank you to Alex Dimmer for creating the artwork and to Jennifer Thompson and Joe Dillon for alpa and beta testing, and for their excellent suggestions for improvements.<br/><br/>Thanks also to the excellent support from the Quest forum members, a more friendly bunch of geeks you won't meet.<br/><br/>I was inspired to start writing text adventures after playing and testing the wonderful games by Robin Johnson, you should check them out: http://versificator.net/<br/><br/>The title of the game comes from a song in an episode of Bagpuss by Oliver Postgate<br/><br/>The pigeon was inspired by the twitter account @pigeonjohn<br/><br/>Be excellent to each other.<br/><br/>Luke")
      finish
    ]]></description>
  </object>
  <object name="Top Prison">
    <alias>Prison Cell 37927</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <look type="script"><![CDATA[
      firsttime {
        msg ("<br/>You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.")
      }
      otherwise {
        msg ("<br/>A dark and dank prison cell, with filthy straw on the hard stone floor, the cell is in the form of an iron cage.")
      }
    ]]></look>
    <description type="script"><![CDATA[
      if (GetBoolean(Top Prison, "visited")) {
        msg ("<br/>A dark and dank prison cell, with filthy straw on the hard stone floor, the walls of the cell is in the form of an iron cage.\"<br/>")
      }
    ]]></description>
    <beforeenter type="script">
      ChangePOV (empty player)
      MoveObject (empty player, Top Prison)
      MakeObjectInvisible (player)
    </beforeenter>
    <object name="Bony King">
      <inherit name="male" />
      <alias>Bony King</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>The</prefix>
      <look>The 'bony' king of Nowhere, stick thin, (you'd find more meat on a butchers pencil), his emaciated face is even more drawn than the last time you saw him. His regal red robes hang off him, he's sat uncomfortably on the straw.</look>
      <speak>"Hello my child, its a joy to see you, even under such grim circumstances"</speak>
      <ask type="scriptdictionary">
        <item key="letter"><![CDATA[
          msg ("<br/>'I told the pigeon to drop it outside your home, there was never anything written inside it, was too risky\"")
        ]]></item>
        <item key="jack"><![CDATA[
          msg ("<br/>\"Ah Jack, as loyal as is face is long, he's been keeping in touch with the troops still loyal to the crown\"")
        ]]></item>
        <item key="mom mother mum"><![CDATA[
          msg ("<br/>\"I miss her too, you must get your love of the countryside from here, she was never truly happy in the city either\"")
        ]]></item>
        <item key="general"><![CDATA[
          msg ("<br/>\"He's always been a hawk for conflict, but never thought he'd betray me, barks all the time, but he finally bit.\" \"His men only fear and don't love him though, his power base is weak.\"")
        ]]></item>
        <item key="pigeon jon"><![CDATA[
          msg ("<br/>\"Ha, the wisest of Nowhere's citizens, not much gets past him, loyal as long as he's well fed\"")
        ]]></item>
      </ask>
    </object>
    <exit name="tunnel" alias="down" to="Prison">
      <inherit name="downdirection" />
      <visible type="boolean">false</visible>
      <locked type="boolean">false</locked>
      <runscript />
      <script type="script"><![CDATA[
        msg ("With a great deal of struggling, writhing and wriggling you manage to squeeze through the hole, your Father and Dylan have far less trouble and follow behind you.<br/><br/>You land on some filthy straw")
        MoveObject (empty player, Prison)
        MoveObject (Bony King, Prison)
      ]]></script>
    </exit>
    <object name="floor">
      <scenery />
      <look type="script">
        if (not ListContains(ScopeVisible(), loose stone)) {
          msg ("You examine the floor in desperation, moving aside the filthy straw reveals the stoney floor, but wait, one of the stones is loose!")
          MakeObjectVisible (loose stone)
        }
        else if (ListContains(ScopeVisible(), loose stone)) {
          msg ("The floor is made of closely fitting stones cemented together, one of the stones is loose")
        }
        else {
        }
      </look>
    </object>
    <object name="loose stone">
      <visible type="boolean">false</visible>
      <scenery type="boolean">false</scenery>
      <take />
      <takemsg>You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more until eventually there is a hole barely big enough to fit through</takemsg>
      <ontake type="script">
        MakeExitVisible (tunnel)
        RemoveObject (loose stone)
      </ontake>
      <move type="script">
        msg ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through")
        MakeExitVisible (tunnel)
        MakeObjectInvisible (loose stone)
      </move>
      <push type="script">
        msg ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through")
        MakeExitVisible (tunnel)
        MakeObjectInvisible (loose stone)
      </push>
      <pull type="script">
        msg ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through")
        MakeExitVisible (tunnel)
        MakeObjectInvisible (loose stone)
      </pull>
      <grab type="script">
        msg ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through")
        MakeExitVisible (tunnel)
        MakeObjectInvisible (loose stone)
      </grab>
    </object>
    <object name="top straw">
      <alias>filthy straw</alias>
      <scenery />
      <look>Blackened filthy straw, it stinks and is sticky to the touch</look>
      <take />
      <takemsg>moving aside the filthy straw reveals the stoney floor, but wait, one of the stones is loose!</takemsg>
      <ontake type="script">
        MakeObjectVisible (loose stone)
        MoveObjectHere (top straw)
      </ontake>
      <move type="script">
        msg ("Moving aside the filthy straw reveals the stoney floor, but wait one of the stones is loose!")
        MakeObjectVisible (loose stone)
      </move>
    </object>
    <object name="bars1">
      <alias>bars</alias>
      <scenery />
      <look>Thick iron bars, it would take a month of Sundays to file your way though one of them, even if you had the tools</look>
    </object>
  </object>
  <verb>
    <property>grab</property>
    <pattern>grab</pattern>
    <defaultexpression>"You can't grab " + object.article + "."</defaultexpression>
  </verb>
  <object name="Virgin Mary">
    <inherit name="container_open" />
    <alias>Pint Glass (containing Virgin Mary Cocktail)</alias>
    <attr name="feature_container" type="boolean">false</attr>
    <transparent />
    <close type="boolean">false</close>
    <open type="boolean">false</open>
    <take />
    <feature_usegive />
    <alt type="stringlist">
      <value>virgin mary</value>
      <value>pint</value>
      <value>cocktail</value>
      <value>drink</value>
    </alt>
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Look at</value>
      <value>Use</value>
      <value>Drop</value>
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
    <giveto type="scriptdictionary">
      <item key="Hungover Cooper"><![CDATA[
        msg ("The Cooper steadies himself and with shaking hands his grips the glass and takes a sip of the drink, he grimaces and spits it out,<br/> <br/>\"That's not going to help me! I need something stronger than that!\"")
      ]]></item>
    </giveto>
  </object>
  <object name="empty player">
    <feature_player />
    <look>You are thin and your skin is grimy, you are wearing ragged grey woollen clothing</look>
  </object>
  <turnscript name="cocktail">
    <enabled />
    <script>
      if (Contains (Pint Glass,Ice)) {
        if (Contains (Pint Glass,tomato juice)) {
          if (Contains (Pint Glass,Celery)) {
            firsttime {
              MakeObjectInvisible (Pint Glass)
              AddToInventory (Virgin Mary)
            }
          }
        }
      }
    </script>
  </turnscript>
  <turnscript name="final drink">
    <enabled />
    <script>
      if (Contains (Virgin Mary,hair of dog)) {
        firsttime {
          RemoveObject (Virgin Mary)
          AddToInventory (Bloody Mary Cocktail)
        }
      }
    </script>
  </turnscript>
  <object name="Bloody Mary Cocktail">
    <inherit name="container_open" />
    <alias>Pint glass (containing Bloody Mary Cocktail)</alias>
    <take />
    <attr name="feature_container" type="boolean">false</attr>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <transparent />
    <feature_usegive />
    <alt type="stringlist">
      <value>bloody mary</value>
      <value>cocktail</value>
      <value>bloody mary cocktail</value>
      <value>pint</value>
      <value>drink</value>
    </alt>
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Look at</value>
      <value>Use</value>
      <value>Drop</value>
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
    <giveto type="scriptdictionary">
      <item key="Hungover Cooper"><![CDATA[
        msg ("The Cooper steadies himself and with shaking hands his grips the glass and takes a sip of the drink, he grimaces then drains the lot, <br/>\"Ah, hair of the dog, always does the trick!\" \" Many thanks to you, here take this..\" He hands you a growler of Banks' Best Bitter.")
        AddToInventory (Growler)
        MakeObjectInvisible (Hungover Cooper)
        MakeObjectVisible (Cured Cooper)
        MakeObjectInvisible (half made barrels)
        MakeObjectVisible (made barrels)
        MakeObjectInvisible (Bloody Mary Cocktail)
      ]]></item>
    </giveto>
  </object>
  <object name="Growler">
    <take />
    <feature_usegive />
    <look>A dark brown glass jug containing 3 and 1/3 pints of Bank's Beer, with a screw on metal cap.</look>
    <giveto type="scriptdictionary">
      <item key="City Guard"><![CDATA[
        UnlockExit (gates)
        RemoveObject (Growler)
        msg ("<br/>The Guard snatches the jug from you, \"Trying to bribe an government official are we?\", \"Hanging offence that you know\". <br/><br/>The Guard looks at the label, \"Banks's, hmm, the good stuff, well I think I deserve a drink, this guard duty is damn tedious, not enough things to stab.\",<br/><br/>He reaches into his pocket, pulls out a key and unlocks the gate.<br/><br/> \"Go on, get going south before I change my mind\"")
      ]]></item>
    </giveto>
  </object>
  <object name="giant rope">
    <look>A long, thin and incredibly strong rope, made from Giant's hair.</look>
  </object>
  <verb>
    <property>make</property>
    <pattern>make</pattern>
    <defaultexpression>"You can't make " + object.article + "."</defaultexpression>
  </verb>
  <command>
    <pattern>fuck off</pattern>
    <script>
      msg ("Woah! You seem to be getting a bit frustrated, try taking a big breath and type 'hints' for some help")
    </script>
  </command>
  <command>
    <pattern>fuck dog; fuck dylan; fuck miller; fuck wendy; fuck gnome; fuck gerald; fuck mouse; fuck general; fuck king; fuck bony king; fuck beppe; fuck cat; fuck bat; fuck jack; fuck landlord; fuck cooper; fuck pigeon</pattern>
    <script>
      msg ("it's not that sort of game")
    </script>
  </command>
  <command>
    <pattern>fuck</pattern>
    <script>
      msg ("Woah there! You seem to be getting frustrated, have you tried taking deep breath and tying 'hints' for some help? Maybe a nice cup of tea would be a good idea.")
    </script>
  </command>
  <verb>
    <property>put</property>
    <pattern>put</pattern>
    <defaultexpression>"You can't put " + object.article + "."</defaultexpression>
  </verb>
  <object name="two darts">
    <drop type="boolean">false</drop>
    <take />
    <look>Two darts, with a skull and crossbones design on the flights</look>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alt type="stringlist" />
  </object>
  <object name="a dart">
    <look>A dart with a skull and crossbones design on the flights</look>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alt type="stringlist">
      <value>dart</value>
    </alt>
  </object>
  <object name="Three darts" />
  <command>
    <pattern>tie rope to logs; tie logs with rope; use rope to tie logs; use logs with rope</pattern>
    <script>
      if (Got(Rope)) {
        if (Got(Logs)) {
          msg ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ")
          RemoveObject (Rope)
          RemoveObject (Logs)
          AddToInventory (Raft)
        }
        else {
          msg ("you're not carrying any logs")
        }
      }
      else {
        msg ("You're not carrying any rope")
      }
    </script>
  </command>
  <verb>
    <property>repair</property>
    <pattern>repair</pattern>
    <defaultexpression>"You can't repair " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>swim</property>
    <pattern>swim</pattern>
    <defaultexpression>"You can't swim " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>dive</property>
    <pattern>dive</pattern>
    <defaultexpression>"You can't dive " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>wade</property>
    <pattern>wade</pattern>
    <defaultexpression>"You can't wade " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>wadeinto</property>
    <pattern>wade into</pattern>
    <defaultexpression>"You can't wade into " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>swimacross</property>
    <pattern>swim across</pattern>
    <defaultexpression>"You can't swim across " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>diveinto</property>
    <pattern>dive into</pattern>
    <defaultexpression>"You can't dive into " + object.article + "."</defaultexpression>
  </verb>
  <command>
    <pattern>version</pattern>
    <script><![CDATA[
      msg ("THE BONY KING OF NOWHERE<br/>Version " + game.version + "")
    ]]></script>
  </command>
  <type name="defaultverb">
    <separator>with; using</separator>
    <multiobjectmenu>With which object?</multiobjectmenu>
    <multiobjectdefault>That doesn't work.</multiobjectdefault>
    <multiobjectmenuempty>There are no objects available to do that with.</multiobjectmenuempty>
    <script type="script"><![CDATA[
      if (not IsDefined("object2")) {
        object2 = null
      }
      switch (TypeOf(object, this.property)) {
        case ("script") {
          if (object2 = null) {
            do (object, this.property)
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("string") {
          if (object2 = null) {
            msg (GetString(object, this.property))
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("scriptdictionary") {
          if (object2 <> null) {
            HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)
          }
          else {
            menu = NewStringDictionary()
            objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())
            excludelist = NewObjectList()
            list add (excludelist, game.pov)
            list add (excludelist, object)
            candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
            if (ListCount(candidates) = 0) {
              msg (this.multiobjectmenuempty)
            }
            else {
              GenerateMenuChoices (menu, candidates)
              game.pov.multiverb = this.property
              game.pov.multiverbobject = object
              game.pov.multiverbobjectdefault = this.multiobjectdefault
              ShowMenu (this.multiobjectmenu, menu, true) {
                if (result <> null) {
                  HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)
                  game.pov.multiverb = null
                  game.pov.multiverbobject = null
                  game.pov.multiverbobjectdefault = null
                }
              }
            }
          }
        }
        case ("null") {
          if (this.defaulttext <> null) {
            msg (this.defaulttext)
          }
          else if (this.defaulttemplate <> null) {
            msg (DynamicTemplate(this.defaulttemplate, object))
          }
          else if (this.defaultexpression <> null) {
            params = NewDictionary()
            dictionary add (params, "object", object)
            msg (Eval(this.defaultexpression, params))
          }
          else {
            error ("No verb response defined")
          }
        }
        default {
          error ("No verb response defined")
        }
      }
    ]]></script>
  </type>
  <type name="defaultgame">
    <enablehyperlinks />
    <echocommand />
    <echohyperlinks />
    <showdescriptiononenter />
    <autodescription />
    <defaultfont>Georgia, serif</defaultfont>
    <defaultfontsize type="int">12</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <backgroundimage type="string"></backgroundimage>
    <setbackgroundopacity type="boolean">false</setbackgroundopacity>
    <backgroundopacity type="double">0.5</backgroundopacity>
    <menufont>Arial</menufont>
    <menufontsize type="int">9</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <underlinehyperlinks />
    <compassdirections type="stringlist">
      <value>northwest</value>
      <value>north</value>
      <value>northeast</value>
      <value>west</value>
      <value>east</value>
      <value>southwest</value>
      <value>south</value>
      <value>southeast</value>
      <value>up</value>
      <value>down</value>
      <value>in</value>
      <value>out</value>
    </compassdirections>
    <clearframe />
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="stringlist">
      <value>all</value>
      <value>everything</value>
    </allobjects>
    <parserignoreprefixes type="stringlist">
      <value>the</value>
      <value>a</value>
      <value>an</value>
    </parserignoreprefixes>
    <displayroomdescriptiononstart />
    <showpanes />
    <showcommandbar />
    <showlocation />
    <setcustomwidth type="boolean">false</setcustomwidth>
    <customwidth type="int">950</customwidth>
    <setcustompadding type="boolean">false</setcustompadding>
    <custompaddingtop type="int">30</custompaddingtop>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">20</custompaddingleft>
    <custompaddingright type="int">20</custompaddingright>
    <showborder />
    <showscore type="boolean">false</showscore>
    <showhealth type="boolean">false</showhealth>
    <showtitle />
    <autodisplayverbs />
    <attr name="autodescription_youarein" type="int">1</attr>
    <attr name="autodescription_youcansee" type="int">2</attr>
    <attr name="autodescription_youcango" type="int">3</attr>
    <attr name="autodescription_description" type="int">4</attr>
    <autodescription_youarein_useprefix />
    <attr name="autodescription_youarein_newline" type="boolean">false</attr>
    <attr name="autodescription_youcansee_newline" type="boolean">false</attr>
    <attr name="autodescription_youcango_newline" type="boolean">false</attr>
    <attr name="autodescription_description_newline" type="boolean">false</attr>
    <changeroom_newline />
    <attr name="command_newline" type="boolean">false</attr>
    <description type="string"></description>
    <languageid>en</languageid>
    <gridmap type="boolean">false</gridmap>
    <mapscale type="int">30</mapscale>
    <mapsize type="int">300</mapsize>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <attr name="feature_pictureframe" type="boolean">false</attr>
    <attr name="feature_limitinventory" type="boolean">false</attr>
    <attr name="feature_asktell" type="boolean">false</attr>
    <deactivatecommandlinks type="boolean">false</deactivatecommandlinks>
    <multiplecommands type="boolean">false</multiplecommands>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg</publishfileextensions>
    <changedpov type="script">
      InitPOV (oldvalue, game.pov)
    </changedpov>
  </type>
  <type name="theme_novella">
    <setcustompadding />
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth />
    <customwidth type="int">650</customwidth>
    <custompaddingtop type="int">60</custompaddingtop>
  </type>
  <type name="theme_retro">
    <defaultbackground>Black</defaultbackground>
    <defaultforeground>White</defaultforeground>
    <defaultlinkforeground>White</defaultlinkforeground>
    <defaultfont>'Lucida Console', Monaco, monospace</defaultfont>
    <defaultwebfont>Press Start 2P</defaultwebfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>'Lucida Console', Monaco, monospace</menufont>
    <menubackground>Black</menubackground>
    <menuforeground>White</menuforeground>
    <menuhoverbackground>GreenYellow</menuhoverbackground>
  </type>
  <type name="theme_typewriter">
    <setcustompadding />
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth />
    <customwidth type="int">650</customwidth>
    <custompaddingtop type="int">60</custompaddingtop>
    <defaultfont>'Courier New', Courier, monospace</defaultfont>
    <defaultwebfont>Special Elite</defaultwebfont>
  </type>
  <type name="theme_hotdogstand">
    <defaultbackground>Red</defaultbackground>
    <defaultforeground>Yellow</defaultforeground>
    <defaultlinkforeground>Yellow</defaultlinkforeground>
    <defaultfont>'Comic Sans MS', cursive, sans-serif</defaultfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>Impact, Charcoal, sans-serif</menufont>
    <menubackground>Red</menubackground>
    <menuforeground>Yellow</menuforeground>
    <menuhoverbackground>Black</menuhoverbackground>
    <menuhoverforeground>Yellow</menuhoverforeground>
  </type>
  <type name="defaultobject">
    <visible />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Look at</value>
      <value>Use</value>
      <value>Drop</value>
    </inventoryverbs>
    <take type="boolean">false</take>
    <use type="boolean">false</use>
    <givesingle type="boolean">false</givesingle>
    <drop />
    <gender>it</gender>
    <article>it</article>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>You are in</descprefix>
    <objectslistprefix>You can see</objectslistprefix>
    <exitslistprefix>You can go</exitslistprefix>
    <contentsprefix>containing</contentsprefix>
    <description type="string"></description>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix />
    <volume type="int">0</volume>
    <dark type="boolean">false</dark>
    <lightstrength type="string"></lightstrength>
    <darklevel type="boolean">false</darklevel>
    <attr name="grid_width" type="int">1</attr>
    <attr name="grid_length" type="int">1</attr>
    <attr name="grid_fill">White</attr>
    <attr name="grid_border">Black</attr>
    <attr name="grid_borderwidth" type="int">1</attr>
    <attr name="grid_bordersides" type="int">15</attr>
    <attr name="grid_render" type="boolean">false</attr>
    <attr name="grid_label" type="string"></attr>
    <grid_parent_offset_auto />
    <attr name="grid_parent_offset_x" type="int">0</attr>
    <attr name="grid_parent_offset_y" type="int">0</attr>
    <attr name="pov_alias">me</attr>
    <pov_alt type="stringlist">
      <value>myself</value>
      <value>self</value>
    </pov_alt>
    <attr name="pov_look">Looking good.</attr>
    <attr name="pov_gender">you</attr>
    <attr name="pov_article">yourself</attr>
    <attr name="feature_usegive" type="boolean">false</attr>
    <attr name="feature_container" type="boolean">false</attr>
    <attr name="feature_switchable" type="boolean">false</attr>
    <attr name="feature_edible" type="boolean">false</attr>
    <attr name="feature_player" type="boolean">false</attr>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <visited type="boolean">false</visited>
    <changedparent type="script">
      if (game.pov = this) {
        if (IsDefined("oldvalue")) {
          OnEnterRoom (oldvalue)
        }
        else {
          OnEnterRoom (null)
        }
        if (game.gridmap) {
          MergePOVCoordinates
        }
      }
    </changedparent>
    <changedisopen type="script">
      if (this.isopen and HasScript(this, "onopen")) {
        do (this, "onopen")
      }
      if (not this.isopen and HasScript(this, "onclose")) {
        do (this, "onclose")
      }
    </changedisopen>
    <changedlocked type="script">
      if (this.locked and HasScript(this, "onlock")) {
        do (this, "onlock")
      }
      if (not this.locked and HasScript(this, "onunlock")) {
        do (this, "onunlock")
      }
    </changedlocked>
    <changedswitchedon type="script">
      if (this.switchedon and HasScript(this, "onswitchon")) {
        do (this, "onswitchon")
      }
      if (not this.switchedon and HasScript(this, "onswitchoff")) {
        do (this, "onswitchoff")
      }
    </changedswitchedon>
  </type>
  <type name="defaultexit">
    <displayverbs type="stringlist">
      <value>Go to</value>
    </displayverbs>
    <visible />
    <scenery type="boolean">false</scenery>
    <locked type="boolean">false</locked>
    <lockmessage>That way is locked.</lockmessage>
    <lookonly type="boolean">false</lookonly>
    <runscript type="boolean">false</runscript>
    <lightstrength type="string"></lightstrength>
    <attr name="grid_length" type="int">1</attr>
    <attr name="grid_render" type="boolean">false</attr>
    <attr name="grid_offset_x" type="int">0</attr>
    <attr name="grid_offset_y" type="int">0</attr>
  </type>
  <type name="direction">
    <displayverbs type="stringlist">
      <value>Go</value>
    </displayverbs>
  </type>
  <type name="compassdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="updowndirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="inoutdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="northwestdirection">
    <inherit name="compassdirection" />
    <alias>northwest</alias>
    <alt type="stringlist">
      <value>nw</value>
    </alt>
  </type>
  <type name="northdirection">
    <inherit name="compassdirection" />
    <alias>north</alias>
    <alt type="stringlist">
      <value>n</value>
    </alt>
  </type>
  <type name="northeastdirection">
    <inherit name="compassdirection" />
    <alias>northeast</alias>
    <alt type="stringlist">
      <value>ne</value>
    </alt>
  </type>
  <type name="westdirection">
    <inherit name="compassdirection" />
    <alias>west</alias>
    <alt type="stringlist">
      <value>w</value>
    </alt>
  </type>
  <type name="eastdirection">
    <inherit name="compassdirection" />
    <alias>east</alias>
    <alt type="stringlist">
      <value>e</value>
    </alt>
  </type>
  <type name="southwestdirection">
    <inherit name="compassdirection" />
    <alias>southwest</alias>
    <alt type="stringlist">
      <value>sw</value>
    </alt>
  </type>
  <type name="southdirection">
    <inherit name="compassdirection" />
    <alias>south</alias>
    <alt type="stringlist">
      <value>s</value>
    </alt>
  </type>
  <type name="southeastdirection">
    <inherit name="compassdirection" />
    <alias>southeast</alias>
    <alt type="stringlist">
      <value>se</value>
    </alt>
  </type>
  <type name="updirection">
    <inherit name="updowndirection" />
    <alias>up</alias>
    <alt type="stringlist">
      <value>u</value>
    </alt>
  </type>
  <type name="downdirection">
    <inherit name="updowndirection" />
    <alias>down</alias>
    <alt type="stringlist">
      <value>d</value>
    </alt>
  </type>
  <type name="indirection">
    <inherit name="inoutdirection" />
    <alias>in</alias>
    <alt type="stringlist">
      <value></value>
    </alt>
  </type>
  <type name="outdirection">
    <inherit name="inoutdirection" />
    <alias>out</alias>
    <alt type="stringlist">
      <value>o</value>
    </alt>
  </type>
  <type name="defaultcommand">
    <pattern type="simplepattern"></pattern>
  </type>
  <type name="male">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>he</gender>
    <article>him</article>
  </type>
  <type name="namedmale">
    <inherit name="male" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>
  <type name="female">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>she</gender>
    <article>her</article>
  </type>
  <type name="namedfemale">
    <inherit name="female" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>
  <type name="plural">
    <gender>they</gender>
    <article>them</article>
  </type>
  <type name="maleplural">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>they</gender>
    <article>them</article>
  </type>
  <type name="femaleplural">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>they</gender>
    <article>them</article>
  </type>
  <type name="openable">
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_base">
    <container />
  </type>
  <type name="container_closed">
    <inherit name="container_base" />
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_open">
    <inherit name="container_base" />
    <isopen />
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="surface">
    <inherit name="container_base" />
    <isopen />
    <transparent />
    <contentsprefix>on which there is</contentsprefix>
  </type>
  <type name="container">
    <inherit name="container_open" />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_limited">
    <inherit name="container" />
    <maxobjects type="int">1</maxobjects>
    <maxvolume type="int">100</maxvolume>
    <addscript type="AddScript"><![CDATA[
      activecontainer = this
      correct = true
      while (DoesInherit(activecontainer, "container_base")) {
        if (HasInt(activecontainer, "maxvolume")) {
          if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {
            correct = false
            if (HasString(this, "containerfullmessage")) {
              message = this.containerfullmessage
            }
            else {
              message = DynamicTemplate("ContainerFull", this)
            }
          }
        }
        activecontainer = activecontainer.parent
      }
      children = GetDirectChildren(this)
      if (listcount(children) >= this.maxobjects) {
        correct = false
        if (HasString(this, "containerfullmessage")) {
          message = this.containerfullmessage
        }
        else {
          message = DynamicTemplate("MaxObjectsInContainer", this)
        }
      }
      if (correct = false) {
        msg (message)
      }
      else {
        object.parent = this
        msg (Template("Done"))
      }
    ]]></addscript>
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_lockable">
    <locked />
    <nokeymessage>You do not have the key.</nokeymessage>
    <unlockmessage>Unlocked.</unlockmessage>
    <lockmessage>Locked.</lockmessage>
    <canlockopen type="boolean">false</canlockopen>
    <autoopen />
    <autounlock />
    <openscript type="script">
      if (this.locked) {
        if (this.autounlock and AllKeysAvailable(this)) {
          do (this, "unlock")
          if (not this.isopen) {
            OpenObject (this)
          }
        }
        else {
          msg (DynamicTemplate("LockedObject", this))
        }
      }
      else {
        OpenObject (this)
      }
    </openscript>
    <closescript type="script">
      if (this.locked) {
        msg (DynamicTemplate("LockedObject", this))
      }
      else {
        CloseObject (this)
      }
    </closescript>
    <lock type="script">
      if (this.locked) {
        msg (DynamicTemplate("AlreadyLocked", this))
      }
      else if (this.isopen and not this.canlockopen) {
        msg (DynamicTemplate("CannotLockOpen", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.lockmessage)
          this.locked = true
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </lock>
    <unlock type="script">
      if (not this.locked) {
        msg (DynamicTemplate("AlreadyUnlocked", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.unlockmessage)
          this.locked = false
          if (this.autoopen and not this.isopen) {
            TryOpenClose (true, this)
          }
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </unlock>
  </type>
  <type name="defaultplayer" />
  <type name="switchable">
    <switchedon type="boolean">false</switchedon>
    <turnon type="script">
      if (ListContains(ScopeReachable(), this)) {
        if (this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOn", this))
        }
        else {
          if (HasString(this, "switchonmsg")) {
            msg (this.switchonmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOn", this))
          }
          this.switchedon = true
        }
      }
      else {
        msg (DynamicTemplate("DefaultTurnOn", this))
      }
    </turnon>
    <turnoff type="script">
      if (ListContains(ScopeReachable(), this)) {
        if (not this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOff", this))
        }
        else {
          if (HasString(this, "switchoffmsg")) {
            msg (this.switchoffmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOff", this))
          }
          this.switchedon = false
        }
      }
      else {
        msg (DynamicTemplate("DefaultTurnOff", this))
      }
    </turnoff>
    <displayverbs type="stringlist">
      <value>Switch on</value>
      <value>Switch off</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Switch on</value>
      <value>Switch off</value>
    </inventoryverbs>
  </type>
  <type name="edible">
    <eathealth type="int">0</eathealth>
    <eat type="script">
      if (HasString(this, "eatmsg")) {
        msg (this.eatmsg)
      }
      else {
        msg (DynamicTemplate("Eaten", this))
      }
      if (HasInt(game.pov, "health")) {
        game.pov.health = game.pov.health + this.eathealth
      }
      destroy (this.name)
    </eat>
    <displayverbs type="stringlist">
      <value>Eat</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Eat</value>
    </inventoryverbs>
  </type>
  <type name="gridborder_path_ew">
    <attr name="grid_bordersides" type="int">10</attr>
  </type>
  <type name="gridborder_path_e">
    <attr name="grid_bordersides" type="int">11</attr>
  </type>
  <type name="gridborder_path_w">
    <attr name="grid_bordersides" type="int">14</attr>
  </type>
  <type name="gridborder_path_ns">
    <attr name="grid_bordersides" type="int">5</attr>
  </type>
  <type name="gridborder_path_n">
    <attr name="grid_bordersides" type="int">7</attr>
  </type>
  <type name="gridborder_path_s">
    <attr name="grid_bordersides" type="int">13</attr>
  </type>
  <function name="GetDefaultPrefix" parameters="obj" type="string"><![CDATA[
    if (Instr("aeiou", LCase(Left(GetDisplayAlias(obj), 1))) > 0) {
      return ("an")
    }
    else {
      return ("a")
    }
  ]]></function>
  <function name="WriteVerb" parameters="obj, verb" type="string">
    return (CapFirst(obj.gender) + " " + Conjugate(obj, verb))
  </function>
  <function name="Conjugate" parameters="obj, verb" type="string">
    gender = obj.gender
    if (gender = "he" or gender = "she") {
      gender = "it"
    }
    switch (verb) {
      case ("be") {
        switch (gender) {
          case ("i") {
            return ("am")
          }
          case ("you") {
            return ("are")
          }
          case ("it") {
            return ("is")
          }
          case ("we") {
            return ("are")
          }
          case ("they") {
            return ("are")
          }
          default {
            return ("is")
          }
        }
      }
      case ("do") {
        switch (gender) {
          case ("i") {
            return ("do")
          }
          case ("you") {
            return ("do")
          }
          case ("it") {
            return ("does")
          }
          case ("we") {
            return ("do")
          }
          case ("they") {
            return ("do")
          }
          default {
            return ("do")
          }
        }
      }
      default {
        if (gender = "it") {
          return (verb + "s")
        }
        else {
          return (verb)
        }
      }
    }
  </function>
  <function name="ListObjectContents" parameters="object"><![CDATA[
    if (GetBoolean(object, "isopen") and GetBoolean(object, "listchildren")) {
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (HasString(object, "listchildrenprefix")) {
        listprefix = object.listchildrenprefix
      }
      else {
        listprefix = DynamicTemplate("ObjectContains", object)
      }
      list = FormatObjectList(listprefix, object, Template("And"), ".")
      if (list <> "") {
        msg (list)
      }
    }
  ]]></function>
  <function name="DoTake" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (object.parent = game.pov) {
      msg (prefix + DynamicTemplate("AlreadyTaken", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      volume = 0
      continue = true
      foreach (obj, GetAllChildObjects(game.pov)) {
        if (HasInt(obj, "volume")) {
          volume = volume + obj.volume
        }
      }
      if (not Contains(game.pov, object)) {
        volume = volume + GetVolume(object,true)
      }
      if (HasInt(game.pov, "maxvolume")) {
        if (volume > game.pov.maxvolume) {
          continue = false
          if (HasString(game.pov, "containerfullmessage")) {
            message = prefix + game.pov.containerfullmessage
          }
          else {
            message = prefix + DynamicTemplate("FullInventory", object)
          }
        }
      }
      children = GetDirectChildren(game.pov)
      if (HasInt(game.pov, "maxobjects")) {
        if (game.pov.maxobjects > 0) {
          if (ListCount(children) >= game.pov.maxobjects) {
            continue = false
            if (HasString(game.pov, "containermaxobjects")) {
              message = prefix + game.pov.containermaxobjects
            }
            else {
              message = prefix + DynamicTemplate("MaxObjectsInInventory", object)
            }
          }
        }
      }
      if (continue = false) {
        msg (message)
      }
      else {
        found = true
        takemsg = object.takemsg
        switch (TypeOf(object, "take")) {
          case ("script") {
            if (ismultiple) {
              OutputTextNoBr (prefix)
            }
            do (object, "take")
            takemsg = ""
          }
          case ("boolean") {
            if (object.take = true) {
              object.parent = game.pov
              if (takemsg = null) {
                takemsg = DynamicTemplate("TakeSuccessful", object)
              }
            }
            else {
              found = false
            }
          }
          case ("string") {
            object.parent = game.pov
            takemsg = object.take
          }
          default {
            found = false
          }
        }
        if (not found and takemsg = null) {
          takemsg = DynamicTemplate("TakeUnsuccessful", object)
        }
        if (LengthOf(takemsg) > 0) {
          msg (prefix + takemsg)
        }
        if (HasScript(object, "ontake")) {
          do (object, "ontake")
        }
        if (found and GetBoolean (object, "scenery") and object.parent = game.pov) {
          object.scenery = false
        }
      }
    }
  ]]></function>
  <function name="DoDrop" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (not ListContains(ScopeInventory(), object)) {
      msg (prefix + DynamicTemplate("NotCarrying", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = true
      dropmsg = object.dropmsg
      switch (TypeOf(object, "drop")) {
        case ("script") {
          if (ismultiple) {
            OutputTextNoBr (prefix)
          }
          do (object, "drop")
          dropmsg = ""
        }
        case ("boolean") {
          if (object.drop = true) {
            object.parent = game.pov.parent
            if (dropmsg = null) {
              dropmsg = DynamicTemplate("DropSuccessful", object)
            }
          }
          else {
            found = false
          }
        }
        case ("string") {
          object.parent = game.pov.parent
          dropmsg = object.drop
        }
        default {
          found = false
        }
      }
      if (not found and dropmsg = null) {
        dropmsg = DynamicTemplate("DropUnsuccessful", object)
      }
      if (LengthOf(dropmsg) > 0) {
        msg (prefix + dropmsg)
      }
      if (HasScript(object, "ondrop")) {
        do (object, "ondrop")
      }
    }
  ]]></function>
  <function name="CreateUseMenuList" parameters="object" type="objectlist">
    objectlist = NewObjectList()
    objectlist = ScopeReachableInventory()
    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())
    excludelist = NewObjectList()
    list add (excludelist, game.pov)
    list add (excludelist, object)
    candidates = NewObjectList()
    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
    return (candidates)
  </function>
  <function name="TryOpenClose" parameters="doopen, object">
    if (doopen) {
      action = "open"
      scriptaction = "openscript"
    }
    else {
      action = "close"
      scriptaction = "closescript"
    }
    if (not ListContains(ScopeReachable(), object)) {
      msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = false
      if (GetBoolean(object, action)) {
        if (doopen) {
          if (object.isopen) {
            msg (DynamicTemplate("AlreadyOpen", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              OpenObject (object)
            }
          }
        }
        else {
          if (not object.isopen) {
            msg (DynamicTemplate("AlreadyClosed", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              CloseObject (object)
            }
          }
        }
      }
      else {
        if (doopen) {
          msg (DynamicTemplate("CantOpen", object))
        }
        else {
          msg (DynamicTemplate("CantClose", object))
        }
      }
    }
  </function>
  <function name="OpenObject" parameters="object">
    if (HasString(object, "openmsg")) {
      msg (object.openmsg)
    }
    else {
      msg (DynamicTemplate("OpenSuccessful", object))
    }
    object.isopen = true
    ListObjectContents (object)
  </function>
  <function name="CloseObject" parameters="object">
    if (HasString(object, "closemsg")) {
      msg (object.closemsg)
    }
    else {
      msg (DynamicTemplate("CloseSuccessful", object))
    }
    object.isopen = false
  </function>
  <function name="CreateGiveMenuList" parameters="object" type="objectlist">
    objectlist = NewObjectList()
    objectlist = ScopeReachableInventory()
    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())
    excludelist = NewObjectList()
    list add (excludelist, game.pov)
    list add (excludelist, object)
    candidates = NewObjectList()
    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
    return (candidates)
  </function>
  <function name="HandleGiveTo" parameters="object1, object2">
    handled = false
    if (HasString(object2, "give")) {
      msg (object2.give)
      handled = true
    }
    else if (TypeOf(object2, "give") = "scriptdictionary") {
      if (DictionaryContains(object2.give, object1.name)) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object2)
        dictionary add (parameters, "object", object1)
        invoke (ScriptDictionaryItem(object2.give, object1.name), parameters)
        handled = true
      }
      if (not handled) {
        if (HasScript(object2, "giveanything")) {
          // TO DO: Would be better to use a delegate for giveanything, but need to implement Editor support first
          parameters = NewObjectDictionary()
          dictionary add (parameters, "object", object1)
          do (object2, "giveanything", parameters)
          handled = true
        }
      }
    }
    if (not handled) {
      if (HasString(object1, "giveto")) {
        msg (object1.giveto)
        handled = true
      }
      else if (TypeOf(object1, "giveto") = "scriptdictionary") {
        if (DictionaryContains(object1.giveto, object2.name)) {
          parameters = NewObjectDictionary()
          dictionary add (parameters, "this", object1)
          dictionary add (parameters, "object", object2)
          invoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters)
          handled = true
        }
        else {
          if (HasScript(object1, "givetoanything")) {
            // TO DO: Would be better to use a delegate for givetoanything, but need to implement Editor support first
            parameters = NewObjectDictionary()
            dictionary add (parameters, "object", object2)
            do (object1, "givetoanything", parameters)
            handled = true
          }
        }
      }
    }
    if (not handled) {
      msg (DynamicTemplate("DefaultGive", object2, object1))
    }
  </function>
  <function name="HandleUseOn" parameters="object1, object2">
    handled = false
    if (HasString(object2, "useon")) {
      msg (object2.useon)
      handled = true
    }
    else if (TypeOf(object2, "useon") = "scriptdictionary") {
      if (DictionaryContains(object2.useon, object1.name)) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object2)
        dictionary add (parameters, "object", object1)
        invoke (ScriptDictionaryItem(object2.useon, object1.name), parameters)
        handled = true
      }
      else {
        if (HasScript(object2, "useanything")) {
          // TO DO: Would be better to use a delegate for useanything, but need to implement Editor support first
          parameters = NewObjectDictionary()
          dictionary add (parameters, "object", object1)
          do (object2, "useanything", parameters)
          handled = true
        }
      }
    }
    if (not handled) {
      if (HasString(object1, "selfuseon")) {
        msg (object1.selfuseon)
        handled = true
      }
      else if (TypeOf(object1, "selfuseon") = "scriptdictionary") {
        if (DictionaryContains(object1.selfuseon, object2.name)) {
          parameters = NewObjectDictionary()
          dictionary add (parameters, "this", object1)
          dictionary add (parameters, "object", object2)
          invoke (ScriptDictionaryItem(object1.selfuseon, object2.name), parameters)
          handled = true
        }
        else {
          if (HasScript(object1, "selfuseanything")) {
            // TO DO: Would be better to use a delegate for selfuseanything, but need to implement Editor support first
            parameters = NewObjectDictionary()
            dictionary add (parameters, "object", object2)
            do (object1, "selfuseanything", parameters)
            handled = true
          }
        }
      }
    }
    if (not handled) {
      msg (DynamicTemplate("DefaultUseOn", object2, object1))
    }
  </function>
  <function name="DoAskTell" parameters="object, text, property, defaultscript, defaulttemplate"><![CDATA[
    handled = false
    maxstrength = 0
    match = null
    text = LCase(text)
    if (TypeOf(object, property) = "scriptdictionary") {
      dictionary = GetAttribute(object, property)
      foreach (keywords, dictionary) {
        strength = GetKeywordsMatchStrength(LCase(keywords), text)
        if (strength >= maxstrength and strength>0) {
          match = ScriptDictionaryItem(dictionary, keywords)
          maxstrength = strength
        }
      }
      if (match <> null) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object)
        invoke (match, parameters)
        handled = true
      }
    }
    if (not handled) {
      if (HasScript(object, defaultscript)) {
        do (object, defaultscript)
      }
      else {
        msg (DynamicTemplate(defaulttemplate, object))
      }
    }
  ]]></function>
  <function name="GetKeywordsMatchStrength" parameters="keywords, input" type="int">
    // Keywords is the subject. We split it into individual words, and then see how well
    // the words in the input match the keywords.
    keywordlist = Split(keywords, " ")
    inputlist = Split(input, " ")
    strength = 0
    foreach (word, inputlist) {
      foreach (keyword, keywordlist) {
        if (StartsWith(word, keyword)) {
          strength = strength + LengthOf(keyword)
        }
      }
    }
    return (strength)
  </function>
  <function name="CompareNames" parameters="name, value, obj, fullmatches, partialmatches"><![CDATA[
    if (name = value) {
      if (not ListContains(fullmatches, obj)) {
        list add (fullmatches, obj)
      }
    }
    else {
      if (StartsWith(name, value)) {
        if (not ListContains(partialmatches, obj)) {
          list add (partialmatches, obj)
        }
      }
      else {
        // check if input matches the start of any word in the name
        if (Instr(name, " " + value) > 0) {
          if (not ListContains(partialmatches, obj)) {
            list add (partialmatches, obj)
          }
        }
      }
    }
  ]]></function>
  <function name="GenerateMenuChoices" parameters="dictionary, objects">
    foreach (obj, objects) {
      if (not DictionaryContains(dictionary, obj.name)) {
        dictionary add (dictionary, obj.name, GetDisplayAlias(obj))
      }
    }
  </function>
  <function name="ResolveName" parameters="variable, value, objtype" type="object"><![CDATA[
    found = false
    if (game.pov.commandmetadata <> null) {
      if (DictionaryContains(game.pov.commandmetadata, value)) {
        result = GetObject(StringDictionaryItem(game.pov.commandmetadata, value))
        if (result <> null) {
          if (ListContains(ScopeVisible(), result)) {
            found = true
            return (result)
          }
        }
      }
    }
    if (not found) {
      value = LCase(value)
      result = ResolveNameInternal(variable, value, objtype)
      if (result <> null) {
        return (result)
      }
      else {
        // TO DO: Check this behaviour. We only want to try ignoring prefixes if we have definitely got an unresolved name.
        foreach (prefix, game.parserignoreprefixes) {
          if (StartsWith(value, prefix + " ")) {
            result = ResolveNameInternal(variable, Mid(value, LengthOf(prefix) + 1), objtype)
          }
        }
        if (result = null and LengthOf(variable) = 0 and not GetBoolean(game.pov, "currentcommandmultiobjectpending")) {
          UnresolvedCommand (value, game.pov.currentcommandpendingvariable)
        }
        return (result)
      }
    }
  ]]></function>
  <function name="ResolveNameInternal" parameters="variable, value, objtype" type="object"><![CDATA[
    fullmatches = NewObjectList()
    partialmatches = NewObjectList()
    game.pov.currentcommandmultiobjectpending = false
    if (objtype = "object") {
      scope = ScopeVisible()
    }
    else if (objtype = "exit") {
      scope = ScopeExits()
    }
    value = Trim(value)
    foreach (obj, scope) {
      name = LCase(GetDisplayAlias(obj))
      CompareNames (name, value, obj, fullmatches, partialmatches)
      if (obj.alt <> null) {
        foreach (altname, obj.alt) {
          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
        }
      }
    }
    // allow referring to objects from the previous command by gender or article
    if (objtype = "object" and game.lastobjects <> null) {
      foreach (obj, game.lastobjects) {
        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)
        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)
      }
    }
    if (ListCount(fullmatches) = 1) {
      return (ListItem(fullmatches, 0))
    }
    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {
      return (ListItem(partialmatches, 0))
    }
    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {
      return (null)
    }
    else {
      menu = NewStringDictionary()
      GenerateMenuChoices (menu, fullmatches)
      GenerateMenuChoices (menu, partialmatches)
      if (LengthOf(variable) > 0) {
        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements
        game.pov.currentcommandpendingvariable = variable
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), menu, true) {
          varname = game.pov.currentcommandpendingvariable
          game.pov.currentcommandpendingvariable = null
          if (result <> null) {
            AddToResolvedNames (varname, GetObject(result))
          }
        }
      }
      else {
        // multi-object command, so after showing the menu, add the object to the list
        game.pov.currentcommandmultiobjectpending = true
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), menu, true) {
          if (result <> null) {
            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))
            ResolveNextNameListItem
          }
        }
      }
      return (null)
    }
  ]]></function>
  <function name="ResolveNameList" parameters="value, scope, objtype">
    game.pov.currentcommandpendingobjectlist = NewObjectList()
    game.pov.currentcommandpendingobjectlistunresolved = NewStringList()
    game.pov.currentcommandpendingobjectscope = scope
    game.pov.currentcommandpendingobjecttype = objtype
    inputlist = Split(value, ",")
    foreach (inputbase, inputlist) {
      inputlist2 = Split(inputbase, " " + Template("And") + " ")
      foreach (input, inputlist2) {
        list add (game.pov.currentcommandpendingobjectlistunresolved, input)
      }
    }
    ResolveNextNameListItem
  </function>
  <function name="ResolveNextNameListItem"><![CDATA[
    resolvedall = false
    if (TypeOf(game.pov, "currentcommandpendingobjectlistunresolved") = "stringlist") {
      queuelength = ListCount(game.pov.currentcommandpendingobjectlistunresolved)
      if (queuelength > 0) {
        thisitem = Trim(StringListItem(game.pov.currentcommandpendingobjectlistunresolved, 0))
        if (queuelength = 1) {
          game.pov.currentcommandpendingobjectlistunresolved = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.currentcommandpendingobjectlistunresolved, i))
          }
          game.pov.currentcommandpendingobjectlistunresolved = newqueue
        }
        ResolveNameListItem (Trim(thisitem))
      }
      else {
        resolvedall = true
      }
    }
    else {
      resolvedall = true
    }
    if (resolvedall) {
      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectlist)
    }
  ]]></function>
  <function name="ResolveNameListItem" parameters="value"><![CDATA[
    if (ListContains(game.allobjects, value)) {
      // value is "all"
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", true)
      }
      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectscope)
    }
    else {
      object = ResolveName("", value, game.pov.currentcommandpendingobjecttype)
      if (object <> null) {
        if (not ListContains(game.pov.currentcommandpendingobjectlist, object)) {
          list add (game.pov.currentcommandpendingobjectlist, object)
        }
        ResolveNextNameListItem
      }
    }
  ]]></function>
  <function name="ResolveNameListItemFinished" parameters="result"><![CDATA[
    if (ListCount(result) > 1) {
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", true)
      }
    }
    AddToResolvedNames (game.pov.currentcommandpendingvariable, result)
  ]]></function>
  <function name="HandleCommand" parameters="command, metadata"><![CDATA[
    handled = false
    if (game.menucallback <> null) {
      if (HandleMenuTextResponse(command)) {
        handled = true
      }
      else {
        if (game.menuallowcancel) {
          ClearMenu
        }
        else {
          handled = true
        }
      }
    }
    if (not handled) {
      StartTurnOutputSection
      if (StartsWith (command, "*")) {
        msg ("")
        msg (SafeXML (command))
      }
      else {
        shownlink = false
        if (game.echocommand) {
          if (metadata <> null and game.enablehyperlinks and game.echohyperlinks) {
            foreach (key, metadata) {
              if (EndsWith(command, key)) {
                objectname = StringDictionaryItem(metadata, key)
                object = GetObject(objectname)
                if (object <> null) {
                  msg ("")
                  msg ("&gt; " + Left(command, LengthOf(command) - LengthOf(key)) + "{object:" + object.name + "}")
                  shownlink = true
                }
              }
            }
          }
          if (not shownlink) {
            msg ("")
            OutputTextRaw ("&gt; " + SafeXML(command))
          }
        }
        if (game.command_newline) {
          msg ("")
        }
        game.pov.commandmetadata = metadata
        if (game.multiplecommands) {
          commands = Split(command, ".")
          if (ListCount(commands) = 1) {
            game.pov.commandqueue = null
            HandleSingleCommand (Trim(command))
          }
          else {
            game.pov.commandqueue = commands
            HandleNextCommandQueueItem
          }
        }
        else {
          game.pov.commandqueue = null
          HandleSingleCommand (Trim(command))
        }
      }
    }
  ]]></function>
  <function name="HandleNextCommandQueueItem"><![CDATA[
    if (TypeOf(game.pov, "commandqueue") = "stringlist") {
      queuelength = ListCount(game.pov.commandqueue)
      if (queuelength > 0) {
        thiscommand = Trim(StringListItem(game.pov.commandqueue, 0))
        if (queuelength = 1) {
          game.pov.commandqueue = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.commandqueue, i))
          }
          game.pov.commandqueue = newqueue
        }
        if (LengthOf(thiscommand) > 0) {
          HandleSingleCommand (thiscommand)
        }
        else {
          HandleNextCommandQueueItem
        }
      }
    }
  ]]></function>
  <function name="HandleSingleCommand" parameters="command"><![CDATA[
    candidates = NewObjectList()
    foreach (cmd, ScopeCommands()) {
      if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
        list add (candidates, cmd)
      }
    }
    maxstrength = -1
    thiscommand = null
    foreach (candidate, candidates) {
      strength = GetMatchStrength(candidate.pattern, command, candidate.name)
      // favour commands defined later, so an author can override a library command...
      if (strength >= maxstrength) {
        // ... except if the command defined later (candidate) has no parent, and the current best
        // match (thiscommand) does have a parent. We want to favour any commands defined in rooms
        // over global candidates.
        skip = false
        if (thiscommand <> null) {
          if (thiscommand.parent <> null and candidate.parent = null) {
            skip = true
          }
        }
        if (not skip) {
          thiscommand = candidate
          maxstrength = strength
        }
      }
    }
    if (thiscommand = null) {
      if (HasScript(game, "unresolvedcommandhandler")) {
        params = NewDictionary()
        dictionary add (params, "command", command)
        do (game, "unresolvedcommandhandler", params)
      }
      else {
        msg (Template("UnrecognisedCommand"))
      }
      HandleNextCommandQueueItem
    }
    else {
      varlist = Populate(thiscommand.pattern, command, thiscommand.name)
      HandleSingleCommandPattern (command, thiscommand, varlist)
    }
  ]]></function>
  <function name="FinishTurn">
    RunTurnScripts
    UpdateStatusAttributes
    CheckDarkness
    UpdateObjectLinks
  </function>
  <function name="HandleSingleCommandPattern" parameters="command, thiscommand, varlist">
    // current command string
    game.pov.currentcommand = command
    // current command object
    game.pov.currentcommandpattern = thiscommand
    // string dictionary of variables, e.g. object1="book"; object2="table"
    game.pov.currentcommandvarlist = varlist
    // string list of variables left to resolve
    game.pov.currentcommandvarlistqueue = NewStringList()
    foreach (key, varlist) {
      list add (game.pov.currentcommandvarlistqueue, key)
    }
    // dictionary of resolved elements, e.g. object1=book_object; object2=table_object
    game.pov.currentcommandresolvedelements = NewDictionary()
    // list of resolved elements, e.g. book_object; table_object
    game.pov.currentcommandresolvedobjects = NewObjectList()
    game.pov.currentcommandunresolvedobject = null
    game.pov.currentcommandpendingvariable = null
    ResolveNextName
  </function>
  <function name="ResolveNextName"><![CDATA[
    resolvedall = false
    queuetype = TypeOf(game.pov, "currentcommandvarlistqueue")
    if (queuetype = "stringlist") {
      queuelength = ListCount(game.pov.currentcommandvarlistqueue)
      if (queuelength > 0) {
        // Pop next variable off the queue
        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)
        if (queuelength = 1) {
          game.pov.currentcommandvarlistqueue = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))
          }
          game.pov.currentcommandvarlistqueue = newqueue
        }
        // Resolve variable
        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)
        if (value <> "") {
          result = null
          resolvinglist = false
          if (StartsWith(var, "object")) {
            if (HasDelegateImplementation(game.pov.currentcommandpattern, "multiple")) {
              game.pov.currentcommandpendingobjectlist = NewObjectList()
              game.pov.currentcommandpendingvariable = var
              ResolveNameList (value, RunDelegateFunction(game.pov.currentcommandpattern, "multiple"), "object")
              resolvinglist = true
            }
            else {
              result = ResolveName(var, value, "object")
            }
          }
          else if (StartsWith(var, "exit")) {
            result = ResolveName(var, value, "exit")
          }
          else if (StartsWith(var, "text")) {
            result = StringDictionaryItem(game.pov.currentcommandvarlist, var)
          }
          else {
            error ("Unhandled command variable '" + var + "' - command variable names must begin with 'object', 'exit' or 'text'")
          }
          // at this point, ResolveName has returned - either an object name, unresolved, or pending
          if (result = null) {
            if ((not resolvinglist) and LengthOf(GetString(game.pov, "currentcommandpendingvariable")) = 0) {
              UnresolvedCommand (value, var)
            }
          }
          else {
            AddToResolvedNames (var, result)
          }
        }
        else {
          ResolveNextName
        }
      }
      else {
        resolvedall = true
      }
    }
    else if (queuetype = "null") {
      resolvedall = true
    }
    else {
      error ("Invalid queue type")
    }
    if (resolvedall) {
      // TO DO: game.lastobjects should be game.pov.lastobjects
      game.lastobjects = game.pov.currentcommandresolvedobjects
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", false)
      }
      if (not GetBoolean(game.pov.currentcommandpattern, "isundo")) {
        if (LengthOf(game.pov.currentcommand) > 0) {
          start transaction (game.pov.currentcommand)
        }
      }
      if (not GetBoolean(game.pov.currentcommandpattern, "isoops")) {
        // TO DO: game.unresolved* should be game.pov.unresolved*
        game.unresolvedcommand = null
        game.unresolvedcommandvarlist = null
        game.unresolvedcommandkey = null
      }
      if (HasScript(game.pov.currentcommandpattern, "script")) {
        do (game.pov.currentcommandpattern, "script", game.pov.currentcommandresolvedelements)
      }
      HandleNextCommandQueueItem
    }
  ]]></function>
  <function name="AddToResolvedNames" parameters="var, result">
    if (TypeOf(result) = "object") {
      if (result.type = "object") {
        list add (game.pov.currentcommandresolvedobjects, result)
      }
    }
    else if (TypeOf(result) = "objectlist") {
      foreach (obj, result) {
        if (obj.type = "object") {
          list add (game.pov.currentcommandresolvedobjects, obj)
        }
      }
    }
    dictionary add (game.pov.currentcommandresolvedelements, var, result)
    ResolveNextName
  </function>
  <function name="UnresolvedCommand" parameters="objectname, varname"><![CDATA[
    // TO DO: Update names below, we don't need these two variables
    unresolvedobject = objectname
    unresolvedkey = varname
    if (HasString(game.pov.currentcommandpattern, "unresolved")) {
      if (ListCount(game.pov.currentcommandvarlist) > 1) {
        msg (game.pov.currentcommandpattern.unresolved + " (" + unresolvedobject + ")")
      }
      else {
        msg (game.pov.currentcommandpattern.unresolved)
      }
    }
    else {
      if (ListCount(game.pov.currentcommandvarlist) > 1) {
        msg (Template("UnresolvedObject") + " (" + unresolvedobject + ")")
      }
      else {
        msg (Template("UnresolvedObject"))
      }
    }
    game.unresolvedcommand = game.pov.currentcommandpattern
    game.unresolvedcommandvarlist = game.pov.currentcommandvarlist
    game.unresolvedcommandkey = unresolvedkey
  ]]></function>
  <function name="HandleMultiVerb" parameters="object, property, object2, default">
    dictionary = GetAttribute(object, property)
    if (DictionaryContains(dictionary, object2.name)) {
      parameters = NewDictionary()
      dictionary add (parameters, "this", object)
      dictionary add (parameters, "object", object2)
      invoke (ScriptDictionaryItem(dictionary, object2.name), parameters)
    }
    else {
      parameters = NewDictionary()
      dictionary add (parameters, "this", object)
      dictionary add (parameters, "object", object2)
      if (DictionaryContains(dictionary, "default")) {
        invoke (ScriptDictionaryItem(dictionary, "default"), parameters)
      }
      else {
        msg (default)
      }
    }
  </function>
  <function name="GetPlacesObjectsList" type="objectlist">
    return (ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov))
  </function>
  <function name="GetExitsList" type="objectlist">
    return (RemoveLookOnlyExits(RemoveSceneryObjects(ScopeExits())))
  </function>
  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsVisible(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeReachableInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsReachable(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotHeld" type="objectlist">
    return (ScopeVisibleNotHeldForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotHeldForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room))
      list add (result, game.pov)
      return (result)
    }
    else {
      return (ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room)))
    }
  </function>
  <function name="ScopeVisibleNotHeldNotScenery" type="objectlist">
    return (ScopeVisibleNotHeldNotSceneryForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotHeldNotSceneryForRoom" parameters="room" type="objectlist">
    return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)))
  </function>
  <function name="ScopeReachable" type="objectlist">
    return (ScopeReachableForRoom(game.pov.parent))
  </function>
  <function name="ScopeReachableForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeReachableInventory())
      list add (result, game.pov)
    }
    else {
      result = ScopeReachableNotHeldForRoom(room)
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotReachable" type="objectlist">
    return (ScopeVisibleNotReachableForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotReachableForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    exclude = ScopeReachableForRoom(room)
    list add (exclude, game.pov)
    newParent = GetNonTransparentParent(room)
    foreach (obj, GetAllChildObjects(newParent)) {
      if (ContainsVisible(newParent, obj) and not ListContains(exclude, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="GetNonTransparentParent" parameters="room" type="object">
    if (GetBoolean(room, "transparent")) {
      if (room.parent = null) {
        return (room)
      }
      else {
        return (GetNonTransparentParent(room.parent))
      }
    }
    else {
      return (room)
    }
  </function>
  <function name="ScopeReachableNotHeld" type="objectlist">
    return (ScopeReachableNotHeldForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleLightsource" parameters="lightstrength" type="objectlist">
    result = ScopeVisible()
    lightobjects = NewObjectList()
    foreach (obj, result) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add (lightobjects, obj)
      }
    }
    exits = ScopeExits()
    foreach (obj, exits) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add (lightobjects, obj)
      }
    }
    return (lightobjects)
  </function>
  <function name="ScopeReachableNotHeldForRoom" parameters="room" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(room)) {
      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  ]]></function>
  <function name="ScopeVisible" type="objectlist">
    return (ScopeVisibleForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      return (ListCombine(ScopeVisibleNotHeldForRoom(room), ScopeInventory()))
    }
    else {
      return (ScopeVisibleNotHeldForRoom(room))
    }
  </function>
  <function name="ScopeExits" type="objectlist">
    return (ScopeExitsForRoom(game.pov.parent))
  </function>
  <function name="ScopeExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        if (exit.visible) {
          if (GetBoolean(room, "darklevel")) {
            if (GetBoolean(exit, "lightsource")) {
              list add (result, exit)
            }
          }
          else {
            list add (result, exit)
          }
        }
      }
    }
    return (result)
  </function>
  <function name="ScopeCommands" type="objectlist">
    result = NewObjectList()
    foreach (command, AllCommands()) {
      if (command.parent = null or command.parent = game.pov.parent) {
        list add (result, command)
      }
    }
    return (result)
  </function>
  <function name="GetBlockingObject" parameters="obj" type="object">
    result = null
    foreach (obj, ListParents(obj)) {
      if (result = null and not CanReachThrough(obj)) {
        result = obj
      }
    }
    return (result)
  </function>
  <function name="ListParents" parameters="obj" type="objectlist"><![CDATA[
    result = NewObjectList()
    if (obj.parent <> null) {
      parent_as_list = NewObjectList()
      list add (parent_as_list, obj.parent)
      result = ListCombine(parent_as_list, ListParents(obj.parent))
    }
    return (result)
  ]]></function>
  <function name="ContainsVisible" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, false))
  </function>
  <function name="ContainsReachable" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, true))
  </function>
  <function name="ContainsAccessible" parameters="parentObj, searchObj, onlyReachable" type="boolean">
    if (not HasObject(searchObj, "parent")) {
      return (false)
    }
    else if (not searchObj.visible) {
      return (false)
    }
    else if (GetBoolean(parentObj, "darklevel") and not GetBoolean(searchObj, "lightsource")) {
      return (false)
    }
    else {
      if (searchObj.parent = null) {
        return (false)
      }
      else if (searchObj.parent = parentObj) {
        return (true)
      }
      else {
        if (onlyReachable) {
          canAdd = CanReachThrough(searchObj.parent)
        }
        else {
          canAdd = CanSeeThrough(searchObj.parent)
        }
        if (canAdd) {
          return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable))
        }
        else {
          return (false)
        }
      }
    }
  </function>
  <function name="GetVolume" parameters="obj, allinclusive" type="int">
    result = 0
    foreach (object, GetAllChildObjects ( obj )) {
      if (HasInt(object, "volume")) {
        result = result + object.volume
      }
    }
    if (allinclusive and HasInt(obj, "volume")) {
      result = result + obj.volume
    }
    return (result)
  </function>
  <function name="CanSeeThrough" parameters="obj" type="boolean">
    return ((GetBoolean(obj, "transparent") or CanReachThrough(obj)) and not GetBoolean(obj, "hidechildren"))
  </function>
  <function name="CanReachThrough" parameters="obj" type="boolean">
    return (GetBoolean(obj, "isopen") and not GetBoolean(obj, "hidechildren"))
  </function>
  <function name="Got" parameters="obj" type="boolean">
    return (ListContains(ScopeInventory(), obj))
  </function>
  <function name="UpdateObjectLinks">
    if (game.enablehyperlinks) {
      data = NewStringDictionary()
      foreach (object, ScopeVisible()) {
        dictionary add (data, object.name, Join(GetDisplayVerbs(object), "/"))
      }
      JS.updateObjectLinks (data)
      exits = NewStringList()
      foreach (exit, ScopeExits()) {
        list add (exits, exit.name)
      }
      JS.updateExitLinks (exits)
      commands = NewStringList()
      foreach (cmd, ScopeCommands()) {
        list add (commands, cmd.name)
      }
      JS.updateCommandLinks (commands)
    }
  </function>
  <function name="ShowRoomDescription"><![CDATA[
    isDark = CheckDarkness()
    if (isDark) {
      descriptionfield = "darkroomdescription"
    }
    else {
      descriptionfield = "description"
    }
    if (game.autodescription) {
      desc = ""
      for (i, 1, 4) {
        if (i = game.autodescription_youarein) {
          if (game.autodescription_youarein_useprefix) {
            youarein = game.pov.parent.descprefix
            desc = AddDescriptionLine (desc, youarein + " " + GetDisplayName(game.pov.parent) + ".")
          }
          else {
            desc = AddDescriptionLine (desc, "<b>" + CapFirst(GetDisplayName(game.pov.parent)) + "</b>")
          }
          if (game.autodescription_youarein_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_youcansee) {
          objects = FormatObjectList(game.pov.parent.objectslistprefix, GetNonTransparentParent(game.pov.parent), Template("And"), ".")
          desc = AddDescriptionLine(desc, objects)
          if (game.autodescription_youcansee_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_youcango) {
          exits = FormatExitList(game.pov.parent.exitslistprefix, GetExitsList(), Template("Or"), ".")
          desc = AddDescriptionLine(desc, exits)
          if (game.autodescription_youcango_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_description) {
          if (HasScript(game.pov.parent, descriptionfield)) {
            if (LengthOf(desc) > 0) {
              msg (desc)
              desc = ""
            }
            do (game.pov.parent, descriptionfield)
            if (game.autodescription_description_newline) {
              msg ("")
            }
          }
          else {
            desc = AddDescriptionLine(desc, GetRoomDescription())
            if (game.autodescription_description_newline) {
              msg (desc + "<br/>")
              desc = ""
            }
          }
        }
      }
      if (LengthOf(desc) > 0) {
        msg (desc)
      }
    }
    else {
      if (HasScript(game.pov.parent, descriptionfield)) {
        do (game.pov.parent, descriptionfield)
      }
      else {
        fulldesc = GetRoomDescription()
        if (LengthOf(fulldesc) > 0) {
          msg (fulldesc)
        }
      }
    }
  ]]></function>
  <function name="AddDescriptionLine" parameters="desc, line" type="string"><![CDATA[
    if (LengthOf(line) > 0) {
      if (LengthOf(desc) > 0) {
        msg (desc)
        desc = ""
      }
      desc = desc + line
    }
    return (desc)
  ]]></function>
  <function name="GetRoomDescription" type="string"><![CDATA[
    fulldesc = ""
    if (CheckDarkness()) {
      if (HasString(game.pov.parent, "darkroomdescription")) {
        if (LengthOf(game.pov.parent.darkroomdescription) > 0) {
          fulldesc = game.pov.parent.darkroomdescription
        }
      }
    }
    else {
      if (HasString(game.pov.parent, "description")) {
        if (LengthOf(game.pov.parent.description) > 0) {
          fulldesc = game.pov.parent.description
        }
      }
    }
    if (game.appendobjectdescription) {
      foreach (val, ScopeVisibleNotHeld()) {
        if (HasString(val, "inroomdescription")) {
          if (LengthOf(val.inroomdescription) > 0 and val <> game.pov) {
            fulldesc = fulldesc + " " + val.inroomdescription
          }
        }
      }
    }
    return (Trim(fulldesc))
  ]]></function>
  <function name="OnEnterRoom" parameters="oldRoom"><![CDATA[
    game.displayroomdescriptiononstart = false
    if (IsDefined("oldRoom")) {
      if (oldRoom <> null) {
        if (HasScript(oldRoom, "onexit")) {
          do (oldRoom, "onexit")
        }
      }
    }
    on ready {
      if ((not GetBoolean(game.pov.parent, "visited")) and HasScript(game.pov.parent, "beforefirstenter")) {
        do (game.pov.parent, "beforefirstenter")
      }
      on ready {
        if (HasScript(game.pov.parent, "beforeenter")) {
          do (game.pov.parent, "beforeenter")
        }
        on ready {
          if (game.gridmap) {
            Grid_CalculateMapCoordinates (game.pov.parent, game.pov)
            Grid_DrawPlayerInRoom (game.pov.parent)
          }
          if (IsDefined("oldRoom")) {
            if (oldRoom <> null and game.changeroom_newline and not game.command_newline) {
              msg ("")
            }
          }
          request (UpdateLocation, CapFirst(GetDisplayName(game.pov.parent)))
          roomFrameExists = false
          if (HasString(game.pov.parent, "picture")) {
            if (LengthOf(game.pov.parent.picture) > 0) {
              roomFrameExists = true
              SetFramePicture (game.pov.parent.picture)
            }
          }
          if (game.clearframe and not roomFrameExists) {
            ClearFramePicture
          }
          if (game.showdescriptiononenter) {
            ShowRoomDescription
          }
          if (HasScript( game, "roomenter")) {
            do (game, "roomenter")
          }
          on ready {
            if ((not GetBoolean(game.pov.parent, "visited")) and HasScript(game.pov.parent, "firstenter")) {
              do (game.pov.parent, "firstenter")
            }
            on ready {
              if (HasScript(game.pov.parent, "enter")) {
                do (game.pov.parent, "enter")
              }
            }
            set (game.pov.parent, "visited", true)
          }
        }
      }
    }
  ]]></function>
  <function name="FormatObjectList" parameters="preList, parent, preFinal, postList" type="string"><![CDATA[
    result = ""
    count = 0
    list = RemoveSceneryObjects(GetDirectChildren(parent))
    if (CheckDarkness()) {
      list = RemoveDarkObjects(list)
    }
    listLength = ListCount(list)
    foreach (item, list) {
      if (LengthOf(result) = 0) {
        result = preList + " "
      }
      result = result + GetDisplayNameLink(item, "object")
      if (CanSeeThrough(item)) {
        result = result + FormatObjectList(" (" + item.contentsprefix, item, preFinal, ")")
      }
      count = count + 1
      if (count = listLength - 1) {
        result = result + " " + preFinal + " "
      }
      else if (count < listLength) {
        result = result + ", "
      }
      else {
        result = result + postList
      }
    }
    return (result)
  ]]></function>
  <function name="RemoveSceneryObjects" parameters="list" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, list) {
      if (not obj.scenery and obj <> game.pov and obj.visible) {
        list add (result, obj)
      }
    }
    return (result)
  ]]></function>
  <function name="RemoveLookOnlyExits" parameters="list" type="objectlist">
    result = NewObjectList()
    foreach (obj, list) {
      if (not obj.lookonly) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="RemoveDarkObjects" parameters="list" type="objectlist">
    result = NewObjectList()
    foreach (obj, list) {
      if (GetBoolean(obj, "lightsource") or obj.parent = game.pov) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="FormatExitList" parameters="preList, list, preFinal, postList" type="string"><![CDATA[
    result = ""
    listLength = ListCount(list)
    if (listLength > 0) {
      count = 0
      result = preList + " "
      foreach (item, list) {
        result = result + GetDisplayNameLink(item, "exit")
        count = count + 1
        if (count = listLength - 1) {
          result = result + " " + preFinal + " "
        }
        else if (count < listLength) {
          result = result + ", "
        }
      }
      result = result + postList
    }
    return (result)
  ]]></function>
  <function name="GetDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "alias")) {
      result = obj.alias
    }
    else {
      result = obj.name
    }
    return (result)
  </function>
  <function name="GetDisplayName" parameters="obj" type="string">
    return (GetDisplayNameLink(obj, ""))
  </function>
  <function name="GetDisplayNameLink" parameters="obj, type" type="string"><![CDATA[
    verbs = GetDisplayVerbs(obj)
    if (verbs <> null) {
      verbCount = ListCount(verbs)
    }
    else {
      verbCount = 0
    }
    if (type = "exit" and verbCount = 1) {
      if (not game.enablehyperlinks) {
        result = GetDisplayAlias(obj)
      }
      else {
        result = "{exit:" + obj.name + "}"
      }
    }
    else if (type = "") {
      result = GetDisplayAlias(obj)
    }
    else {
      result = "{object:" + obj.name + "}"
    }
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else if (type = "exit") {
      prefix = ""
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix) > 0) {
      prefix = prefix + " "
    }
    result = prefix + result
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      if (LengthOf(obj.suffix) > 0) {
        result = result + " " + obj.suffix
      }
    }
    return (result)
  ]]></function>
  <function name="ObjectLink" parameters="obj" type="string">
    return ("{object:" + obj.name + "}")
  </function>
  <function name="GetListDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "listalias")) {
      result = obj.listalias
    }
    else {
      result = GetDisplayAlias(obj)
    }
    return (result)
  </function>
  <function name="CheckDarkness" type="boolean"><![CDATA[
    roomCheckDarkness = true
    if (GetBoolean(game.pov.parent, "dark")) {
      if (ListCount(ScopeVisibleLightsource("strong")) > 0) {
        roomCheckDarkness = false
      }
    }
    else {
      roomCheckDarkness = false
    }
    game.pov.parent.darklevel = roomCheckDarkness
    return (roomCheckDarkness)
  ]]></function>
  <function name="EnableTimer" parameters="timer">
    timer.enabled = true
    timer.trigger = game.timeelapsed + timer.interval
  </function>
  <function name="DisableTimer" parameters="timer">
    timer.enabled = false
  </function>
  <function name="SetTimerInterval" parameters="timer, interval">
    timer.interval = interval
  </function>
  <function name="SetTimerScript" parameters="timer, script">
    timer.script = script
  </function>
  <function name="SetTimeout" parameters="interval, script">
    SetTimeoutID (interval, "", script)
  </function>
  <function name="SetTimeoutID" parameters="interval, name, script">
    timername = ""
    if (name = "") {
      timername = GetUniqueElementName("timeout")
    }
    else {
      if (GetTimer(name) = null and GetObject(name) = null) {
        timername = name
      }
      else {
        error ("Error creating timer: There is already an existing object named " + name)
      }
    }
    if (not timername = "") {
      create timer (timername)
      timer = GetTimer(timername)
      SetTimerInterval (timer, interval)
      timer.timeoutscript = script
      SetTimerScript (timer) {
        this.enabled = false
        invoke (this.timeoutscript)
        destroy (this.name)
      }
      EnableTimer (timer)
    }
  </function>
  <function name="Pause" parameters="interval">
    request (Pause, ToString(interval * 1000))
  </function>
  <function name="RunTurnScripts">
    if (IsGameRunning()) {
      if (game.menucallback = null) {
        foreach (turnscript, AllTurnScripts()) {
          if (GetBoolean(turnscript, "enabled")) {
            inscope = false
            if (turnscript.parent = game or turnscript.parent = null) {
              inscope = true
            }
            else {
              if (Contains(turnscript.parent, game.pov)) {
                inscope = true
              }
            }
            if (inscope) {
              do (turnscript, "script")
            }
          }
        }
      }
    }
  </function>
  <function name="EnableTurnScript" parameters="turnscript">
    turnscript.enabled = true
  </function>
  <function name="DisableTurnScript" parameters="turnscript">
    turnscript.enabled = false
  </function>
  <function name="SetTurnScript" parameters="turnscript, script">
    turnscript.script = script
  </function>
  <function name="SetTurnTimeout" parameters="turncount, script">
    SetTurnTimeoutID (turncount, "", script)
  </function>
  <function name="SetTurnTimeoutID" parameters="turncount, name, script"><![CDATA[
    turnscriptname = ""
    if (name = "") {
      turnscriptname = GetUniqueElementName("turnscript")
    }
    else {
      if (GetObject(name) = null and GetTimer(name) = null) {
        turnscriptname = name
      }
      else {
        error ("Error creating turnscript: There is already an existing object named " + name)
      }
    }
    if (not turnscriptname="") {
      create turnscript (turnscriptname)
      turnscript = GetObject(turnscriptname)
      turnscript.turncount = 0
      turnscript.triggerturncount = turncount
      turnscript.timeoutscript = script
      SetTurnScript (turnscript) {
        this.turncount = this.turncount + 1
        if (this.turncount >= this.triggerturncount) {
          this.enabled = false
          invoke (this.timeoutscript)
          destroy (this.name)
        }
      }
      EnableTurnScript (turnscript)
    }
  ]]></function>
  <function name="UpdateStatusAttributes">
    status = AddStatusAttributesForElement("", game, game.statusattributes)
    status = AddStatusAttributesForElement(status, game.pov, game.povstatusattributes)
    status = AddStatusAttributesForElement(status, game.pov, game.pov.statusattributes)
    request (SetStatus, status)
  </function>
  <function name="AddStatusAttributesForElement" parameters="status, element, statusAttributes" type="string"><![CDATA[
    if (statusAttributes <> null) {
      foreach (attr, statusAttributes) {
        if (LengthOf(status) > 0) {
          status = status + "\n"
        }
        status = status + FormatStatusAttribute(attr, GetAttribute(element, attr), StringDictionaryItem(statusAttributes, attr))
      }
    }
    return (status)
  ]]></function>
  <function name="FormatStatusAttribute" parameters="attr, value, format" type="string">
    if (LengthOf(format) = 0) {
      return (CapFirst(attr) + ": " + value)
    }
    else {
      if (TypeOf(value) = "int" or TypeOf(value) = "double") {
        value = ToString(value)
      }
      if (TypeOf(value) = "null") {
        value = ""
      }
      return (Replace(format, "!", value))
    }
  </function>
  <function name="InitStatusAttributes">
    if (game.showscore) {
      game.score = 0
      if (game.statusattributes = null) {
        game.statusattributes = NewStringDictionary()
      }
      dictionary add (game.statusattributes, "score", "Score: !")
    }
    if (game.showhealth) {
      if (game.povstatusattributes = null) {
        game.povstatusattributes = NewStringDictionary()
      }
      dictionary add (game.povstatusattributes, "health", "Health: !%")
    }
  </function>
  <function name="IncreaseScore" parameters="amount">
    if (not HasInt(game, "score")) {
      error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.")
    }
    game.score = game.score + amount
  </function>
  <function name="DecreaseScore" parameters="amount">
    if (not HasInt(game, "score")) {
      error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.")
    }
    game.score = game.score - amount
  </function>
  <function name="IncreaseHealth" parameters="amount">
    if (not HasInt(game.pov, "health")) {
      error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.")
    }
    game.pov.health = game.pov.health + amount
  </function>
  <function name="DecreaseHealth" parameters="amount">
    if (not HasInt(game.pov, "health")) {
      error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.")
    }
    game.pov.health = game.pov.health - amount
  </function>
  <function name="OutputText" parameters="text">
    data = NewDictionary()
    dictionary add (data, "fulltext", text)
    text = ProcessTextSection(text, data)
    OutputTextRaw (text)
  </function>
  <function name="OutputTextRaw" parameters="text"><![CDATA[
    format = GetCurrentTextFormat("")
    JS.addText ("<span style=\"" + format + "\">" + text + "</span><br/>")
    if (GetString(game, "commandbarformat") <> format) {
      ResetCommandBarFormat
    }
    request (Speak, text)
  ]]></function>
  <function name="ResetCommandBarFormat">
    format = GetCurrentTextFormat("") + ";background:" + game.defaultbackground
    game.commandbarformat = format
    JS.setCommandBarStyle (format)
  </function>
  <function name="OutputTextNoBr" parameters="text">
    data = NewDictionary()
    dictionary add (data, "fulltext", text)
    text = ProcessTextSection(text, data)
    OutputTextRawNoBr (text)
  </function>
  <function name="OutputTextRawNoBr" parameters="text"><![CDATA[
    JS.addText ("<span style=\"" + GetCurrentTextFormat("") + "\">" + text + "</span>")
    request (Speak, text)
  ]]></function>
  <function name="GetCurrentTextFormat" parameters="colour" type="string"><![CDATA[
    style = ""
    if (UIOptionUseGameFont()) {
      font = GetCurrentFontFamily()
    }
    else {
      font = GetUIOption("OverrideFontName")
    }
    if (LengthOf(font) > 0) {
      style = style + "font-family:" + font + ";"
    }
    if (LengthOf(colour) = 0) {
      if (UIOptionUseGameColours()) {
        colour = game.defaultforeground
      }
      else {
        colour = GetUIOption("OverrideForeground")
      }
    }
    if (LengthOf(colour) > 0) {
      style = style + "color:" + colour + ";"
    }
    if (UIOptionUseGameFont()) {
      size = game.defaultfontsize
    }
    else {
      size = ToDouble(GetUIOption("OverrideFontSize"))
    }
    if (size > 0) {
      style = style + "font-size:" + ToString(size) + "pt;"
    }
    return (style)
  ]]></function>
  <function name="GetCurrentLinkTextFormat" type="string">
    return (GetCurrentTextFormat(GetLinkTextColour()))
  </function>
  <function name="UIOptionUseGameFont" type="boolean">
    value = GetUIOption("UseGameFont")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>
  <function name="UIOptionUseGameColours" type="boolean">
    value = GetUIOption("UseGameColours")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>
  <function name="GetLinkTextColour" type="string">
    if (UIOptionUseGameColours()) {
      return (game.defaultlinkforeground)
    }
    else {
      return (GetUIOption("OverrideLinkForeground"))
    }
  </function>
  <function name="ProcessTextSection" parameters="text, data" type="string"><![CDATA[
    containsUnprocessedSection = false
    open = Instr(text, "{")
      if (open > 0) {
        nestCount = 1
        searchStart = open + 1
        finished = false
        while (not finished) {
          nextOpen = Instr(searchStart, text, "{")
            nextClose = Instr(searchStart, text, "}")
          if (nextClose > 0) {
            if (nextOpen > 0 and nextOpen < nextClose) {
              nestCount = nestCount + 1
              searchStart = nextOpen + 1
            }
            else {
              nestCount = nestCount - 1
              searchStart = nextClose + 1
              if (nestCount = 0) {
                close = nextClose
                containsUnprocessedSection = true
                finished = true
              }
            }
          }
          else {
            finished = true
          }
        }
      }
      if (containsUnprocessedSection) {
        section = Mid(text, open + 1, close - open - 1)
        value = ProcessTextCommand(section, data)
        text = Left(text, open - 1) + value + ProcessTextSection(Mid(text, close + 1), data)
      }
      return (text)
  ]]></function>
  <function name="ProcessTextCommand" parameters="section, data" type="string">
    if (StartsWith(section, "if ")) {
      return (ProcessTextCommand_If(section, data))
    }
    else if (StartsWith(section, "object:")) {
      return (ProcessTextCommand_Object(section, data))
    }
    else if (StartsWith(section, "command:")) {
      return (ProcessTextCommand_Command(Mid(section, 9), data))
    }
    else if (StartsWith(section, "page:")) {
      return (ProcessTextCommand_Command(Mid(section, 6), data))
    }
    else if (StartsWith(section, "exit:")) {
      return (ProcessTextCommand_Exit(section, data))
    }
    else if (StartsWith(section, "once:")) {
      return (ProcessTextCommand_Once(section, data))
    }
    else if (StartsWith(section, "notfirst:")) {
      return (ProcessTextCommand_NotFirst(section, data))
    }
    else if (StartsWith(section, "random:")) {
      return (ProcessTextCommand_Random(section, data))
    }
    else if (StartsWith(section, "rndalt:")) {
      return (ProcessTextCommand_RandomAlias(section, data))
    }
    else if (StartsWith(section, "img:")) {
      return (ProcessTextCommand_Img(section, data))
    }
    else if (StartsWith(section, "counter:")) {
      return (ProcessTextCommand_Counter(Mid(section, 9), data))
    }
    else if (StartsWith(section, "select:")) {
      return (ProcessTextCommand_Select(section, data))
    }
    else {
      dot = Instr(section, ".")
      if (dot = 0) {
        return ("{" + ProcessTextSection(section, data) + "}")
      }
      else {
        objectname = Left(section, dot - 1)
        attributename = Mid(section, dot + 1)
        object = GetObject(objectname)
        if (object = null) {
          return ("{" + ProcessTextSection(section, data) + "}")
        }
        else {
          if (HasAttribute(object, attributename)) {
            type = TypeOf(object, attributename)
            switch (type) {
              case ("string", "int", "double") {
                return (ToString(GetAttribute(object, attributename)))
              }
              case ("boolean") {
                result = GetAttribute(object, attributename)
                if (result) {
                  return ("true")
                }
                else {
                  return ("false")
                }
              }
              default {
                return ("(" + type + ")")
              }
            }
          }
          else {
            return ("")
          }
        }
      }
    }
  </function>
  <function name="ProcessTextCommand_Object" parameters="section, data" type="string"><![CDATA[
    objectname = Mid(section, 8)
    text = ""
    colon = Instr(objectname, ":")
    if (colon > 0) {
      text = Mid(objectname, colon + 1)
      objectname = Left(objectname, colon - 1)
    }
    object = GetObject(objectname)
    if (object = null) {
      return ("{" + ProcessTextSection(section, data) + "}")
    }
    else {
      if (LengthOf(text) = 0) {
        text = SafeXML(GetDisplayAlias(object))
      }
      if (game.enablehyperlinks) {
        linkid = ProcessTextCommand_GetNextLinkId()
        colour = ""
        if (HasString(object, "linkcolour") and GetUIOption("UseGameColours") = "true") {
          colour = object.linkcolour
        }
        else {
          colour = GetLinkTextColour()
        }
        style = GetCurrentTextFormat(colour)
        return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink elementmenu\" data-elementid=\"" + object.name + "\">" + text + "</a>")
      }
      else {
        return (text)
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_GetNextLinkId" type="string">
    if (not HasInt(game, "lastlinkid")) {
      game.lastlinkid = 0
    }
    game.lastlinkid = game.lastlinkid + 1
    return ("verblink" + game.lastlinkid)
  </function>
  <function name="ProcessTextCommand_Command" parameters="command, data" type="string"><![CDATA[
    text = command
    colon = Instr(command, ":")
    if (colon > 0) {
      text = Mid(command, colon + 1)
      command = Left(command, colon - 1)
    }
    style = GetCurrentLinkTextFormat()
    candidates = NewObjectList()
    foreach (cmd, ScopeCommands()) {
      if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
        list add (candidates, cmd)
      }
    }
    elementid = ""
    if (ListCount(candidates) = 1) {
      cmd = ObjectListItem(candidates, 0)
      elementid = cmd.name
    }
    linkid = ProcessTextCommand_GetNextLinkId()
    dataattrs = ""
    if (game.deactivatecommandlinks) {
      dataattrs = dataattrs + "data-deactivateonclick=\"true\" "
    }
    dataattrs = dataattrs + "data-command=\"" + command + "\""
    return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink commandlink\" data-elementid=\"" + elementid + "\" " + dataattrs + ">" + ProcessTextSection(text, data) + "</a>")
  ]]></function>
  <function name="ProcessTextCommand_Exit" parameters="section, data" type="string"><![CDATA[
    exitname = Mid(section, 6)
    exit = GetObject(exitname)
    if (exit = null) {
      return ("{" + ProcessTextSection(section, data) + "}")
    }
    else {
      verbs = GetDisplayVerbs(exit)
      alias = GetDisplayAlias(exit)
      command = LCase(StringListItem(verbs, 0)) + " " + alias
      style = GetCurrentLinkTextFormat()
      return ("<a style=\"" + style + "\" class=\"cmdlink exitlink\" data-elementid=\"" + exit.name + "\" data-command=\"" + command + "\">" + alias + "</a>")
    }
  ]]></function>
  <function name="ProcessTextCommand_Once" parameters="section, data" type="string">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return (ProcessTextSection(Mid(section, 6), data))
    }
    else {
      return ("")
    }
  </function>
  <function name="ProcessTextCommand_NotFirst" parameters="section, data" type="string">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return ("")
    }
    else {
      return (ProcessTextSection(Mid(section, 10), data))
    }
  </function>
  <function name="ProcessTextCommand_Random" parameters="section, data" type="string">
    elements = Mid(section, 8)
    elementslist = Tsplit(elements)
    index = GetRandomInt(0, ListCount(elementslist) - 1)
    return (ProcessTextSection(ListItem(elementslist, index), data))
  </function>
  <function name="Tsplit" parameters="splittext" type="stringlist"><![CDATA[
    itemlist = NewStringList()
    sections = 0
    startpos = 1
    for (i, 1, LengthOf(splittext)) {
      if (Mid(splittext, i, 1) = "{") {
          sections = sections + 1
        }
        if (Mid(splittext, i, 1) = "}") {
        sections = sections - 1
      }
      if (Mid(splittext, i, 1) = ":" and 0 >= sections) {
        item = Mid(splittext, startpos, i - startpos)
        list add (itemlist, item)
        startpos = i + 1
      }
    }
    item = Mid(splittext, startpos)
    list add (itemlist, item)
    return (itemlist)
  ]]></function>
  <function name="ProcessTextCommand_RandomAlias" parameters="section, data" type="string"><![CDATA[
    objectname = Mid(section, 8)
    object = GetObject(objectname)
    if (object = null) {
      return ("{" + ProcessTextSection(section, data) + "}")
    }
    else {
      count = ListCount(object.alt)
      if (count > 0) {
        return (ListItem(object.alt, GetRandomInt(0, count - 1)))
      }
      else {
        return ("")
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_If" parameters="section, data" type="string"><![CDATA[
    command = Mid(section, 4)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("{if " + command + "}")
    }
    else {
      text = Mid(command, colon + 1)
      condition = Left(command, colon - 1)
      operator = Instr(condition, "<=")
      if (operator <> 0) {
        operatorlength = 2
      }
      if (operator = 0) {
        operator = Instr(condition, ">=")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<>")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, ">")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "=")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        checkfor = true
        if (StartsWith(condition, "not ")) {
          checkfor = false
          condition = Mid(condition, 5)
        }
        dot = Instr(condition, ".")
        if (dot = 0) {
          result = GetBoolean(game, condition)
        }
        else {
          objectname = Left(condition, dot - 1)
          attributename = Mid(condition, dot + 1)
          object = GetObject(objectname)
          if (object = null) {
            result = false
          }
          else {
            result = GetBoolean(object, attributename)
          }
        }
        if (result = checkfor) {
          return (ProcessTextSection(text, data))
        }
        else {
          return ("")
        }
      }
      else {
        lhs = Left(condition, operator - 1)
        rhs = Mid(condition, operator + operatorlength)
        op = Mid(condition, operator, operatorlength)
        dot = Instr(lhs, ".")
        if (dot = 0) {
          objectname = ""
          attributename = ""
          if (HasInt(game, lhs)) {
            objectname = "game"
            attributename = lhs
          }
          else {
            return ("{if " + command + "}")
          }
        }
        else {
          objectname = Left(lhs, dot - 1)
          attributename = Mid(lhs, dot + 1)
        }
        object = GetObject(objectname)
        if (object = null) {
          return ("{if " + command + "}")
        }
        else {
          value = GetAttribute(object, attributename)
          // The next three lines added by The Pixie
          if (TypeOf(value) = "object") {
            value = value.name
          }
          if (op = "=") {
            if (ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<>") {
            if (not ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">") {
            if (ToDouble(ToString(value)) > ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<") {
            if (ToDouble(ToString(value)) < ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">=") {
            if (ToDouble(ToString(value)) >= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<=") {
            if (ToDouble(ToString(value)) <= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
        }
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_Img" parameters="section, data" type="string"><![CDATA[
    filename = Mid(section, 5)
    return ("<img src=\"" + GetFileURL(filename) + "\" />")
  ]]></function>
  <function name="ProcessTextCommand_Counter" parameters="section, data" type="string">
    if (HasAttribute(game, section)) {
      return (ToString(GetAttribute(game, section)))
    }
    else {
      return ("0")
    }
  </function>
  <function name="ProcessTextCommand_Select" parameters="section, data" type="string"><![CDATA[
    elements = Mid(section, 8)
    elementslist = Split(elements, ":")
    objectandatt = StringListItem (elementslist, 0)
    list remove (elementslist, objectandatt)
    objectandattlist = Split(objectandatt, ".")
    if (not ListCount (objectandattlist) = 2) {
      return ("{" + ProcessTextSection(section, data) + "}")
    }
    else {
      object = GetObject(StringListItem(objectandattlist, 0))
      if (object = null) {
        return ("{" + ProcessTextSection(section, data) + "}")
      }
      else if (not HasInt (object, StringListItem(objectandattlist, 1))) {
        return ("{" + ProcessTextSection(section, data) + "}")
      }
      else {
        index = GetInt(object, StringListItem(objectandattlist, 1))
        if ((0 > index) or (index >= Listcount(elementslist))) {
          return ("{" + ProcessTextSection(section, data) + "}")
        }
        else {
          return (ProcessTextSection(ListItem(elementslist, index), data))
        }
      }
    }
  ]]></function>
  <function name="SetFramePicture" parameters="filename"><![CDATA[
    request (SetPanelContents, "<img src=\"" + GetFileURL(filename) + "\" onload=\"setPanelHeight()\"/>")
    game.panelcontents = filename
  ]]></function>
  <function name="ClearFramePicture">
    request (SetPanelContents, "")
    game.panelcontents = null
  </function>
  <function name="ClearScreen">
    request (ClearScreen, "")
  </function>
  <function name="SetForegroundColour" parameters="colour">
    request (Foreground, colour)
    game.defaultforeground = colour
  </function>
  <function name="SetBackgroundColour" parameters="colour">
    request (Background, colour)
    game.defaultbackground = colour
  </function>
  <function name="SetFontName" parameters="font">
    game.defaultfont = font
    game.defaultwebfont = ""
  </function>
  <function name="SetWebFontName" parameters="font">
    AddExternalStylesheet ("https://fonts.googleapis.com/css?family=" + Replace(font, " ", "+"))
    game.defaultwebfont = font
  </function>
  <function name="AddExternalStylesheet" parameters="stylesheet">
    if (game.externalstylesheets = null) {
      game.externalstylesheets = NewStringList()
    }
    if (not ListContains(game.externalstylesheets, stylesheet)) {
      list add (game.externalstylesheets, stylesheet)
      JS.addExternalStylesheet (stylesheet)
    }
  </function>
  <function name="SetFontSize" parameters="size">
    game.defaultfontsize = size
  </function>
  <function name="PrintCentered" parameters="text">
    SetAlignment ("center")
    msg (text)
    SetAlignment ("left")
  </function>
  <function name="ShowYouTube" parameters="id">
    JS.AddYouTube (id)
  </function>
  <function name="ShowVimeo" parameters="id">
    JS.AddVimeo (id)
  </function>
  <function name="WaitForKeyPress">
    request (Wait, "")
  </function>
  <function name="DisplayHttpLink" parameters="text, url, https"><![CDATA[
    pos = Instr(url, "://")
    if (pos > 0) {
      url = Mid(url, pos + 3)
    }
    if (https) {
      url = "https://" + url
    }
    else {
      url = "http://" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="DisplayMailtoLink" parameters="text, url"><![CDATA[
    if (Instr(url, "mailto:") = 0) {
      url = "mailto:" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="CommandLink" parameters="cmd, text" type="string">
    return ("{command:" + cmd + ":" + text + "}")
  </function>
  <function name="Log" parameters="text">
    request (Log, text)
  </function>
  <function name="SetBackgroundImage" parameters="filename">
    JS.SetBackgroundImage (GetFileURL(filename))
    game.backgroundimage = filename
  </function>
  <function name="SetBackgroundOpacity" parameters="opacity">
    JS.SetBackgroundOpacity (opacity)
    game.backgroundopacity = opacity
    game.setbackgroundopacity = true
  </function>
  <function name="DisplayList" parameters="list, numbers"><![CDATA[
    if (numbers) {
      result = "<ol>"
    }
    else {
      result = "<ul>"
    }
    foreach (item, list) {
      result = result + "<li>" + item + "</li>"
    }
    if (numbers) {
      result = result + "</ol>"
    }
    else {
      result = result + "</ul>"
    }
    msg (result)
  ]]></function>
  <function name="SetAlignment" parameters="align">
    JS.createNewDiv (align)
  </function>
  <function name="GetCurrentFontFamily" type="string">
    if (game.defaultwebfont = null) {
      return (game.defaultfont)
    }
    else {
      if (game.defaultwebfont = "") {
        return (game.defaultfont)
      }
      else {
        return ("'" + game.defaultwebfont + "', " + game.defaultfont)
      }
    }
  </function>
  <function name="Grid_SetScale" parameters="scale">
    JS.Grid_SetScale (scale)
  </function>
  <function name="Grid_CalculateMapCoordinates" parameters="room, playerobject"><![CDATA[
    if (room.parent <> null) {
      if (room.grid_parent_offset_auto) {
        room.grid_parent_offset_x = (room.parent.grid_width - room.grid_width) /2.0
        room.grid_parent_offset_y = (room.parent.grid_length - room.grid_length) /2.0
      }
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") - room.grid_parent_offset_x)
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") - room.grid_parent_offset_y)
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
      room.parent.grid_render = true
      Grid_CalculateMapCoordinates (room.parent, playerobject)
    }
    // go through all exits in room, set x,y co-ordinates for the rooms they point to
    foreach (exit, AllExits()) {
      if (exit.parent = room and not GetBoolean(exit, "lookonly")) {
        if (DoesInherit(exit, "northdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "eastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"))
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "westdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"))
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "northwestdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "northeastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southwestdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southeastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "updirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") + exit.grid_length)
          exit.grid_render = false
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "downdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") - exit.grid_length)
          exit.grid_render = false
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "indirection") or DoesInherit(exit, "outdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          exit.grid_render = false
          exit.to.grid_render = true
        }
      }
    }
  ]]></function>
  <function name="Grid_DrawPlayerInRoom" parameters="room">
    if (room.grid_render) {
      Grid_DrawRoom (room, false, game.pov)
      player_x = Grid_GetGridCoordinateForPlayer(game.pov, room, "x") + room.grid_width/2.0
      player_y = Grid_GetGridCoordinateForPlayer(game.pov, room, "y") + room.grid_length/2.0
      player_z = Grid_GetGridCoordinateForPlayer(game.pov, room, "z")
      // Grid_DrawPlayer(x, y, z, radius, border, borderWidth, fill)
      JS.Grid_DrawPlayer (player_x, player_y, player_z, 5, "black", 2, "yellow")
    }
  </function>
  <function name="Grid_DrawRoom" parameters="room, redraw, playerobject"><![CDATA[
    if (room.grid_render) {
      if (redraw or not Grid_GetRoomBooleanForPlayer(playerobject, room, "grid_isdrawn")) {
        if (room.parent <> null) {
          Grid_DrawRoom (room.parent, redraw, playerobject)
        }
        JS.Grid_DrawBox (Grid_GetGridCoordinateForPlayer(game.pov, room, "x"), Grid_GetGridCoordinateForPlayer(game.pov, room, "y"), Grid_GetGridCoordinateForPlayer(game.pov, room, "z"), room.grid_width, room.grid_length, room.grid_border, room.grid_borderwidth, room.grid_fill, room.grid_bordersides)
        if (LengthOf(room.grid_label) > 0) {
          label_x = Grid_GetGridCoordinateForPlayer(game.pov, room, "x") + room.grid_width/2.0
          label_y = (Grid_GetGridCoordinateForPlayer(game.pov, room, "y") + room.grid_length/2.0) - 0.5
          JS.Grid_DrawLabel (label_x, label_y, Grid_GetGridCoordinateForPlayer(game.pov, room, "z"), room.grid_label)
        }
        foreach (exit, AllExits()) {
          if (exit.grid_render and exit.parent = room and exit.grid_length > 0) {
            Grid_DrawLine (Grid_GetGridCoordinateForPlayer(game.pov, exit, "x"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "y"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "end_x"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "end_y"), "black", 1)
          }
        }
        Grid_SetRoomBooleanForPlayer (playerobject, room, "grid_isdrawn", true)
      }
    }
  ]]></function>
  <function name="Grid_ShowCustomLayer" parameters="visible">
    if (visible) {
      JS.Grid_ShowCustomLayer (true)
    }
    else {
      JS.Grid_ShowCustomLayer (false)
    }
  </function>
  <function name="Grid_ClearCustomLayer">
    JS.Grid_ClearCustomLayer ()
  </function>
  <function name="Grid_DrawLine" parameters="x1, y1, x2, y2, border, borderWidth">
    JS.Grid_DrawLine (x1, y1, x2, y2, border, borderWidth)
  </function>
  <function name="Grid_DrawArrow" parameters="id, x1, y1, x2, y2, border, borderWidth">
    JS.Grid_DrawArrow (id, x1, y1, x2, y2, border, borderWidth)
  </function>
  <function name="Grid_DrawGridLines" parameters="x1, y1, x2, y2, border">
    JS.Grid_DrawGridLines (x1, y1, x2, y2, border)
  </function>
  <function name="Grid_SetCentre" parameters="x, y">
    JS.Grid_SetCentre (x, y)
  </function>
  <function name="Grid_DrawSquare" parameters="id, x, y, width, height, text, fill">
    JS.Grid_DrawSquare (id, x, y, width, height, text, fill)
  </function>
  <function name="Grid_LoadSvg" parameters="data, id">
    JS.Grid_LoadSvg (data, id)
  </function>
  <function name="Grid_DrawSvg" parameters="id, symbolid, x, y, width, height">
    JS.Grid_DrawSvg (id, symbolid, x, y, width, height)
  </function>
  <function name="Grid_DrawImage" parameters="id, url, x, y, width, height">
    JS.Grid_DrawImage (id, url, x, y, width, height)
  </function>
  <function name="Grid_AddNewShapePoint" parameters="x, y">
    JS.Grid_AddNewShapePoint (x, y)
  </function>
  <function name="Grid_DrawShape" parameters="id, border, fill, opacity">
    JS.Grid_DrawShape (id, border, fill, opacity)
  </function>
  <function name="JS_GridSquareClick" parameters="parameterstring">
    parameters = Split(parameterstring, ";")
    x = ToInt(StringListItem(parameters, 0))
    y = ToInt(StringListItem(parameters, 1))
    GridSquareClick (x, y)
  </function>
  <function name="GridSquareClick" parameters="x, y">
    // Copy this function into your game to handle grid square clicks
  </function>
  <function name="Grid_Redraw">
    foreach (object, AllObjects()) {
      if (Grid_GetRoomBooleanForPlayer(game.pov, object, "grid_isdrawn")) {
        Grid_DrawRoom (object, true, game.pov)
      }
    }
  </function>
  <function name="Grid_SetGridCoordinateForPlayer" parameters="playerobject, room, coordinate, value">
    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    if (DictionaryContains(coordinates, coordinate)) {
      dictionary remove (coordinates, coordinate)
    }
    dictionary add (coordinates, coordinate, value * 1.0)
  </function>
  <function name="Grid_GetGridCoordinateForPlayer" parameters="playerobject, room, coordinate" type="double">
    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    return (DictionaryItem(coordinates, coordinate))
  </function>
  <function name="Grid_SetRoomBooleanForPlayer" parameters="playerobject, room, coordinate, value">
    datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    if (DictionaryContains(datadictionary, coordinate)) {
      dictionary remove (datadictionary, coordinate)
    }
    dictionary add (datadictionary, coordinate, value)
  </function>
  <function name="Grid_GetRoomBooleanForPlayer" parameters="playerobject, room, attribute" type="boolean">
    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)
    if (not DictionaryContains(coordinatedata, room.name)) {
      return (false)
    }
    else {
      datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
      if (DictionaryContains(datadictionary, attribute)) {
        return (DictionaryItem(datadictionary, attribute))
      }
      else {
        return (false)
      }
    }
  </function>
  <function name="Grid_GetPlayerCoordinateDictionary" parameters="playerobject" type="dictionary">
    if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
      return (Grid_GetPlayerCoordinateDictionary(playerobject.grid_coordinates_delegate))
    }
    else {
      if (not HasAttribute(playerobject, "grid_coordinates")) {
        playerobject.grid_coordinates = NewDictionary()
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "x", 0)
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "y", 0)
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "z", 0)
        playerobject.parent.grid_render = true
        Grid_CalculateMapCoordinates (playerobject.parent, playerobject)
      }
      return (playerobject.grid_coordinates)
    }
  </function>
  <function name="Grid_GetPlayerCoordinatesForRoom" parameters="playerobject, room" type="dictionary">
    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)
    if (not DictionaryContains(coordinatedata, room.name)) {
      dictionary add (coordinatedata, room.name, NewDictionary())
    }
    return (DictionaryItem(coordinatedata, room.name))
  </function>
  <function name="MergePOVCoordinates"><![CDATA[
    coordinateowner = GetCoordinateOwner(game.pov)
    foreach (obj, GetDirectChildren(game.pov.parent)) {
      if (obj <> game.pov and HasAttribute(obj, "grid_coordinates")) {
        objcoordinateowner = GetCoordinateOwner(obj)
        if (coordinateowner <> objcoordinateowner) {
          MapPOVCoordinates (objcoordinateowner, coordinateowner)
        }
      }
    }
  ]]></function>
  <function name="GetCoordinateOwner" parameters="playerobject" type="object">
    if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
      return (GetCoordinateOwner(playerobject.grid_coordinates_delegate))
    }
    else {
      return (playerobject)
    }
  </function>
  <function name="MapPOVCoordinates" parameters="source, target">
    sourcecoordinates = Grid_GetPlayerCoordinateDictionary(source)
    targetcoordinates = Grid_GetPlayerCoordinateDictionary(target)
    xoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "x") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "x")
    yoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "y") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "y")
    zoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "z") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "z")
    foreach (roomname, sourcecoordinates) {
      coordinatedata = DictionaryItem(sourcecoordinates, roomname)
      if (not DictionaryContains(targetcoordinates, roomname)) {
        newroomdata = NewDictionary()
        dictionary add (targetcoordinates, roomname, newroomdata)
        MapPOVCoordinate (coordinatedata, newroomdata, "x", xoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "y", yoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "z", zoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "end_x", xoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "end_y", yoffset)
      }
      else {
        newroomdata = DictionaryItem(targetcoordinates, roomname)
      }
      if (DictionaryContains(coordinatedata, "grid_isdrawn")) {
        if (DictionaryContains(newroomdata, "grid_isdrawn")) {
          dictionary remove (newroomdata, "grid_isdrawn")
        }
        dictionary add (newroomdata, "grid_isdrawn", DictionaryItem(coordinatedata, "grid_isdrawn"))
      }
    }
    source.grid_coordinates_delegate = target
    Grid_Redraw
    Grid_DrawPlayerInRoom (game.pov.parent)
  </function>
  <function name="MapPOVCoordinate" parameters="sourcedata, targetdata, name, offset">
    if (DictionaryContains(sourcedata, name)) {
      value = DictionaryItem(sourcedata, name)
      dictionary add (targetdata, name, value + offset)
    }
  </function>
  <function name="DiceRoll" parameters="dicetype" type="int">
    dpos = Instr(dicetype, "d")
    if (dpos = 0) {
      error ("Invalid dice type: " + dicetype)
    }
    else {
      number_string = Left(dicetype, dpos - 1)
      sides_string = Mid(dicetype, dpos + 1)
      if (not (IsNumeric(number_string) and IsNumeric(sides_string))) {
        error ("Invalid dice type: " + dicetype)
      }
      else {
        number = ToInt(number_string)
        sides = ToInt(sides_string)
        total = 0
        for (i, 1, number) {
          total = total + GetRandomInt(1, sides)
        }
        return (total)
      }
    }
  </function>
  <function name="TextFX_Typewriter" parameters="text, speed">
    TextFX_Typewriter_Internal (text, speed, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)
  </function>
  <function name="TextFX_Typewriter_Internal" parameters="text, speed, font, color, size">
    JS.TextFX.Typewriter (text, speed, font, color, size)
  </function>
  <function name="TextFX_Unscramble" parameters="text, speed, reveal">
    TextFX_Unscramble_Internal (text, speed, reveal, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)
  </function>
  <function name="TextFX_Unscramble_Internal" parameters="text, speed, reveal, font, color, size">
    JS.TextFX.Unscramble (text, speed, reveal, font, color, size)
  </function>
  <function name="InitInterface"><![CDATA[
    if (game.setcustomwidth) {
      JS.setGameWidth (game.customwidth)
    }
    if (not game.showborder) {
      JS.hideBorder ()
    }
    if (game.setcustompadding) {
      JS.setGamePadding (game.custompaddingtop, game.custompaddingbottom, game.custompaddingleft, game.custompaddingright)
    }
    if (game.externalstylesheets <> null) {
      foreach (stylesheet, game.externalstylesheets) {
        JS.addExternalStylesheet (stylesheet)
      }
    }
    if (game.setbackgroundopacity) {
      SetBackgroundOpacity (game.backgroundopacity)
    }
    request (Background, game.defaultbackground)
    request (Foreground, game.defaultforeground)
    request (LinkForeground, game.defaultlinkforeground)
    if (LengthOf(game.backgroundimage) > 0) {
      SetBackgroundImage (game.backgroundimage)
    }
    request (SetCompassDirections, Join(game.compassdirections, ";"))
    request (SetInterfaceString, "InventoryLabel=Inventory")
    request (SetInterfaceString, "StatusLabel=Status")
    request (SetInterfaceString, "PlacesObjectsLabel=Places and Objects")
    request (SetInterfaceString, "CompassLabel=Compass")
    request (SetInterfaceString, "InButtonLabel=in")
    request (SetInterfaceString, "OutButtonLabel=out")
    request (SetInterfaceString, "EmptyListLabel=(empty)")
    request (SetInterfaceString, "NothingSelectedLabel=(nothing selected)")
    request (SetInterfaceString, "TypeHereLabel=Type here...")
    request (SetInterfaceString, "ContinueLabel=Continue...")
    JS.SetMenuBackground (game.menubackground)
    JS.SetMenuForeground (game.menuforeground)
    JS.SetMenuHoverBackground (game.menuhoverbackground)
    JS.SetMenuHoverForeground (game.menuhoverforeground)
    JS.SetMenuFontName (game.menufont)
    JS.SetMenuFontSize (game.menufontsize + "pt")
    if (not game.underlinehyperlinks) {
      JS.TurnOffHyperlinksUnderline ()
    }
    if (game.showpanes) {
      request (Show, "Panes")
    }
    else {
      request (Hide, "Panes")
    }
    ResetCommandBarFormat
    if (game.showcommandbar) {
      request (Show, "Command")
    }
    else {
      request (Hide, "Command")
    }
    if (game.showlocation) {
      request (Show, "Location")
    }
    else {
      request (Hide, "Location")
    }
    if (HasString(game, "panelcontents")) {
      SetFramePicture (game.panelcontents)
    }
    if (game.gridmap) {
      JS.ShowGrid (game.mapsize)
      Grid_SetScale (game.mapscale)
      if (game.pov <> null) {
        if (game.pov.parent <> null) {
          Grid_Redraw
          Grid_DrawPlayerInRoom (game.pov.parent)
        }
      }
    }
    InitUserInterface
  ]]></function>
  <function name="InitUserInterface">
  </function>
  <function name="StartGame"><![CDATA[
    StartTurnOutputSection
    if (game.showtitle) {
      JS.StartOutputSection ("title")
      PrintCentered ("<span style=\"font-size:260%\">" + game.gamename + "</span>")
      if (game.subtitle <> null) {
        if (LengthOf(game.subtitle) > 0) {
          PrintCentered ("<span style=\"font-size:130%\">" + game.subtitle + "</span>")
        }
      }
      if (game.author <> null) {
        if (LengthOf(game.author) > 0) {
          PrintCentered ("<br/><span style=\"font-size:140%\">by " + game.author + "</span>")
        }
      }
      msg ("<div style=\"margin-top:20px\"></div>")
      JS.EndOutputSection ("title")
    }
    if (game.pov = null) {
      playerObject = GetObject("player")
      if (playerObject = null) {
        if (ListCount(AllObjects()) > 0) {
          firstRoom = ObjectListItem(AllObjects(), 0)
        }
        else {
          create ("room")
          firstRoom = room
        }
        create ("player")
        player.parent = firstRoom
      }
      game.pov = player
    }
    else {
      InitPOV (null, game.pov)
    }
    InitStatusAttributes
    UpdateStatusAttributes
    InitVerbsList
    if (HasScript(game, "start")) {
      do (game, "start")
    }
    UpdateStatusAttributes
    UpdateObjectLinks
    on ready {
      if (game.gridmap) {
        Grid_DrawPlayerInRoom (game.pov.parent)
      }
      if (game.displayroomdescriptiononstart) {
        OnEnterRoom (null)
      }
      UpdateStatusAttributes
      UpdateObjectLinks
    }
  ]]></function>
  <function name="RandomChance" parameters="percentile" type="boolean"><![CDATA[
    return (GetRandomInt(1,100) <= percentile)
  ]]></function>
  <function name="SetObjectFlagOn" parameters="object, flag">
    set (object, flag, true)
  </function>
  <function name="SetObjectFlagOff" parameters="object, flag">
    set (object, flag, false)
  </function>
  <function name="IncreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) + 1)
  </function>
  <function name="DecreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) - 1)
  </function>
  <function name="IsSwitchedOn" parameters="object" type="boolean">
    return (GetBoolean(object, "switchedon"))
  </function>
  <function name="AddToInventory" parameters="object">
    object.parent = game.pov
  </function>
  <function name="MoveObject" parameters="object, parent">
    object.parent = parent
  </function>
  <function name="MoveObjectHere" parameters="object">
    object.parent = game.pov.parent
  </function>
  <function name="RemoveObject" parameters="object">
    object.parent = null
  </function>
  <function name="MakeObjectVisible" parameters="object">
    object.visible = true
  </function>
  <function name="MakeObjectInvisible" parameters="object">
    object.visible = false
  </function>
  <function name="MakeExitVisible" parameters="object">
    object.visible = true
  </function>
  <function name="MakeExitInvisible" parameters="object">
    object.visible = false
  </function>
  <function name="HelperOpenObject" parameters="object">
    object.isopen = true
  </function>
  <function name="HelperCloseObject" parameters="object">
    object.isopen = false
  </function>
  <function name="CloneObject" parameters="object" type="object">
    newobject = Clone(object)
    if (not HasString(object, "alias")) {
      newobject.alias = object.name
    }
    return (newobject)
  </function>
  <function name="CloneObjectAndMove" parameters="object, newparent" type="object">
    newobject = CloneObject(object)
    newobject.parent = newparent
    return (newobject)
  </function>
  <function name="LockExit" parameters="exit">
    exit.locked = true
  </function>
  <function name="UnlockExit" parameters="exit">
    exit.locked = false
  </function>
  <function name="SwitchOn" parameters="object">
    object.switchedon = true
  </function>
  <function name="SwitchOff" parameters="object">
    object.switchedon = false
  </function>
  <function name="SetDark" parameters="object">
    object.dark = true
  </function>
  <function name="SetLight" parameters="object">
    object.dark = false
  </function>
  <function name="SetObjectLightstrength" parameters="object, strength">
    if (LengthOf(strength) = 0) {
      object.lightsource = false
    }
    else {
      object.lightsource = true
    }
    object.lightstrength = strength
  </function>
  <function name="SetExitLightstrength" parameters="exit, strength">
    if (LengthOf(strength) = 0) {
      exit.lightsource = false
    }
    else {
      exit.lightsource = true
    }
    exit.lightstrength = strength
  </function>
  <function name="ChangePOV" parameters="object"><![CDATA[
    if (game.pov <> object) {
      game.pov = object
      if (game.gridmap) {
        JS.Grid_ClearAllLayers ()
        Grid_Redraw
      }
      OnEnterRoom (null)
    }
  ]]></function>
  <function name="InitPOV" parameters="oldPOV, newPOV"><![CDATA[
    if (oldPOV <> null) {
      oldPOV.alias = oldPOV.external_alias
      oldPOV.alt = oldPOV.external_alt
      oldPOV.look = oldPOV.external_look
      oldPOV.gender = oldPOV.external_gender
      oldPOV.article = oldPOV.external_article
    }
    newPOV.external_alias = newPOV.alias
    newPOV.external_alt = newPOV.alt
    newPOV.external_look = newPOV.look
    newPOV.external_gender = newPOV.gender
    newPOV.external_article = newPOV.article
    if (not GetBoolean(newPOV, "pov_used")) {
      if (newPOV.alt = null) {
        newPOV.pov_alt = newPOV.pov_alt
      }
      else {
        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)
      }
      if (newPOV.alias <> null) {
        list add (newPOV.pov_alt, newPOV.alias)
      }
      if (game.showhealth) {
        newPOV.health = 100
        newPOV.changedhealth => {
          if (this.health > 100) {
            this.health = 100
          }
          else if (this.health = 0) {
            if (HasScript(game, "onhealthzero")) {
              do (game, "onhealthzero")
            }
          }
          else if (this.health < 0) {
            this.health = 0
            // changedhealth will be called again so the onhealthzero script will run
          }
        }
      }
      newPOV.pov_used = true
    }
    newPOV.alias = newPOV.pov_alias
    newPOV.alt = newPOV.pov_alt
    newPOV.look = newPOV.pov_look
    newPOV.gender = newPOV.pov_gender
    newPOV.article = newPOV.pov_article
  ]]></function>
  <function name="InitVerbsList">
    game.verbattributes = NewStringList()
    game.verbattributeslookup = NewObjectDictionary()
    foreach (cmd, AllCommands()) {
      if (HasString(cmd, "property")) {
        list add (game.verbattributes, cmd.property)
        dictionary add (game.verbattributeslookup, cmd.property, cmd)
      }
    }
  </function>
  <function name="GetDisplayVerbs" parameters="object" type="stringlist">
    if (Contains(game.pov, object)) {
      baselist = object.inventoryverbs
    }
    else {
      baselist = object.displayverbs
    }
    if (not game.autodisplayverbs or GetBoolean(object, "usestandardverblist")) {
      return (baselist)
    }
    else {
      if (HasAttribute(object, "generatedverbslist")) {
        verbs = object.generatedverbslist
      }
      else {
        verbs = NewStringList()
        foreach (attr, GetAttributeNames(object, false)) {
          if (ListContains(game.verbattributes, attr)) {
            cmd = ObjectDictionaryItem(game.verbattributeslookup, attr)
            if (HasString(cmd, "displayverb")) {
              displayverb = CapFirst(cmd.displayverb)
            }
            else {
              displayverb = CapFirst(attr)
            }
            if (not ListContains(baselist, displayverb)) {
              list add (verbs, displayverb)
            }
          }
        }
        object.generatedverbslist = verbs
      }
      if (GetBoolean(object, "useindividualverblist")) {
        return (verbs)
      }
      else {
        return (ListCombine(baselist, verbs))
      }
    }
  </function>
  <function name="ShowMenu" parameters="caption, options, allowCancel, callback"><![CDATA[
    outputsection = StartNewOutputSection()
    msg (caption)
    count = 0
    game.menuoptionskeys = NewStringList()
    foreach (option, options) {
      list add (game.menuoptionskeys, option)
      count = count + 1
      if (TypeOf(options) = "stringlist") {
        optionText = option
      }
      else {
        optionText = StringDictionaryItem(options, option)
      }
      msg (count + ": <a class=\"cmdlink\" style=\"" + GetCurrentLinkTextFormat() + "\" onclick=\"ASLEvent('ShowMenuResponse','" + option + "')\">" + optionText + "</a>")
    }
    EndOutputSection (outputsection)
    game.menuoptions = options
    game.menuallowcancel = allowCancel
    game.menucallback = callback
    game.menuoutputsection = outputsection
  ]]></function>
  <function name="ShowMenuResponse" parameters="option">
    if (game.menucallback = null) {
      error ("Unexpected menu response")
    }
    else {
      parameters = NewStringDictionary()
      dictionary add (parameters, "result", option)
      script = game.menucallback
      ClearMenu
      invoke (script, parameters)
    }
  </function>
  <function name="HandleMenuTextResponse" parameters="input" type="boolean"><![CDATA[
    handled = false
    if (IsInt(input)) {
      number = ToInt(input)
      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {
        handled = true
        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))
      }
    }
    return (handled)
  ]]></function>
  <function name="ClearMenu">
    HideOutputSection (game.menuoutputsection)
    game.menuoutputsection = null
    game.menuoptions = null
    game.menucallback = null
  </function>
  <function name="StartNewOutputSection" type="string">
    if (not HasInt(game, "lastoutputsection")) {
      game.lastoutputsection = 0
    }
    game.lastoutputsection = game.lastoutputsection + 1
    name = "section" + game.lastoutputsection
    JS.StartOutputSection (name)
    return (name)
  </function>
  <function name="EndOutputSection" parameters="name">
    JS.EndOutputSection (name)
  </function>
  <function name="HideOutputSection" parameters="name">
    JS.HideOutputSection (name)
  </function>
  <function name="StartTurnOutputSection">
    if (HasString(game, "currentturnoutputsection")) {
      game.lastturnoutputsection = game.currentturnoutputsection
      EndOutputSection (game.currentturnoutputsection)
    }
    game.currentturnoutputsection = StartNewOutputSection()
  </function>
  <function name="HidePreviousTurnOutput">
    if (HasString(game, "lastturnoutputsection")) {
      HideOutputSection (game.lastturnoutputsection)
    }
  </function>
  <function name="Ask" parameters="question, callback">
    options = NewStringList()
    list add (options, "Yes")
    list add (options, "No")
    game.askcallback = callback
    ShowMenu (question, options, false) {
      parameters = NewDictionary()
      if (result = "Yes") {
        boolresult = true
      }
      else {
        boolresult = false
      }
      dictionary add (parameters, "result", boolresult)
      callback = game.askcallback
      game.askcallback = null
      invoke (callback, parameters)
    }
  </function>
  <function name="AllKeysAvailable" parameters="object" type="boolean">
    if (HasObject(object, "key")) {
      if (not HasInt(object,"keycount")) {
        object.keycount = 1
        object.key1 = object.key
      }
      if (not HasObject(object, "key1")) {
        object.key1 = object.key
      }
    }
    for (x, 1, object.keycount) {
      keyname = "key" + ToString(x)
      if (HasObject(object, keyname)) {
        if (not ListContains(ScopeInventory(), GetAttribute(object, keyname))) {
          return (false)
        }
      }
    }
    return (true)
  </function>
</asl>